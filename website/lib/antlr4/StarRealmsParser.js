// Generated from StarRealms.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import StarRealmsListener from './StarRealmsListener.js';
import StarRealmsVisitor from './StarRealmsVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003}\u0562\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0003\u0002\u0006\u0002\u010e\n\u0002\r\u0002\u000e\u0002",
    "\u010f\u0003\u0003\u0006\u0003\u0113\n\u0003\r\u0003\u000e\u0003\u0114",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u011a\n\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005",
    "\u0004\u0128\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0130\n\u0005\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u0134\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0007\u0007\u0139\n\u0007\f\u0007\u000e\u0007\u013c\u000b\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u0153\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u015d\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0007\u000e\u0182\n\u000e",
    "\f\u000e\u000e\u000e\u0185\u000b\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u018f\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u01a3\n\u0013\f\u0013\u000e\u0013",
    "\u01a6\u000b\u0013\u0003\u0013\u0005\u0013\u01a9\n\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01af\n\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u01c3\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0006\u001a\u01de\n\u001a\r\u001a",
    "\u000e\u001a\u01df\u0003\u001a\u0006\u001a\u01e3\n\u001a\r\u001a\u000e",
    "\u001a\u01e4\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u01eb\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u01ff\n\u001e\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u0203\n\u001f\f\u001f\u000e\u001f\u0206\u000b\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u0216\n!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0007\'\u025c\n\'\f\'\u000e\'",
    "\u025f\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u026d\n)\u0003*\u0003*\u0007*\u0271",
    "\n*\f*\u000e*\u0274\u000b*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u027f\n+\u0003,\u0003,\u0003,\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00053\u02e4\n3\u00034\u00034\u00034\u0005",
    "4\u02e9\n4\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00037\u00037\u00037\u00037\u00038\u00038\u00068\u0304\n8\r8\u000e",
    "8\u0305\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0007;\u0318\n;\f",
    ";\u000e;\u031b\u000b;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0005=\u0324\n=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003",
    "@\u0006@\u032e\n@\r@\u000e@\u032f\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u033d\nA\u0003B\u0003",
    "B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u0357\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003E\u0003E\u0007E\u0361\nE\fE\u000eE\u0364\u000bE\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0005",
    "G\u0371\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003K\u0003K\u0007K\u038a\nK\fK\u000eK\u038d\u000b",
    "K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u0397",
    "\nL\u0003M\u0003M\u0003M\u0006M\u039c\nM\rM\u000eM\u039d\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0006S\u03df\nS\rS\u000eS\u03e0\u0003S\u0003S\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0401\nU\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0006",
    "W\u040e\nW\rW\u000eW\u040f\u0003W\u0003W\u0003X\u0003X\u0007X\u0416",
    "\nX\fX\u000eX\u0419\u000bX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0005Z\u042e\nZ\u0003[\u0003[\u0003[\u0003\\",
    "\u0006\\\u0434\n\\\r\\\u000e\\\u0435\u0003\\\u0006\\\u0439\n\\\r\\\u000e",
    "\\\u043a\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003b\u0003b\u0007b\u0453\nb\fb\u000eb\u0456\u000bb\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0003i\u0005i\u0485\ni\u0003i\u0003i\u0003i\u0003",
    "j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0006m\u04a7",
    "\nm\rm\u000em\u04a8\u0003m\u0003m\u0003n\u0006n\u04ae\nn\rn\u000en\u04af",
    "\u0003n\u0006n\u04b3\nn\rn\u000en\u04b4\u0003n\u0003n\u0003o\u0003o",
    "\u0007o\u04bb\no\fo\u000eo\u04be\u000bo\u0003o\u0003o\u0003p\u0003p",
    "\u0003p\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0003q\u0005q\u04cc",
    "\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003{\u0006{\u0506\n{\r{\u000e",
    "{\u0507\u0003{\u0003{\u0006{\u050c\n{\r{\u000e{\u050d\u0003{\u0005{",
    "\u0511\n{\u0003{\u0006{\u0514\n{\r{\u000e{\u0515\u0005{\u0518\n{\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0005}\u0522\n}\u0003",
    "}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0005\u007f\u052e\n\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u0538\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0084\u0006\u0084\u0553\n\u0084\r\u0084",
    "\u000e\u0084\u0554\u0003\u0085\u0003\u0085\u0005\u0085\u0559\n\u0085",
    "\u0003\u0085\u0006\u0085\u055c\n\u0085\r\u0085\u000e\u0085\u055d\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0002\u0002\u0087\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u0002\u0006\u0004\u0002xx||\u0004\u0002",
    "xx{|\u0004\u0002xx{{\u0005\u0002\bhjpyy\u0002\u0582\u0002\u010d\u0003",
    "\u0002\u0002\u0002\u0004\u0112\u0003\u0002\u0002\u0002\u0006\u0127\u0003",
    "\u0002\u0002\u0002\b\u0129\u0003\u0002\u0002\u0002\n\u0133\u0003\u0002",
    "\u0002\u0002\f\u0135\u0003\u0002\u0002\u0002\u000e\u013d\u0003\u0002",
    "\u0002\u0002\u0010\u0141\u0003\u0002\u0002\u0002\u0012\u0152\u0003\u0002",
    "\u0002\u0002\u0014\u0154\u0003\u0002\u0002\u0002\u0016\u0164\u0003\u0002",
    "\u0002\u0002\u0018\u0173\u0003\u0002\u0002\u0002\u001a\u017f\u0003\u0002",
    "\u0002\u0002\u001c\u0186\u0003\u0002\u0002\u0002\u001e\u018e\u0003\u0002",
    "\u0002\u0002 \u0190\u0003\u0002\u0002\u0002\"\u0196\u0003\u0002\u0002",
    "\u0002$\u01a0\u0003\u0002\u0002\u0002&\u01ae\u0003\u0002\u0002\u0002",
    "(\u01b0\u0003\u0002\u0002\u0002*\u01c2\u0003\u0002\u0002\u0002,\u01c4",
    "\u0003\u0002\u0002\u0002.\u01cb\u0003\u0002\u0002\u00020\u01ce\u0003",
    "\u0002\u0002\u00022\u01dd\u0003\u0002\u0002\u00024\u01e6\u0003\u0002",
    "\u0002\u00026\u01ef\u0003\u0002\u0002\u00028\u01f3\u0003\u0002\u0002",
    "\u0002:\u01f9\u0003\u0002\u0002\u0002<\u0200\u0003\u0002\u0002\u0002",
    ">\u0207\u0003\u0002\u0002\u0002@\u0215\u0003\u0002\u0002\u0002B\u0217",
    "\u0003\u0002\u0002\u0002D\u0225\u0003\u0002\u0002\u0002F\u0234\u0003",
    "\u0002\u0002\u0002H\u0241\u0003\u0002\u0002\u0002J\u0247\u0003\u0002",
    "\u0002\u0002L\u0259\u0003\u0002\u0002\u0002N\u0260\u0003\u0002\u0002",
    "\u0002P\u026c\u0003\u0002\u0002\u0002R\u026e\u0003\u0002\u0002\u0002",
    "T\u027e\u0003\u0002\u0002\u0002V\u0280\u0003\u0002\u0002\u0002X\u0283",
    "\u0003\u0002\u0002\u0002Z\u028f\u0003\u0002\u0002\u0002\\\u029d\u0003",
    "\u0002\u0002\u0002^\u02b2\u0003\u0002\u0002\u0002`\u02bc\u0003\u0002",
    "\u0002\u0002b\u02c6\u0003\u0002\u0002\u0002d\u02e3\u0003\u0002\u0002",
    "\u0002f\u02e5\u0003\u0002\u0002\u0002h\u02ed\u0003\u0002\u0002\u0002",
    "j\u02f5\u0003\u0002\u0002\u0002l\u02fd\u0003\u0002\u0002\u0002n\u0301",
    "\u0003\u0002\u0002\u0002p\u0307\u0003\u0002\u0002\u0002r\u030e\u0003",
    "\u0002\u0002\u0002t\u0315\u0003\u0002\u0002\u0002v\u031c\u0003\u0002",
    "\u0002\u0002x\u0323\u0003\u0002\u0002\u0002z\u0325\u0003\u0002\u0002",
    "\u0002|\u0328\u0003\u0002\u0002\u0002~\u032d\u0003\u0002\u0002\u0002",
    "\u0080\u033c\u0003\u0002\u0002\u0002\u0082\u033e\u0003\u0002\u0002\u0002",
    "\u0084\u0356\u0003\u0002\u0002\u0002\u0086\u0358\u0003\u0002\u0002\u0002",
    "\u0088\u035e\u0003\u0002\u0002\u0002\u008a\u0365\u0003\u0002\u0002\u0002",
    "\u008c\u0370\u0003\u0002\u0002\u0002\u008e\u0372\u0003\u0002\u0002\u0002",
    "\u0090\u0378\u0003\u0002\u0002\u0002\u0092\u037f\u0003\u0002\u0002\u0002",
    "\u0094\u0387\u0003\u0002\u0002\u0002\u0096\u0396\u0003\u0002\u0002\u0002",
    "\u0098\u0398\u0003\u0002\u0002\u0002\u009a\u03a6\u0003\u0002\u0002\u0002",
    "\u009c\u03b1\u0003\u0002\u0002\u0002\u009e\u03b7\u0003\u0002\u0002\u0002",
    "\u00a0\u03c1\u0003\u0002\u0002\u0002\u00a2\u03ce\u0003\u0002\u0002\u0002",
    "\u00a4\u03db\u0003\u0002\u0002\u0002\u00a6\u03e6\u0003\u0002\u0002\u0002",
    "\u00a8\u0400\u0003\u0002\u0002\u0002\u00aa\u0402\u0003\u0002\u0002\u0002",
    "\u00ac\u0408\u0003\u0002\u0002\u0002\u00ae\u0413\u0003\u0002\u0002\u0002",
    "\u00b0\u041a\u0003\u0002\u0002\u0002\u00b2\u042d\u0003\u0002\u0002\u0002",
    "\u00b4\u042f\u0003\u0002\u0002\u0002\u00b6\u0433\u0003\u0002\u0002\u0002",
    "\u00b8\u043c\u0003\u0002\u0002\u0002\u00ba\u043f\u0003\u0002\u0002\u0002",
    "\u00bc\u0442\u0003\u0002\u0002\u0002\u00be\u0447\u0003\u0002\u0002\u0002",
    "\u00c0\u044a\u0003\u0002\u0002\u0002\u00c2\u0450\u0003\u0002\u0002\u0002",
    "\u00c4\u0457\u0003\u0002\u0002\u0002\u00c6\u045f\u0003\u0002\u0002\u0002",
    "\u00c8\u0467\u0003\u0002\u0002\u0002\u00ca\u046a\u0003\u0002\u0002\u0002",
    "\u00cc\u0470\u0003\u0002\u0002\u0002\u00ce\u0476\u0003\u0002\u0002\u0002",
    "\u00d0\u0480\u0003\u0002\u0002\u0002\u00d2\u0489\u0003\u0002\u0002\u0002",
    "\u00d4\u048d\u0003\u0002\u0002\u0002\u00d6\u0496\u0003\u0002\u0002\u0002",
    "\u00d8\u04a2\u0003\u0002\u0002\u0002\u00da\u04ad\u0003\u0002\u0002\u0002",
    "\u00dc\u04b8\u0003\u0002\u0002\u0002\u00de\u04c1\u0003\u0002\u0002\u0002",
    "\u00e0\u04cb\u0003\u0002\u0002\u0002\u00e2\u04cd\u0003\u0002\u0002\u0002",
    "\u00e4\u04d3\u0003\u0002\u0002\u0002\u00e6\u04d8\u0003\u0002\u0002\u0002",
    "\u00e8\u04e1\u0003\u0002\u0002\u0002\u00ea\u04e7\u0003\u0002\u0002\u0002",
    "\u00ec\u04eb\u0003\u0002\u0002\u0002\u00ee\u04f3\u0003\u0002\u0002\u0002",
    "\u00f0\u04f9\u0003\u0002\u0002\u0002\u00f2\u0500\u0003\u0002\u0002\u0002",
    "\u00f4\u0517\u0003\u0002\u0002\u0002\u00f6\u0519\u0003\u0002\u0002\u0002",
    "\u00f8\u051e\u0003\u0002\u0002\u0002\u00fa\u0527\u0003\u0002\u0002\u0002",
    "\u00fc\u052a\u0003\u0002\u0002\u0002\u00fe\u0534\u0003\u0002\u0002\u0002",
    "\u0100\u053e\u0003\u0002\u0002\u0002\u0102\u0544\u0003\u0002\u0002\u0002",
    "\u0104\u0548\u0003\u0002\u0002\u0002\u0106\u0552\u0003\u0002\u0002\u0002",
    "\u0108\u055b\u0003\u0002\u0002\u0002\u010a\u055f\u0003\u0002\u0002\u0002",
    "\u010c\u010e\u0005\u0004\u0003\u0002\u010d\u010c\u0003\u0002\u0002\u0002",
    "\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002\u0002",
    "\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0003\u0003\u0002\u0002\u0002",
    "\u0111\u0113\u0005\u0006\u0004\u0002\u0112\u0111\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0112\u0003\u0002\u0002\u0002",
    "\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0119\u0003\u0002\u0002\u0002",
    "\u0116\u011a\u0005\u00dco\u0002\u0117\u011a\u0005\b\u0005\u0002\u0118",
    "\u011a\u0007\u0002\u0002\u0003\u0119\u0116\u0003\u0002\u0002\u0002\u0119",
    "\u0117\u0003\u0002\u0002\u0002\u0119\u0118\u0003\u0002\u0002\u0002\u011a",
    "\u0005\u0003\u0002\u0002\u0002\u011b\u0128\u0005\n\u0006\u0002\u011c",
    "\u0128\u0005L\'\u0002\u011d\u0128\u0005R*\u0002\u011e\u0128\u0005\u001a",
    "\u000e\u0002\u011f\u0128\u0005\f\u0007\u0002\u0120\u0128\u0005$\u0013",
    "\u0002\u0121\u0128\u0005n8\u0002\u0122\u0128\u0005t;\u0002\u0123\u0128",
    "\u0005z>\u0002\u0124\u0128\u0005\u0088E\u0002\u0125\u0128\u0005\u0094",
    "K\u0002\u0126\u0128\u0005\u00aeX\u0002\u0127\u011b\u0003\u0002\u0002",
    "\u0002\u0127\u011c\u0003\u0002\u0002\u0002\u0127\u011d\u0003\u0002\u0002",
    "\u0002\u0127\u011e\u0003\u0002\u0002\u0002\u0127\u011f\u0003\u0002\u0002",
    "\u0002\u0127\u0120\u0003\u0002\u0002\u0002\u0127\u0121\u0003\u0002\u0002",
    "\u0002\u0127\u0122\u0003\u0002\u0002\u0002\u0127\u0123\u0003\u0002\u0002",
    "\u0002\u0127\u0124\u0003\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002",
    "\u0002\u0127\u0126\u0003\u0002\u0002\u0002\u0128\u0007\u0003\u0002\u0002",
    "\u0002\u0129\u012a\u0005\u0106\u0084\u0002\u012a\u012b\u0007d\u0002",
    "\u0002\u012b\u012c\u0007e\u0002\u0002\u012c\u012d\u0007\\\u0002\u0002",
    "\u012d\u012f\u0007R\u0002\u0002\u012e\u0130\u0007}\u0002\u0002\u012f",
    "\u012e\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130",
    "\t\u0003\u0002\u0002\u0002\u0131\u0134\u0005\u00fc\u007f\u0002\u0132",
    "\u0134\u0005\u00f4{\u0002\u0133\u0131\u0003\u0002\u0002\u0002\u0133",
    "\u0132\u0003\u0002\u0002\u0002\u0134\u000b\u0003\u0002\u0002\u0002\u0135",
    "\u0136\u0005\u001c\u000f\u0002\u0136\u013a\u0005\u000e\b\u0002\u0137",
    "\u0139\u0005\u0012\n\u0002\u0138\u0137\u0003\u0002\u0002\u0002\u0139",
    "\u013c\u0003\u0002\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013a",
    "\u013b\u0003\u0002\u0002\u0002\u013b\r\u0003\u0002\u0002\u0002\u013c",
    "\u013a\u0003\u0002\u0002\u0002\u013d\u013e\u0005\u00fe\u0080\u0002\u013e",
    "\u013f\u0005\u0010\t\u0002\u013f\u0140\u0005\u00e4s\u0002\u0140\u000f",
    "\u0003\u0002\u0002\u0002\u0141\u0142\u0007%\u0002\u0002\u0142\u0143",
    "\u0005\u0108\u0085\u0002\u0143\u0144\u0007k\u0002\u0002\u0144\u0145",
    "\u0007p\u0002\u0002\u0145\u0146\u0007z\u0002\u0002\u0146\u0147\u0007",
    "-\u0002\u0002\u0147\u0148\u0007*\u0002\u0002\u0148\u0149\u0007}\u0002",
    "\u0002\u0149\u0011\u0003\u0002\u0002\u0002\u014a\u0153\u0005\u0014\u000b",
    "\u0002\u014b\u0153\u0005\u0016\f\u0002\u014c\u0153\u0005\u0018\r\u0002",
    "\u014d\u0153\u00050\u0019\u0002\u014e\u0153\u0005\u00fc\u007f\u0002",
    "\u014f\u0153\u0005\u00f4{\u0002\u0150\u0153\u00052\u001a\u0002\u0151",
    "\u0153\u00056\u001c\u0002\u0152\u014a\u0003\u0002\u0002\u0002\u0152",
    "\u014b\u0003\u0002\u0002\u0002\u0152\u014c\u0003\u0002\u0002\u0002\u0152",
    "\u014d\u0003\u0002\u0002\u0002\u0152\u014e\u0003\u0002\u0002\u0002\u0152",
    "\u014f\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0152",
    "\u0151\u0003\u0002\u0002\u0002\u0153\u0013\u0003\u0002\u0002\u0002\u0154",
    "\u0155\u0007 \u0002\u0002\u0155\u015c\u0007\u0017\u0002\u0002\u0156",
    "\u0157\u0007m\u0002\u0002\u0157\u0158\u0007k\u0002\u0002\u0158\u0159",
    "\u0007x\u0002\u0002\u0159\u015d\u0007:\u0002\u0002\u015a\u015b\u0007",
    "y\u0002\u0002\u015b\u015d\u0007L\u0002\u0002\u015c\u0156\u0003\u0002",
    "\u0002\u0002\u015c\u015a\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e\u015f\u0007j\u0002\u0002\u015f\u0160\u0007\\\u0002",
    "\u0002\u0160\u0161\u0007\n\u0002\u0002\u0161\u0162\u0007[\u0002\u0002",
    "\u0162\u0163\u0007}\u0002\u0002\u0163\u0015\u0003\u0002\u0002\u0002",
    "\u0164\u0165\u0007 \u0002\u0002\u0165\u0166\u0007\u0010\u0002\u0002",
    "\u0166\u0167\u0007f\u0002\u0002\u0167\u0168\u0007@\u0002\u0002\u0168",
    "\u0169\u0007n\u0002\u0002\u0169\u016a\u0007B\u0002\u0002\u016a\u016b",
    "\u0007l\u0002\u0002\u016b\u016c\u0007H\u0002\u0002\u016c\u016d\u0007",
    "x\u0002\u0002\u016d\u016e\u0007n\u0002\u0002\u016e\u016f\u0007S\u0002",
    "\u0002\u016f\u0170\u0007k\u0002\u0002\u0170\u0171\u0007I\u0002\u0002",
    "\u0171\u0172\u0007}\u0002\u0002\u0172\u0017\u0003\u0002\u0002\u0002",
    "\u0173\u0174\u0007 \u0002\u0002\u0174\u0175\u0007\u0017\u0002\u0002",
    "\u0175\u0176\u0007y\u0002\u0002\u0176\u0177\u0007L\u0002\u0002\u0177",
    "\u0178\u0007N\u0002\u0002\u0178\u0179\u0007O\u0002\u0002\u0179\u017a",
    "\u0007Q\u0002\u0002\u017a\u017b\u0007n\u0002\u0002\u017b\u017c\u0007",
    "\u001b\u0002\u0002\u017c\u017d\u0007D\u0002\u0002\u017d\u017e\u0007",
    "}\u0002\u0002\u017e\u0019\u0003\u0002\u0002\u0002\u017f\u0183\u0005",
    "\u001c\u000f\u0002\u0180\u0182\u0005\u001e\u0010\u0002\u0181\u0180\u0003",
    "\u0002\u0002\u0002\u0182\u0185\u0003\u0002\u0002\u0002\u0183\u0181\u0003",
    "\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u001b\u0003",
    "\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0186\u0187\u0007",
    "\u0011\u0002\u0002\u0187\u0188\u0005\u0108\u0085\u0002\u0188\u0189\u0007",
    "}\u0002\u0002\u0189\u001d\u0003\u0002\u0002\u0002\u018a\u018f\u0005",
    "\u00fe\u0080\u0002\u018b\u018f\u0005 \u0011\u0002\u018c\u018f\u0005",
    "\"\u0012\u0002\u018d\u018f\u0005\u0092J\u0002\u018e\u018a\u0003\u0002",
    "\u0002\u0002\u018e\u018b\u0003\u0002\u0002\u0002\u018e\u018c\u0003\u0002",
    "\u0002\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018f\u001f\u0003\u0002",
    "\u0002\u0002\u0190\u0191\u0007\u0011\u0002\u0002\u0191\u0192\u0005\u0108",
    "\u0085\u0002\u0192\u0193\u0007k\u0002\u0002\u0193\u0194\u0007Q\u0002",
    "\u0002\u0194\u0195\u0007}\u0002\u0002\u0195!\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0007\u0011\u0002\u0002\u0197\u0198\u0005\u0108\u0085\u0002",
    "\u0198\u0199\u0007k\u0002\u0002\u0199\u019a\u0007\\\u0002\u0002\u019a",
    "\u019b\u0007]\u0002\u0002\u019b\u019c\u0007l\u0002\u0002\u019c\u019d",
    "\u0007\\\u0002\u0002\u019d\u019e\u0007I\u0002\u0002\u019e\u019f\u0007",
    "}\u0002\u0002\u019f#\u0003\u0002\u0002\u0002\u01a0\u01a4\u0005&\u0014",
    "\u0002\u01a1\u01a3\u0005*\u0016\u0002\u01a2\u01a1\u0003\u0002\u0002",
    "\u0002\u01a3\u01a6\u0003\u0002\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002",
    "\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a8\u0003\u0002\u0002",
    "\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a7\u01a9\u0005<\u001f",
    "\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002",
    "\u0002\u01a9%\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007F\u0002\u0002",
    "\u01ab\u01ac\u0007Y\u0002\u0002\u01ac\u01af\u0007}\u0002\u0002\u01ad",
    "\u01af\u0005(\u0015\u0002\u01ae\u01aa\u0003\u0002\u0002\u0002\u01ae",
    "\u01ad\u0003\u0002\u0002\u0002\u01af\'\u0003\u0002\u0002\u0002\u01b0",
    "\u01b1\u00071\u0002\u0002\u01b1\u01b2\u0005\u0108\u0085\u0002\u01b2",
    "\u01b3\u0007}\u0002\u0002\u01b3)\u0003\u0002\u0002\u0002\u01b4\u01c3",
    "\u0005\u00fc\u007f\u0002\u01b5\u01c3\u0005,\u0017\u0002\u01b6\u01c3",
    "\u0005\u00f4{\u0002\u01b7\u01c3\u00054\u001b\u0002\u01b8\u01c3\u0005",
    "\u00f0y\u0002\u01b9\u01c3\u0005\u00f2z\u0002\u01ba\u01c3\u0005.\u0018",
    "\u0002\u01bb\u01c3\u0005\u00ecw\u0002\u01bc\u01c3\u00056\u001c\u0002",
    "\u01bd\u01c3\u0005\u0102\u0082\u0002\u01be\u01c3\u00058\u001d\u0002",
    "\u01bf\u01c3\u0005:\u001e\u0002\u01c0\u01c3\u0005\u00caf\u0002\u01c1",
    "\u01c3\u0005\u00ccg\u0002\u01c2\u01b4\u0003\u0002\u0002\u0002\u01c2",
    "\u01b5\u0003\u0002\u0002\u0002\u01c2\u01b6\u0003\u0002\u0002\u0002\u01c2",
    "\u01b7\u0003\u0002\u0002\u0002\u01c2\u01b8\u0003\u0002\u0002\u0002\u01c2",
    "\u01b9\u0003\u0002\u0002\u0002\u01c2\u01ba\u0003\u0002\u0002\u0002\u01c2",
    "\u01bb\u0003\u0002\u0002\u0002\u01c2\u01bc\u0003\u0002\u0002\u0002\u01c2",
    "\u01bd\u0003\u0002\u0002\u0002\u01c2\u01be\u0003\u0002\u0002\u0002\u01c2",
    "\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c2",
    "\u01c1\u0003\u0002\u0002\u0002\u01c3+\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u0005\u0106\u0084\u0002\u01c5\u01c6\u0007z\u0002\u0002\u01c6",
    "\u01c7\u0005\u0108\u0085\u0002\u01c7\u01c8\u0007$\u0002\u0002\u01c8",
    "\u01c9\u0007\"\u0002\u0002\u01c9\u01ca\u0007}\u0002\u0002\u01ca-\u0003",
    "\u0002\u0002\u0002\u01cb\u01cc\u00050\u0019\u0002\u01cc\u01cd\u0005",
    "2\u001a\u0002\u01cd/\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007 \u0002",
    "\u0002\u01cf\u01d0\u0007\u0017\u0002\u0002\u01d0\u01d1\u0007m\u0002",
    "\u0002\u01d1\u01d2\u0007k\u0002\u0002\u01d2\u01d3\u0007x\u0002\u0002",
    "\u01d3\u01d4\u0007:\u0002\u0002\u01d4\u01d5\u0007N\u0002\u0002\u01d5",
    "\u01d6\u0007O\u0002\u0002\u01d6\u01d7\u0007Q\u0002\u0002\u01d7\u01d8",
    "\u0007n\u0002\u0002\u01d8\u01d9\u0007\u001b\u0002\u0002\u01d9\u01da",
    "\u0007D\u0002\u0002\u01da\u01db\u0007}\u0002\u0002\u01db1\u0003\u0002",
    "\u0002\u0002\u01dc\u01de\u00054\u001b\u0002\u01dd\u01dc\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002",
    "\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0003\u0002",
    "\u0002\u0002\u01e1\u01e3\u00056\u001c\u0002\u01e2\u01e1\u0003\u0002",
    "\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002",
    "\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e53\u0003\u0002",
    "\u0002\u0002\u01e6\u01e7\u0005\u0106\u0084\u0002\u01e7\u01e8\u0007g",
    "\u0002\u0002\u01e8\u01ea\u0007\u0015\u0002\u0002\u01e9\u01eb\u0007\u0003",
    "\u0002\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002",
    "\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ed\u0005\u0108",
    "\u0085\u0002\u01ed\u01ee\u0007}\u0002\u0002\u01ee5\u0003\u0002\u0002",
    "\u0002\u01ef\u01f0\u0007\u0016\u0002\u0002\u01f0\u01f1\u0005\u0108\u0085",
    "\u0002\u01f1\u01f2\u0007}\u0002\u0002\u01f27\u0003\u0002\u0002\u0002",
    "\u01f3\u01f4\u0005\u0106\u0084\u0002\u01f4\u01f5\u0007g\u0002\u0002",
    "\u01f5\u01f6\u0007\u0018\u0002\u0002\u01f6\u01f7\u0005\u0108\u0085\u0002",
    "\u01f7\u01f8\u0007}\u0002\u0002\u01f89\u0003\u0002\u0002\u0002\u01f9",
    "\u01fa\u0007\u0011\u0002\u0002\u01fa\u01fb\u0005\u0108\u0085\u0002\u01fb",
    "\u01fe\u0007}\u0002\u0002\u01fc\u01ff\u0005 \u0011\u0002\u01fd\u01ff",
    "\u0005\"\u0012\u0002\u01fe\u01fc\u0003\u0002\u0002\u0002\u01fe\u01fd",
    "\u0003\u0002\u0002\u0002\u01ff;\u0003\u0002\u0002\u0002\u0200\u0204",
    "\u0005> \u0002\u0201\u0203\u0005@!\u0002\u0202\u0201\u0003\u0002\u0002",
    "\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204\u0202\u0003\u0002\u0002",
    "\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205=\u0003\u0002\u0002",
    "\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207\u0208\u0007&\u0002",
    "\u0002\u0208\u0209\u0005\u0108\u0085\u0002\u0209\u020a\u0007}\u0002",
    "\u0002\u020a?\u0003\u0002\u0002\u0002\u020b\u0216\u0005\u00fc\u007f",
    "\u0002\u020c\u0216\u0005\u00f4{\u0002\u020d\u0216\u0005 \u0011\u0002",
    "\u020e\u0216\u0005B\"\u0002\u020f\u0216\u0005\b\u0005\u0002\u0210\u0216",
    "\u0005:\u001e\u0002\u0211\u0216\u0005D#\u0002\u0212\u0216\u0005F$\u0002",
    "\u0213\u0216\u0005H%\u0002\u0214\u0216\u0005J&\u0002\u0215\u020b\u0003",
    "\u0002\u0002\u0002\u0215\u020c\u0003\u0002\u0002\u0002\u0215\u020d\u0003",
    "\u0002\u0002\u0002\u0215\u020e\u0003\u0002\u0002\u0002\u0215\u020f\u0003",
    "\u0002\u0002\u0002\u0215\u0210\u0003\u0002\u0002\u0002\u0215\u0211\u0003",
    "\u0002\u0002\u0002\u0215\u0212\u0003\u0002\u0002\u0002\u0215\u0213\u0003",
    "\u0002\u0002\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0216A\u0003",
    "\u0002\u0002\u0002\u0217\u0218\u0007 \u0002\u0002\u0218\u0219\u0007",
    "b\u0002\u0002\u0219\u021a\u0007x\u0002\u0002\u021a\u021b\u0007\n\u0002",
    "\u0002\u021b\u021c\u0007n\u0002\u0002\u021c\u021d\u0007b\u0002\u0002",
    "\u021d\u021e\u0007x\u0002\u0002\u021e\u021f\u0007\b\u0002\u0002\u021f",
    "\u0220\u0007n\u0002\u0002\u0220\u0221\u0007b\u0002\u0002\u0221\u0222",
    "\u0007x\u0002\u0002\u0222\u0223\u0007\t\u0002\u0002\u0223\u0224\u0007",
    "}\u0002\u0002\u0224C\u0003\u0002\u0002\u0002\u0225\u0226\u0007 \u0002",
    "\u0002\u0226\u0227\u0007\u0010\u0002\u0002\u0227\u0228\u0007f\u0002",
    "\u0002\u0228\u0229\u0007@\u0002\u0002\u0229\u022a\u0007n\u0002\u0002",
    "\u022a\u022b\u0007B\u0002\u0002\u022b\u022c\u0007l\u0002\u0002\u022c",
    "\u022d\u0007H\u0002\u0002\u022d\u022e\u0007x\u0002\u0002\u022e\u022f",
    "\u0007n\u0002\u0002\u022f\u0230\u0007S\u0002\u0002\u0230\u0231\u0007",
    "k\u0002\u0002\u0231\u0232\u0007I\u0002\u0002\u0232\u0233\u0007}\u0002",
    "\u0002\u0233E\u0003\u0002\u0002\u0002\u0234\u0235\u0007 \u0002\u0002",
    "\u0235\u0236\u0007\u0010\u0002\u0002\u0236\u0237\u0007f\u0002\u0002",
    "\u0237\u0238\u0007L\u0002\u0002\u0238\u0239\u0007l\u0002\u0002\u0239",
    "\u023a\u0007H\u0002\u0002\u023a\u023b\u0007x\u0002\u0002\u023b\u023c",
    "\u0007n\u0002\u0002\u023c\u023d\u0007S\u0002\u0002\u023d\u023e\u0007",
    "k\u0002\u0002\u023e\u023f\u0007Q\u0002\u0002\u023f\u0240\u0007}\u0002",
    "\u0002\u0240G\u0003\u0002\u0002\u0002\u0241\u0242\u0007 \u0002\u0002",
    "\u0242\u0243\u00074\u0002\u0002\u0243\u0244\u00075\u0002\u0002\u0244",
    "\u0245\u0007B\u0002\u0002\u0245\u0246\u0007}\u0002\u0002\u0246I\u0003",
    "\u0002\u0002\u0002\u0247\u0248\u0007 \u0002\u0002\u0248\u0249\u0007",
    "4\u0002\u0002\u0249\u024a\u0007x\u0002\u0002\u024a\u024b\u0007L\u0002",
    "\u0002\u024b\u024c\u0007k\u0002\u0002\u024c\u024d\u0007\\\u0002\u0002",
    "\u024d\u024e\u0007]\u0002\u0002\u024e\u024f\u0007l\u0002\u0002\u024f",
    "\u0250\u0007O\u0002\u0002\u0250\u0251\u0007I\u0002\u0002\u0251\u0252",
    "\u0007}\u0002\u0002\u0252\u0253\u0005\u0106\u0084\u0002\u0253\u0254",
    "\u0007g\u0002\u0002\u0254\u0255\u0007#\u0002\u0002\u0255\u0256\u0005",
    "\u0108\u0085\u0002\u0256\u0257\u0007}\u0002\u0002\u0257\u0258\u0005",
    "\u0088E\u0002\u0258K\u0003\u0002\u0002\u0002\u0259\u025d\u0005N(\u0002",
    "\u025a\u025c\u0005P)\u0002\u025b\u025a\u0003\u0002\u0002\u0002\u025c",
    "\u025f\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u0003\u0002\u0002\u0002\u025eM\u0003\u0002\u0002\u0002\u025f",
    "\u025d\u0003\u0002\u0002\u0002\u0260\u0261\u0007&\u0002\u0002\u0261",
    "\u0262\u0007W\u0002\u0002\u0262\u0263\u0005\u0108\u0085\u0002\u0263",
    "\u0264\u0007}\u0002\u0002\u0264O\u0003\u0002\u0002\u0002\u0265\u026d",
    "\u0005\u00fc\u007f\u0002\u0266\u026d\u0005 \u0011\u0002\u0267\u026d",
    "\u0005\u00fe\u0080\u0002\u0268\u026d\u0005\u0082B\u0002\u0269\u026d",
    "\u0005\u00f4{\u0002\u026a\u026d\u0005R*\u0002\u026b\u026d\u0005\u00e4",
    "s\u0002\u026c\u0265\u0003\u0002\u0002\u0002\u026c\u0266\u0003\u0002",
    "\u0002\u0002\u026c\u0267\u0003\u0002\u0002\u0002\u026c\u0268\u0003\u0002",
    "\u0002\u0002\u026c\u0269\u0003\u0002\u0002\u0002\u026c\u026a\u0003\u0002",
    "\u0002\u0002\u026c\u026b\u0003\u0002\u0002\u0002\u026dQ\u0003\u0002",
    "\u0002\u0002\u026e\u0272\u0005T+\u0002\u026f\u0271\u0005d3\u0002\u0270",
    "\u026f\u0003\u0002\u0002\u0002\u0271\u0274\u0003\u0002\u0002\u0002\u0272",
    "\u0270\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273",
    "S\u0003\u0002\u0002\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0275",
    "\u027f\u0005V,\u0002\u0276\u027f\u0005X-\u0002\u0277\u027f\u0005Z.\u0002",
    "\u0278\u027f\u0005\u00fe\u0080\u0002\u0279\u027f\u0005\\/\u0002\u027a",
    "\u027f\u0005^0\u0002\u027b\u027f\u0005`1\u0002\u027c\u027f\u0005b2\u0002",
    "\u027d\u027f\u0005l7\u0002\u027e\u0275\u0003\u0002\u0002\u0002\u027e",
    "\u0276\u0003\u0002\u0002\u0002\u027e\u0277\u0003\u0002\u0002\u0002\u027e",
    "\u0278\u0003\u0002\u0002\u0002\u027e\u0279\u0003\u0002\u0002\u0002\u027e",
    "\u027a\u0003\u0002\u0002\u0002\u027e\u027b\u0003\u0002\u0002\u0002\u027e",
    "\u027c\u0003\u0002\u0002\u0002\u027e\u027d\u0003\u0002\u0002\u0002\u027f",
    "U\u0003\u0002\u0002\u0002\u0280\u0281\u0007 \u0002\u0002\u0281\u0282",
    "\u0007}\u0002\u0002\u0282W\u0003\u0002\u0002\u0002\u0283\u0284\u0007",
    " \u0002\u0002\u0284\u0285\u0005\u0108\u0085\u0002\u0285\u0286\u0007",
    "\u0003\u0002\u0002\u0286\u0287\u0007=\u0002\u0002\u0287\u0288\u0007",
    "y\u0002\u0002\u0288\u0289\u0007B\u0002\u0002\u0289\u028a\u0007n\u0002",
    "\u0002\u028a\u028b\u0007?\u0002\u0002\u028b\u028c\u0007x\u0002\u0002",
    "\u028c\u028d\u0007\t\u0002\u0002\u028d\u028e\u0007}\u0002\u0002\u028e",
    "Y\u0003\u0002\u0002\u0002\u028f\u0290\u0007 \u0002\u0002\u0290\u0291",
    "\u0007\u0017\u0002\u0002\u0291\u0292\u0007m\u0002\u0002\u0292\u0293",
    "\u0007k\u0002\u0002\u0293\u0294\u0007x\u0002\u0002\u0294\u0295\u0007",
    ":\u0002\u0002\u0295\u0296\u0007N\u0002\u0002\u0296\u0297\u0007O\u0002",
    "\u0002\u0297\u0298\u0007Q\u0002\u0002\u0298\u0299\u0007n\u0002\u0002",
    "\u0299\u029a\u0007\u001b\u0002\u0002\u029a\u029b\u0007D\u0002\u0002",
    "\u029b\u029c\u0007}\u0002\u0002\u029c[\u0003\u0002\u0002\u0002\u029d",
    "\u029e\u0007 \u0002\u0002\u029e\u029f\u0007\u0010\u0002\u0002\u029f",
    "\u02a0\u0007x\u0002\u0002\u02a0\u02a1\u0007.\u0002\u0002\u02a1\u02a2",
    "\u0007k\u0002\u0002\u02a2\u02a3\u0007I\u0002\u0002\u02a3\u02a4\u0007",
    "n\u0002\u0002\u02a4\u02a5\u0007/\u0002\u0002\u02a5\u02a6\u00075\u0002",
    "\u0002\u02a6\u02a7\u0007L\u0002\u0002\u02a7\u02a8\u0007N\u0002\u0002",
    "\u02a8\u02a9\u0007O\u0002\u0002\u02a9\u02aa\u0007\u001b\u0002\u0002",
    "\u02aa\u02ab\u0007D\u0002\u0002\u02ab\u02ac\u0007p\u0002\u0002\u02ac",
    "\u02ad\u0007]\u0002\u0002\u02ad\u02ae\u0007l\u0002\u0002\u02ae\u02af",
    "\u0007O\u0002\u0002\u02af\u02b0\u0007I\u0002\u0002\u02b0\u02b1\u0007",
    "}\u0002\u0002\u02b1]\u0003\u0002\u0002\u0002\u02b2\u02b3\u0007 \u0002",
    "\u0002\u02b3\u02b4\u0007b\u0002\u0002\u02b4\u02b5\u0007x\u0002\u0002",
    "\u02b5\u02b6\u0007\n\u0002\u0002\u02b6\u02b7\u0007n\u0002\u0002\u02b7",
    "\u02b8\u0007b\u0002\u0002\u02b8\u02b9\u0007x\u0002\u0002\u02b9\u02ba",
    "\u0007\b\u0002\u0002\u02ba\u02bb\u0007}\u0002\u0002\u02bb_\u0003\u0002",
    "\u0002\u0002\u02bc\u02bd\u0007 \u0002\u0002\u02bd\u02be\u0007b\u0002",
    "\u0002\u02be\u02bf\u0007x\u0002\u0002\u02bf\u02c0\u0007\t\u0002\u0002",
    "\u02c0\u02c1\u0007n\u0002\u0002\u02c1\u02c2\u00076\u0002\u0002\u02c2",
    "\u02c3\u0007x\u0002\u0002\u02c3\u02c4\u0007:\u0002\u0002\u02c4\u02c5",
    "\u0007}\u0002\u0002\u02c5a\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007",
    " \u0002\u0002\u02c7\u02c8\u0007/\u0002\u0002\u02c8\u02c9\u0005\u010a",
    "\u0086\u0002\u02c9\u02ca\u0007L\u0002\u0002\u02ca\u02cb\u0007N\u0002",
    "\u0002\u02cb\u02cc\u0007\\\u0002\u0002\u02cc\u02cd\u0007\u001b\u0002",
    "\u0002\u02cd\u02ce\u0007D\u0002\u0002\u02ce\u02cf\u0007U\u0002\u0002",
    "\u02cf\u02d0\u0007\\\u0002\u0002\u02d0\u02d1\u0007Q\u0002\u0002\u02d1",
    "\u02d2\u0007n\u0002\u0002\u02d2\u02d3\u00076\u0002\u0002\u02d3\u02d4",
    "\u0007x\u0002\u0002\u02d4\u02d5\u0007:\u0002\u0002\u02d5\u02d6\u0007",
    "}\u0002\u0002\u02d6c\u0003\u0002\u0002\u0002\u02d7\u02e4\u0005\u00fe",
    "\u0080\u0002\u02d8\u02e4\u0005\u00fc\u007f\u0002\u02d9\u02e4\u0005f",
    "4\u0002\u02da\u02e4\u0005\u00f2z\u0002\u02db\u02e4\u0005\u00d0i\u0002",
    "\u02dc\u02e4\u0005\u00d2j\u0002\u02dd\u02e4\u0005h5\u0002\u02de\u02e4",
    "\u0005\"\u0012\u0002\u02df\u02e4\u0005\u00e8u\u0002\u02e0\u02e4\u0005",
    "\u00f4{\u0002\u02e1\u02e4\u0005j6\u0002\u02e2\u02e4\u0005 \u0011\u0002",
    "\u02e3\u02d7\u0003\u0002\u0002\u0002\u02e3\u02d8\u0003\u0002\u0002\u0002",
    "\u02e3\u02d9\u0003\u0002\u0002\u0002\u02e3\u02da\u0003\u0002\u0002\u0002",
    "\u02e3\u02db\u0003\u0002\u0002\u0002\u02e3\u02dc\u0003\u0002\u0002\u0002",
    "\u02e3\u02dd\u0003\u0002\u0002\u0002\u02e3\u02de\u0003\u0002\u0002\u0002",
    "\u02e3\u02df\u0003\u0002\u0002\u0002\u02e3\u02e0\u0003\u0002\u0002\u0002",
    "\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002",
    "\u02e4e\u0003\u0002\u0002\u0002\u02e5\u02e6\u0005\u0106\u0084\u0002",
    "\u02e6\u02e8\u0007\u001e\u0002\u0002\u02e7\u02e9\u0007\u0003\u0002\u0002",
    "\u02e8\u02e7\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002",
    "\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea\u02eb\u0005\u0108\u0085\u0002",
    "\u02eb\u02ec\u0007}\u0002\u0002\u02ecg\u0003\u0002\u0002\u0002\u02ed",
    "\u02ee\u0005\u0106\u0084\u0002\u02ee\u02ef\u0007g\u0002\u0002\u02ef",
    "\u02f0\u0007c\u0002\u0002\u02f0\u02f1\u0007\u0018\u0002\u0002\u02f1",
    "\u02f2\u0007f\u0002\u0002\u02f2\u02f3\u0007:\u0002\u0002\u02f3\u02f4",
    "\u0007}\u0002\u0002\u02f4i\u0003\u0002\u0002\u0002\u02f5\u02f6\u0005",
    "\u0106\u0084\u0002\u02f6\u02f7\u0007g\u0002\u0002\u02f7\u02f8\u0007",
    "T\u0002\u0002\u02f8\u02f9\u0005\u0108\u0085\u0002\u02f9\u02fa\u0007",
    "k\u0002\u0002\u02fa\u02fb\u0007Q\u0002\u0002\u02fb\u02fc\u0007}\u0002",
    "\u0002\u02fck\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007 \u0002\u0002",
    "\u02fe\u02ff\u0005\u0108\u0085\u0002\u02ff\u0300\u0007}\u0002\u0002",
    "\u0300m\u0003\u0002\u0002\u0002\u0301\u0303\u0005p9\u0002\u0302\u0304",
    "\u0005\u00fe\u0080\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0304\u0305",
    "\u0003\u0002\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0003\u0002\u0002\u0002\u0306o\u0003\u0002\u0002\u0002\u0307\u0308",
    "\u0007\u0014\u0002\u0002\u0308\u0309\u0005\u0106\u0084\u0002\u0309\u030a",
    "\u0007^\u0002\u0002\u030a\u030b\u0007x\u0002\u0002\u030b\u030c\u0005",
    "r:\u0002\u030c\u030d\u0007}\u0002\u0002\u030dq\u0003\u0002\u0002\u0002",
    "\u030e\u030f\u0007\u0004\u0002\u0002\u030f\u0310\u0007X\u0002\u0002",
    "\u0310\u0311\u0005\u010a\u0086\u0002\u0311\u0312\u0007\u0003\u0002\u0002",
    "\u0312\u0313\t\u0002\u0002\u0002\u0313\u0314\u0007\u0005\u0002\u0002",
    "\u0314s\u0003\u0002\u0002\u0002\u0315\u0319\u0005v<\u0002\u0316\u0318",
    "\u0005x=\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0318\u031b\u0003",
    "\u0002\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u0319\u031a\u0003",
    "\u0002\u0002\u0002\u031au\u0003\u0002\u0002\u0002\u031b\u0319\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0007\u0014\u0002\u0002\u031d\u031e\u0005",
    "\u0108\u0085\u0002\u031e\u031f\u0007}\u0002\u0002\u031fw\u0003\u0002",
    "\u0002\u0002\u0320\u0324\u0005\u00fe\u0080\u0002\u0321\u0324\u0005\u0102",
    "\u0082\u0002\u0322\u0324\u0005\u0082B\u0002\u0323\u0320\u0003\u0002",
    "\u0002\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0322\u0003\u0002",
    "\u0002\u0002\u0324y\u0003\u0002\u0002\u0002\u0325\u0326\u0005|?\u0002",
    "\u0326\u0327\u0005~@\u0002\u0327{\u0003\u0002\u0002\u0002\u0328\u0329",
    "\u0007\u0015\u0002\u0002\u0329\u032a\u0005\u0108\u0085\u0002\u032a\u032b",
    "\u0007}\u0002\u0002\u032b}\u0003\u0002\u0002\u0002\u032c\u032e\u0005",
    "\u0080A\u0002\u032d\u032c\u0003\u0002\u0002\u0002\u032e\u032f\u0003",
    "\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u032f\u0330\u0003",
    "\u0002\u0002\u0002\u0330\u007f\u0003\u0002\u0002\u0002\u0331\u033d\u0005",
    "\u0082B\u0002\u0332\u033d\u0005\u00f4{\u0002\u0333\u0334\u0005\u0084",
    "C\u0002\u0334\u0335\u0005\u0082B\u0002\u0335\u033d\u0003\u0002\u0002",
    "\u0002\u0336\u033d\u0005\u0102\u0082\u0002\u0337\u033d\u0005\u00f8}",
    "\u0002\u0338\u033d\u0005\u00eav\u0002\u0339\u033d\u0005\u00d0i\u0002",
    "\u033a\u033d\u0005\u0086D\u0002\u033b\u033d\u0005\u00e4s\u0002\u033c",
    "\u0331\u0003\u0002\u0002\u0002\u033c\u0332\u0003\u0002\u0002\u0002\u033c",
    "\u0333\u0003\u0002\u0002\u0002\u033c\u0336\u0003\u0002\u0002\u0002\u033c",
    "\u0337\u0003\u0002\u0002\u0002\u033c\u0338\u0003\u0002\u0002\u0002\u033c",
    "\u0339\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c",
    "\u033b\u0003\u0002\u0002\u0002\u033d\u0081\u0003\u0002\u0002\u0002\u033e",
    "\u033f\u0007\u0016\u0002\u0002\u033f\u0340\u0005\u0108\u0085\u0002\u0340",
    "\u0341\u0007}\u0002\u0002\u0341\u0083\u0003\u0002\u0002\u0002\u0342",
    "\u0343\u0007\u0011\u0002\u0002\u0343\u0344\u0005\u0108\u0085\u0002\u0344",
    "\u0345\u0007k\u0002\u0002\u0345\u0346\u0007Q\u0002\u0002\u0346\u0347",
    "\u0007}\u0002\u0002\u0347\u0357\u0003\u0002\u0002\u0002\u0348\u0349",
    "\u0007\u0011\u0002\u0002\u0349\u034a\u0005\u0108\u0085\u0002\u034a\u034b",
    "\u0007k\u0002\u0002\u034b\u034c\u0007\\\u0002\u0002\u034c\u034d\u0007",
    "]\u0002\u0002\u034d\u034e\u0007l\u0002\u0002\u034e\u034f\u0007\\\u0002",
    "\u0002\u034f\u0350\u0007I\u0002\u0002\u0350\u0351\u0007}\u0002\u0002",
    "\u0351\u0357\u0003\u0002\u0002\u0002\u0352\u0353\u0007\u0011\u0002\u0002",
    "\u0353\u0354\u0005\u0108\u0085\u0002\u0354\u0355\u0007}\u0002\u0002",
    "\u0355\u0357\u0003\u0002\u0002\u0002\u0356\u0342\u0003\u0002\u0002\u0002",
    "\u0356\u0348\u0003\u0002\u0002\u0002\u0356\u0352\u0003\u0002\u0002\u0002",
    "\u0357\u0085\u0003\u0002\u0002\u0002\u0358\u0359\u0005\u0106\u0084\u0002",
    "\u0359\u035a\u0007g\u0002\u0002\u035a\u035b\u0007\u0018\u0002\u0002",
    "\u035b\u035c\u0005\u0108\u0085\u0002\u035c\u035d\u0007}\u0002\u0002",
    "\u035d\u0087\u0003\u0002\u0002\u0002\u035e\u0362\u0005\u008aF\u0002",
    "\u035f\u0361\u0005\u008cG\u0002\u0360\u035f\u0003\u0002\u0002\u0002",
    "\u0361\u0364\u0003\u0002\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002",
    "\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0089\u0003\u0002\u0002\u0002",
    "\u0364\u0362\u0003\u0002\u0002\u0002\u0365\u0366\u0007 \u0002\u0002",
    "\u0366\u0367\u0007\u001b\u0002\u0002\u0367\u0368\u0007x\u0002\u0002",
    "\u0368\u0369\u0007:\u0002\u0002\u0369\u036a\u0007}\u0002\u0002\u036a",
    "\u008b\u0003\u0002\u0002\u0002\u036b\u0371\u0005\u008eH\u0002\u036c",
    "\u0371\u0005\u0090I\u0002\u036d\u0371\u0005\u00f2z\u0002\u036e\u0371",
    "\u0005\u0092J\u0002\u036f\u0371\u0005\u00fe\u0080\u0002\u0370\u036b",
    "\u0003\u0002\u0002\u0002\u0370\u036c\u0003\u0002\u0002\u0002\u0370\u036d",
    "\u0003\u0002\u0002\u0002\u0370\u036e\u0003\u0002\u0002\u0002\u0370\u036f",
    "\u0003\u0002\u0002\u0002\u0371\u008d\u0003\u0002\u0002\u0002\u0372\u0373",
    "\u0005\u0106\u0084\u0002\u0373\u0374\u0007g\u0002\u0002\u0374\u0375",
    "\u0007\u001e\u0002\u0002\u0375\u0376\u0005\u0108\u0085\u0002\u0376\u0377",
    "\u0007}\u0002\u0002\u0377\u008f\u0003\u0002\u0002\u0002\u0378\u0379",
    "\u0007o\u0002\u0002\u0379\u037a\u0007M\u0002\u0002\u037a\u037b\u0007",
    ":\u0002\u0002\u037b\u037c\u0007k\u0002\u0002\u037c\u037d\u0007\u001b",
    "\u0002\u0002\u037d\u037e\u0007}\u0002\u0002\u037e\u0091\u0003\u0002",
    "\u0002\u0002\u037f\u0380\u0005\u0106\u0084\u0002\u0380\u0381\u0007g",
    "\u0002\u0002\u0381\u0382\u0007c\u0002\u0002\u0382\u0383\u0007\u001e",
    "\u0002\u0002\u0383\u0384\u0007f\u0002\u0002\u0384\u0385\u0007:\u0002",
    "\u0002\u0385\u0386\u0007}\u0002\u0002\u0386\u0093\u0003\u0002\u0002",
    "\u0002\u0387\u038b\u0005\u0096L\u0002\u0388\u038a\u0005\u00a8U\u0002",
    "\u0389\u0388\u0003\u0002\u0002\u0002\u038a\u038d\u0003\u0002\u0002\u0002",
    "\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002",
    "\u038c\u0095\u0003\u0002\u0002\u0002\u038d\u038b\u0003\u0002\u0002\u0002",
    "\u038e\u0397\u0005\u009aN\u0002\u038f\u0397\u0005\u009cO\u0002\u0390",
    "\u0397\u0005\u009eP\u0002\u0391\u0397\u0005\u00a0Q\u0002\u0392\u0397",
    "\u0005\u0098M\u0002\u0393\u0397\u0005\u00a4S\u0002\u0394\u0397\u0005",
    "\u00a2R\u0002\u0395\u0397\u0005\u00a6T\u0002\u0396\u038e\u0003\u0002",
    "\u0002\u0002\u0396\u038f\u0003\u0002\u0002\u0002\u0396\u0390\u0003\u0002",
    "\u0002\u0002\u0396\u0391\u0003\u0002\u0002\u0002\u0396\u0392\u0003\u0002",
    "\u0002\u0002\u0396\u0393\u0003\u0002\u0002\u0002\u0396\u0394\u0003\u0002",
    "\u0002\u0002\u0396\u0395\u0003\u0002\u0002\u0002\u0397\u0097\u0003\u0002",
    "\u0002\u0002\u0398\u0399\u0007;\u0002\u0002\u0399\u039b\u0007\u0010",
    "\u0002\u0002\u039a\u039c\u0005\u010a\u0086\u0002\u039b\u039a\u0003\u0002",
    "\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039b\u0003\u0002",
    "\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e\u039f\u0003\u0002",
    "\u0002\u0002\u039f\u03a0\u0007:\u0002\u0002\u03a0\u03a1\u0007i\u0002",
    "\u0002\u03a1\u03a2\u0007a\u0002\u0002\u03a2\u03a3\u0007S\u0002\u0002",
    "\u03a3\u03a4\u0007\n\u0002\u0002\u03a4\u03a5\u0007}\u0002\u0002\u03a5",
    "\u0099\u0003\u0002\u0002\u0002\u03a6\u03a7\u0007;\u0002\u0002\u03a7",
    "\u03a8\u0007\u001b\u0002\u0002\u03a8\u03a9\u0007`\u0002\u0002\u03a9",
    "\u03aa\u0007,\u0002\u0002\u03aa\u03ab\u0007m\u0002\u0002\u03ab\u03ac",
    "\u0007k\u0002\u0002\u03ac\u03ad\u0007x\u0002\u0002\u03ad\u03ae\u0007",
    "L\u0002\u0002\u03ae\u03af\u0007\u0006\u0002\u0002\u03af\u03b0\u0007",
    "}\u0002\u0002\u03b0\u009b\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007",
    ";\u0002\u0002\u03b2\u03b3\u0007b\u0002\u0002\u03b3\u03b4\u0007x\u0002",
    "\u0002\u03b4\u03b5\u0005\u010a\u0086\u0002\u03b5\u03b6\u0007}\u0002",
    "\u0002\u03b6\u009d\u0003\u0002\u0002\u0002\u03b7\u03b8\u0007;\u0002",
    "\u0002\u03b8\u03b9\u0007\u0017\u0002\u0002\u03b9\u03ba\u0007y\u0002",
    "\u0002\u03ba\u03bb\u0007L\u0002\u0002\u03bb\u03bc\u0007N\u0002\u0002",
    "\u03bc\u03bd\u0007O\u0002\u0002\u03bd\u03be\u0007\u001b\u0002\u0002",
    "\u03be\u03bf\u0007D\u0002\u0002\u03bf\u03c0\u0007}\u0002\u0002\u03c0",
    "\u009f\u0003\u0002\u0002\u0002\u03c1\u03c2\u0007;\u0002\u0002\u03c2",
    "\u03c3\u0007\u001b\u0002\u0002\u03c3\u03c4\u0007m\u0002\u0002\u03c4",
    "\u03c5\u0007k\u0002\u0002\u03c5\u03c6\u0007x\u0002\u0002\u03c6\u03c7",
    "\u0007:\u0002\u0002\u03c7\u03c8\u0007+\u0002\u0002\u03c8\u03c9\u0007",
    "x\u0002\u0002\u03c9\u03ca\u0005\u010a\u0086\u0002\u03ca\u03cb\u0007",
    "^\u0002\u0002\u03cb\u03cc\u0007E\u0002\u0002\u03cc\u03cd\u0007}\u0002",
    "\u0002\u03cd\u00a1\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007;\u0002",
    "\u0002\u03cf\u03d0\u00076\u0002\u0002\u03d0\u03d1\u0007y\u0002\u0002",
    "\u03d1\u03d2\u0007L\u0002\u0002\u03d2\u03d3\u0007^\u0002\u0002\u03d3",
    "\u03d4\u00077\u0002\u0002\u03d4\u03d5\u00078\u0002\u0002\u03d5\u03d6",
    "\u0007L\u0002\u0002\u03d6\u03d7\u00071\u0002\u0002\u03d7\u03d8\u0007",
    "V\u0002\u0002\u03d8\u03d9\u0007<\u0002\u0002\u03d9\u03da\u0007}\u0002",
    "\u0002\u03da\u00a3\u0003\u0002\u0002\u0002\u03db\u03dc\u0007;\u0002",
    "\u0002\u03dc\u03de\u00070\u0002\u0002\u03dd\u03df\u0005\u010a\u0086",
    "\u0002\u03de\u03dd\u0003\u0002\u0002\u0002\u03df\u03e0\u0003\u0002\u0002",
    "\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002",
    "\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\u00072\u0002",
    "\u0002\u03e3\u03e4\u00073\u0002\u0002\u03e4\u03e5\u0007}\u0002\u0002",
    "\u03e5\u00a5\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007;\u0002\u0002",
    "\u03e7\u03e8\u0007b\u0002\u0002\u03e8\u03e9\u0007x\u0002\u0002\u03e9",
    "\u03ea\u0005\u010a\u0086\u0002\u03ea\u03eb\u0007\u001b\u0002\u0002\u03eb",
    "\u03ec\u0007f\u0002\u0002\u03ec\u03ed\u0007>\u0002\u0002\u03ed\u03ee",
    "\u0007l\u0002\u0002\u03ee\u03ef\u0007:\u0002\u0002\u03ef\u03f0\u0007",
    "+\u0002\u0002\u03f0\u03f1\u0007x\u0002\u0002\u03f1\u03f2\u0005\u010a",
    "\u0086\u0002\u03f2\u03f3\u0007^\u0002\u0002\u03f3\u03f4\u0007E\u0002",
    "\u0002\u03f4\u03f5\u0007}\u0002\u0002\u03f5\u00a7\u0003\u0002\u0002",
    "\u0002\u03f6\u0401\u0005\u00eex\u0002\u03f7\u0401\u0005\u00f0y\u0002",
    "\u03f8\u0401\u0005\u00f2z\u0002\u03f9\u0401\u0005\u00f4{\u0002\u03fa",
    "\u0401\u0005\u00ecw\u0002\u03fb\u0401\u00056\u001c\u0002\u03fc\u0401",
    "\u0005\u00fc\u007f\u0002\u03fd\u0401\u0005\u00aaV\u0002\u03fe\u0401",
    "\u0005\u00acW\u0002\u03ff\u0401\u0005\u00eav\u0002\u0400\u03f6\u0003",
    "\u0002\u0002\u0002\u0400\u03f7\u0003\u0002\u0002\u0002\u0400\u03f8\u0003",
    "\u0002\u0002\u0002\u0400\u03f9\u0003\u0002\u0002\u0002\u0400\u03fa\u0003",
    "\u0002\u0002\u0002\u0400\u03fb\u0003\u0002\u0002\u0002\u0400\u03fc\u0003",
    "\u0002\u0002\u0002\u0400\u03fd\u0003\u0002\u0002\u0002\u0400\u03fe\u0003",
    "\u0002\u0002\u0002\u0400\u03ff\u0003\u0002\u0002\u0002\u0401\u00a9\u0003",
    "\u0002\u0002\u0002\u0402\u0403\u0007\u001d\u0002\u0002\u0403\u0404\u0007",
    "\n\u0002\u0002\u0404\u0405\u0007[\u0002\u0002\u0405\u0406\u0007\u001c",
    "\u0002\u0002\u0406\u0407\u0007}\u0002\u0002\u0407\u00ab\u0003\u0002",
    "\u0002\u0002\u0408\u0409\u0007%\u0002\u0002\u0409\u040a\u00072\u0002",
    "\u0002\u040a\u040b\u00073\u0002\u0002\u040b\u040d\u0007k\u0002\u0002",
    "\u040c\u040e\u0005\u010a\u0086\u0002\u040d\u040c\u0003\u0002\u0002\u0002",
    "\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002\u0002",
    "\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002",
    "\u0411\u0412\u0007}\u0002\u0002\u0412\u00ad\u0003\u0002\u0002\u0002",
    "\u0413\u0417\u0005\u00b0Y\u0002\u0414\u0416\u0005\u00b2Z\u0002\u0415",
    "\u0414\u0003\u0002\u0002\u0002\u0416\u0419\u0003\u0002\u0002\u0002\u0417",
    "\u0415\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002\u0002\u0418",
    "\u00af\u0003\u0002\u0002\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u041a",
    "\u041b\u0007\u0013\u0002\u0002\u041b\u041c\u0005\u0108\u0085\u0002\u041c",
    "\u041d\u0007}\u0002\u0002\u041d\u00b1\u0003\u0002\u0002\u0002\u041e",
    "\u042e\u0005\u00b8]\u0002\u041f\u042e\u0005\u00b4[\u0002\u0420\u042e",
    "\u0005\u00b6\\\u0002\u0421\u042e\u0005\u00ecw\u0002\u0422\u042e\u0005",
    "\u00bc_\u0002\u0423\u042e\u0005\u0102\u0082\u0002\u0424\u042e\u0005",
    "\u00d2j\u0002\u0425\u042e\u0005\u00c4c\u0002\u0426\u042e\u0005\u00c6",
    "d\u0002\u0427\u042e\u0005\u00c8e\u0002\u0428\u042e\u0005\u00be`\u0002",
    "\u0429\u042e\u0005\u00dan\u0002\u042a\u042e\u0005\u00fe\u0080\u0002",
    "\u042b\u042e\u0005\u00d6l\u0002\u042c\u042e\u0005\u00d8m\u0002\u042d",
    "\u041e\u0003\u0002\u0002\u0002\u042d\u041f\u0003\u0002\u0002\u0002\u042d",
    "\u0420\u0003\u0002\u0002\u0002\u042d\u0421\u0003\u0002\u0002\u0002\u042d",
    "\u0422\u0003\u0002\u0002\u0002\u042d\u0423\u0003\u0002\u0002\u0002\u042d",
    "\u0424\u0003\u0002\u0002\u0002\u042d\u0425\u0003\u0002\u0002\u0002\u042d",
    "\u0426\u0003\u0002\u0002\u0002\u042d\u0427\u0003\u0002\u0002\u0002\u042d",
    "\u0428\u0003\u0002\u0002\u0002\u042d\u0429\u0003\u0002\u0002\u0002\u042d",
    "\u042a\u0003\u0002\u0002\u0002\u042d\u042b\u0003\u0002\u0002\u0002\u042d",
    "\u042c\u0003\u0002\u0002\u0002\u042e\u00b3\u0003\u0002\u0002\u0002\u042f",
    "\u0430\u0005\u00b6\\\u0002\u0430\u0431\u0005\u00f4{\u0002\u0431\u00b5",
    "\u0003\u0002\u0002\u0002\u0432\u0434\u0005\u00d0i\u0002\u0433\u0432",
    "\u0003\u0002\u0002\u0002\u0434\u0435\u0003\u0002\u0002\u0002\u0435\u0433",
    "\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002\u0436\u0438",
    "\u0003\u0002\u0002\u0002\u0437\u0439\u0005\u00d2j\u0002\u0438\u0437",
    "\u0003\u0002\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u0438",
    "\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u00b7",
    "\u0003\u0002\u0002\u0002\u043c\u043d\u0005\u00f4{\u0002\u043d\u043e",
    "\u0005\u00ba^\u0002\u043e\u00b9\u0003\u0002\u0002\u0002\u043f\u0440",
    "\u0005\u00d4k\u0002\u0440\u0441\u0005\u00d2j\u0002\u0441\u00bb\u0003",
    "\u0002\u0002\u0002\u0442\u0443\u0007\u0011\u0002\u0002\u0443\u0444\u0005",
    "\u0108\u0085\u0002\u0444\u0445\u0007}\u0002\u0002\u0445\u0446\u0005",
    "\u00ceh\u0002\u0446\u00bd\u0003\u0002\u0002\u0002\u0447\u0448\u0005",
    "\u00c0a\u0002\u0448\u0449\u0005\u00c2b\u0002\u0449\u00bf\u0003\u0002",
    "\u0002\u0002\u044a\u044b\u0005\u0106\u0084\u0002\u044b\u044c\u0007)",
    "\u0002\u0002\u044c\u044d\u0007B\u0002\u0002\u044d\u044e\u0005\u0106",
    "\u0084\u0002\u044e\u044f\u0007}\u0002\u0002\u044f\u00c1\u0003\u0002",
    "\u0002\u0002\u0450\u0454\u0005\u00ccg\u0002\u0451\u0453\u0005\u00f8",
    "}\u0002\u0452\u0451\u0003\u0002\u0002\u0002\u0453\u0456\u0003\u0002",
    "\u0002\u0002\u0454\u0452\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002",
    "\u0002\u0002\u0455\u00c3\u0003\u0002\u0002\u0002\u0456\u0454\u0003\u0002",
    "\u0002\u0002\u0457\u0458\u0005\u0106\u0084\u0002\u0458\u0459\u0007g",
    "\u0002\u0002\u0459\u045a\u0007c\u0002\u0002\u045a\u045b\u0007(\u0002",
    "\u0002\u045b\u045c\u0007f\u0002\u0002\u045c\u045d\u0007A\u0002\u0002",
    "\u045d\u045e\u0007}\u0002\u0002\u045e\u00c5\u0003\u0002\u0002\u0002",
    "\u045f\u0460\u0005\u0106\u0084\u0002\u0460\u0461\u0007_\u0002\u0002",
    "\u0461\u0462\u0007c\u0002\u0002\u0462\u0463\u00079\u0002\u0002\u0463",
    "\u0464\u0007f\u0002\u0002\u0464\u0465\u0007C\u0002\u0002\u0465\u0466",
    "\u0007}\u0002\u0002\u0466\u00c7\u0003\u0002\u0002\u0002\u0467\u0468",
    "\u0005\u00caf\u0002\u0468\u0469\u0005\u00ccg\u0002\u0469\u00c9\u0003",
    "\u0002\u0002\u0002\u046a\u046b\u0005\u0106\u0084\u0002\u046b\u046c\u0007",
    "\u0018\u0002\u0002\u046c\u046d\u0007@\u0002\u0002\u046d\u046e\u0005",
    "\u0108\u0085\u0002\u046e\u046f\u0007}\u0002\u0002\u046f\u00cb\u0003",
    "\u0002\u0002\u0002\u0470\u0471\u0007%\u0002\u0002\u0471\u0472\u0005",
    "\u0108\u0085\u0002\u0472\u0473\u0007k\u0002\u0002\u0473\u0474\u0005",
    "\u0108\u0085\u0002\u0474\u0475\u0007}\u0002\u0002\u0475\u00cd\u0003",
    "\u0002\u0002\u0002\u0476\u0477\u0007\u0011\u0002\u0002\u0477\u0478\u0005",
    "\u0108\u0085\u0002\u0478\u0479\u0007k\u0002\u0002\u0479\u047a\u0007",
    "\\\u0002\u0002\u047a\u047b\u0007]\u0002\u0002\u047b\u047c\u0007l\u0002",
    "\u0002\u047c\u047d\u0007\\\u0002\u0002\u047d\u047e\u0007I\u0002\u0002",
    "\u047e\u047f\u0007}\u0002\u0002\u047f\u00cf\u0003\u0002\u0002\u0002",
    "\u0480\u0481\u0005\u0106\u0084\u0002\u0481\u0482\u0007g\u0002\u0002",
    "\u0482\u0484\u0007\u0015\u0002\u0002\u0483\u0485\u0007\u0003\u0002\u0002",
    "\u0484\u0483\u0003\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002",
    "\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0487\u0005\u0108\u0085\u0002",
    "\u0487\u0488\u0007}\u0002\u0002\u0488\u00d1\u0003\u0002\u0002\u0002",
    "\u0489\u048a\u0007\u0016\u0002\u0002\u048a\u048b\u0005\u0108\u0085\u0002",
    "\u048b\u048c\u0007}\u0002\u0002\u048c\u00d3\u0003\u0002\u0002\u0002",
    "\u048d\u048e\u0007 \u0002\u0002\u048e\u048f\u0007\u0017\u0002\u0002",
    "\u048f\u0490\u0007y\u0002\u0002\u0490\u0491\u0007L\u0002\u0002\u0491",
    "\u0492\u0007N\u0002\u0002\u0492\u0493\u0007O\u0002\u0002\u0493\u0494",
    "\u0007Q\u0002\u0002\u0494\u0495\u0007}\u0002\u0002\u0495\u00d5\u0003",
    "\u0002\u0002\u0002\u0496\u0497\u0007 \u0002\u0002\u0497\u0498\u0007",
    "\u000b\u0002\u0002\u0498\u0499\u0007n\u0002\u0002\u0499\u049a\u0007",
    "\f\u0002\u0002\u049a\u049b\u0007\r\u0002\u0002\u049b\u049c\u0007n\u0002",
    "\u0002\u049c\u049d\u0007\u000e\u0002\u0002\u049d\u049e\u0007\u000f\u0002",
    "\u0002\u049e\u049f\u0007n\u0002\u0002\u049f\u04a0\u00078\u0002\u0002",
    "\u04a0\u04a1\u0007}\u0002\u0002\u04a1\u00d7\u0003\u0002\u0002\u0002",
    "\u04a2\u04a3\u0007%\u0002\u0002\u04a3\u04a4\u0005\u0108\u0085\u0002",
    "\u04a4\u04a6\u0007k\u0002\u0002\u04a5\u04a7\u0005\u010a\u0086\u0002",
    "\u04a6\u04a5\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002",
    "\u04a8\u04a6\u0003\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002",
    "\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aa\u04ab\u0007}\u0002\u0002",
    "\u04ab\u00d9\u0003\u0002\u0002\u0002\u04ac\u04ae\u0005\u00eex\u0002",
    "\u04ad\u04ac\u0003\u0002\u0002\u0002\u04ae\u04af\u0003\u0002\u0002\u0002",
    "\u04af\u04ad\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002",
    "\u04b0\u04b2\u0003\u0002\u0002\u0002\u04b1\u04b3\u0005\u00f2z\u0002",
    "\u04b2\u04b1\u0003\u0002\u0002\u0002\u04b3\u04b4\u0003\u0002\u0002\u0002",
    "\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002",
    "\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7\u0005\u00f4{\u0002",
    "\u04b7\u00db\u0003\u0002\u0002\u0002\u04b8\u04bc\u0005\u00dep\u0002",
    "\u04b9\u04bb\u0005\u00e0q\u0002\u04ba\u04b9\u0003\u0002\u0002\u0002",
    "\u04bb\u04be\u0003\u0002\u0002\u0002\u04bc\u04ba\u0003\u0002\u0002\u0002",
    "\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04bf\u0003\u0002\u0002\u0002",
    "\u04be\u04bc\u0003\u0002\u0002\u0002\u04bf\u04c0\u0005\u00e6t\u0002",
    "\u04c0\u00dd\u0003\u0002\u0002\u0002\u04c1\u04c2\u0005\u0106\u0084\u0002",
    "\u04c2\u04c3\u0007K\u0002\u0002\u04c3\u04c4\u0007<\u0002\u0002\u04c4",
    "\u04c5\u0007x\u0002\u0002\u04c5\u04c6\u0007}\u0002\u0002\u04c6\u00df",
    "\u0003\u0002\u0002\u0002\u04c7\u04cc\u0005\u00e2r\u0002\u04c8\u04cc",
    "\u0005\u00f4{\u0002\u04c9\u04cc\u0005\u00e4s\u0002\u04ca\u04cc\u0005",
    "\u0092J\u0002\u04cb\u04c7\u0003\u0002\u0002\u0002\u04cb\u04c8\u0003",
    "\u0002\u0002\u0002\u04cb\u04c9\u0003\u0002\u0002\u0002\u04cb\u04ca\u0003",
    "\u0002\u0002\u0002\u04cc\u00e1\u0003\u0002\u0002\u0002\u04cd\u04ce\u0007",
    "%\u0002\u0002\u04ce\u04cf\u0005\u0108\u0085\u0002\u04cf\u04d0\u0007",
    "k\u0002\u0002\u04d0\u04d1\u0007\u0012\u0002\u0002\u04d1\u04d2\u0007",
    "}\u0002\u0002\u04d2\u00e3\u0003\u0002\u0002\u0002\u04d3\u04d4\u0007",
    "\u001d\u0002\u0002\u04d4\u04d5\u0007P\u0002\u0002\u04d5\u04d6\u0007",
    "!\u0002\u0002\u04d6\u04d7\u0007}\u0002\u0002\u04d7\u00e5\u0003\u0002",
    "\u0002\u0002\u04d8\u04d9\u0007h\u0002\u0002\u04d9\u04da\u0007g\u0002",
    "\u0002\u04da\u04db\u0007Z\u0002\u0002\u04db\u04dc\u0005\u0106\u0084",
    "\u0002\u04dc\u04dd\u0007\u0007\u0002\u0002\u04dd\u04de\u0007<\u0002",
    "\u0002\u04de\u04df\u0007x\u0002\u0002\u04df\u04e0\u0007}\u0002\u0002",
    "\u04e0\u00e7\u0003\u0002\u0002\u0002\u04e1\u04e2\u0005\u0106\u0084\u0002",
    "\u04e2\u04e3\u0007g\u0002\u0002\u04e3\u04e4\u0007\u0018\u0002\u0002",
    "\u04e4\u04e5\u0005\u0108\u0085\u0002\u04e5\u04e6\u0007}\u0002\u0002",
    "\u04e6\u00e9\u0003\u0002\u0002\u0002\u04e7\u04e8\u0007\'\u0002\u0002",
    "\u04e8\u04e9\u0005\u0108\u0085\u0002\u04e9\u04ea\u0007}\u0002\u0002",
    "\u04ea\u00eb\u0003\u0002\u0002\u0002\u04eb\u04ec\u0005\u0106\u0084\u0002",
    "\u04ec\u04ed\u0007g\u0002\u0002\u04ed\u04ee\u0007c\u0002\u0002\u04ee",
    "\u04ef\u0007\u0015\u0002\u0002\u04ef\u04f0\u0007f\u0002\u0002\u04f0",
    "\u04f1\u0007:\u0002\u0002\u04f1\u04f2\u0007}\u0002\u0002\u04f2\u00ed",
    "\u0003\u0002\u0002\u0002\u04f3\u04f4\u0005\u0106\u0084\u0002\u04f4\u04f5",
    "\u0007g\u0002\u0002\u04f5\u04f6\u0007\u0018\u0002\u0002\u04f6\u04f7",
    "\u0005\u0108\u0085\u0002\u04f7\u04f8\u0007}\u0002\u0002\u04f8\u00ef",
    "\u0003\u0002\u0002\u0002\u04f9\u04fa\u0005\u0106\u0084\u0002\u04fa\u04fb",
    "\u0007g\u0002\u0002\u04fb\u04fc\u0007\u001e\u0002\u0002\u04fc\u04fd",
    "\u0007^\u0002\u0002\u04fd\u04fe\u0005\u010a\u0086\u0002\u04fe\u04ff",
    "\u0007}\u0002\u0002\u04ff\u00f1\u0003\u0002\u0002\u0002\u0500\u0501",
    "\u0007\u001a\u0002\u0002\u0501\u0502\u0005\u0108\u0085\u0002\u0502\u0503",
    "\u0007}\u0002\u0002\u0503\u00f3\u0003\u0002\u0002\u0002\u0504\u0506",
    "\u0005\u00f6|\u0002\u0505\u0504\u0003\u0002\u0002\u0002\u0506\u0507",
    "\u0003\u0002\u0002\u0002\u0507\u0505\u0003\u0002\u0002\u0002\u0507\u0508",
    "\u0003\u0002\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u050b",
    "\u0005\u0104\u0083\u0002\u050a\u050c\u0005\u00f6|\u0002\u050b\u050a",
    "\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002\u050d\u050b",
    "\u0003\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u0518",
    "\u0003\u0002\u0002\u0002\u050f\u0511\u0005\u0104\u0083\u0002\u0510\u050f",
    "\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0513",
    "\u0003\u0002\u0002\u0002\u0512\u0514\u0005\u00f6|\u0002\u0513\u0512",
    "\u0003\u0002\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0513",
    "\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0518",
    "\u0003\u0002\u0002\u0002\u0517\u0505\u0003\u0002\u0002\u0002\u0517\u0510",
    "\u0003\u0002\u0002\u0002\u0518\u00f5\u0003\u0002\u0002\u0002\u0519\u051a",
    "\u0007J\u0002\u0002\u051a\u051b\u0007x\u0002\u0002\u051b\u051c\u0007",
    ":\u0002\u0002\u051c\u051d\u0007}\u0002\u0002\u051d\u00f7\u0003\u0002",
    "\u0002\u0002\u051e\u051f\u0005\u0106\u0084\u0002\u051f\u0521\u0007z",
    "\u0002\u0002\u0520\u0522\u0005\u0108\u0085\u0002\u0521\u0520\u0003\u0002",
    "\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002",
    "\u0002\u0002\u0523\u0524\u0005\u00fa~\u0002\u0524\u0525\u0005\u0100",
    "\u0081\u0002\u0525\u0526\u0007}\u0002\u0002\u0526\u00f9\u0003\u0002",
    "\u0002\u0002\u0527\u0528\t\u0003\u0002\u0002\u0528\u0529\u0005\u010a",
    "\u0086\u0002\u0529\u00fb\u0003\u0002\u0002\u0002\u052a\u052b\u0005\u0106",
    "\u0084\u0002\u052b\u052d\u0007z\u0002\u0002\u052c\u052e\u0005\u0108",
    "\u0085\u0002\u052d\u052c\u0003\u0002\u0002\u0002\u052d\u052e\u0003\u0002",
    "\u0002\u0002\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0530\t\u0004",
    "\u0002\u0002\u0530\u0531\u0005\u010a\u0086\u0002\u0531\u0532\u0005\u0100",
    "\u0081\u0002\u0532\u0533\u0007}\u0002\u0002\u0533\u00fd\u0003\u0002",
    "\u0002\u0002\u0534\u0535\u0005\u0106\u0084\u0002\u0535\u0537\u0007z",
    "\u0002\u0002\u0536\u0538\u0005\u0108\u0085\u0002\u0537\u0536\u0003\u0002",
    "\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002",
    "\u0002\u0002\u0539\u053a\u0007|\u0002\u0002\u053a\u053b\u0005\u010a",
    "\u0086\u0002\u053b\u053c\u0005\u0100\u0081\u0002\u053c\u053d\u0007}",
    "\u0002\u0002\u053d\u00ff\u0003\u0002\u0002\u0002\u053e\u053f\u0007\u0004",
    "\u0002\u0002\u053f\u0540\u0005\u010a\u0086\u0002\u0540\u0541\u0007\u0003",
    "\u0002\u0002\u0541\u0542\t\u0002\u0002\u0002\u0542\u0543\u0007\u0005",
    "\u0002\u0002\u0543\u0101\u0003\u0002\u0002\u0002\u0544\u0545\u0007\u001f",
    "\u0002\u0002\u0545\u0546\u0005\u0108\u0085\u0002\u0546\u0547\u0007}",
    "\u0002\u0002\u0547\u0103\u0003\u0002\u0002\u0002\u0548\u0549\u0007\u0019",
    "\u0002\u0002\u0549\u054a\u0007\u001b\u0002\u0002\u054a\u054b\u0007D",
    "\u0002\u0002\u054b\u054c\u0007k\u0002\u0002\u054c\u054d\u0007G\u0002",
    "\u0002\u054d\u054e\u0007X\u0002\u0002\u054e\u054f\u0007I\u0002\u0002",
    "\u054f\u0550\u0007}\u0002\u0002\u0550\u0105\u0003\u0002\u0002\u0002",
    "\u0551\u0553\u0005\u010a\u0086\u0002\u0552\u0551\u0003\u0002\u0002\u0002",
    "\u0553\u0554\u0003\u0002\u0002\u0002\u0554\u0552\u0003\u0002\u0002\u0002",
    "\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0107\u0003\u0002\u0002\u0002",
    "\u0556\u0558\u0005\u010a\u0086\u0002\u0557\u0559\u0007\u0007\u0002\u0002",
    "\u0558\u0557\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002",
    "\u0559\u055c\u0003\u0002\u0002\u0002\u055a\u055c\u0007x\u0002\u0002",
    "\u055b\u0556\u0003\u0002\u0002\u0002\u055b\u055a\u0003\u0002\u0002\u0002",
    "\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u055b\u0003\u0002\u0002\u0002",
    "\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0109\u0003\u0002\u0002\u0002",
    "\u055f\u0560\t\u0005\u0002\u0002\u0560\u010b\u0003\u0002\u0002\u0002",
    "B\u010f\u0114\u0119\u0127\u012f\u0133\u013a\u0152\u015c\u0183\u018e",
    "\u01a4\u01a8\u01ae\u01c2\u01df\u01e4\u01ea\u01fe\u0204\u0215\u025d\u026c",
    "\u0272\u027e\u02e3\u02e8\u0305\u0319\u0323\u032f\u033c\u0356\u0362\u0370",
    "\u038b\u0396\u039d\u03e0\u0400\u040f\u0417\u042d\u0435\u043a\u0454\u0484",
    "\u04a8\u04af\u04b4\u04bc\u04cb\u0507\u050d\u0510\u0515\u0517\u0521\u052d",
    "\u0537\u0554\u0558\u055b\u055d"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class StarRealmsParser extends antlr4.Parser {

    static grammarFileName = "StarRealms.g4";
    static literalNames = [ null, "':'", "'('", "')'", "'(s)'", "''s'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'</color>'", "'==='", "'.'", 
                            "';'", "','" ];
    static symbolicNames = [ null, null, null, null, null, null, "COMBAT", 
                             "AUTHORITY", "TRADE", "FEDERATION", "STAR", 
                             "EMPIRE", "MACHINE", "CULT", "ACQUIRE", "ACQUIRED", 
                             "UNALIGNED", "ACTIVATING", "ATTACKED", "SCRAPPING", 
                             "SCRAPPED", "SCRAP", "SELECTING", "SHUFFLED", 
                             "DISCARDED", "DISCARD", "DISCOUNTS", "REFRESH", 
                             "DISCARDING", "DESTROYED", "RESOLVING", "INDICATORS", 
                             "AVAILABLE", "RETURNING", "ABILITY", "CHANGED", 
                             "REVEALED", "REPLACED", "COPYING", "COPIED", 
                             "IMAGE", "RECEIVE", "REDRAW", "TABLE", "EXPLORER", 
                             "PUT", "CREATE", "PLAYED", "SECRET", "OUTPOST", 
                             "RETURN", "TARGET", "DRAW", "EVERY", "BLOB", 
                             "COPY", "CARDS", "CHOSE", "TURN", "DESTROY", 
                             "NUMBER", "LOSE", "SHIP", "SHIPS", "BASE", 
                             "BASES", "PILE", "EACH", "PLAY", "FORM", "COST", 
                             "DECK", "DREW", "ENDS", "CARD", "MORE2", "FROM", 
                             "YOUR", "ALLY", "HAND", "GAME", "LESS", "MOVING", 
                             "INTO", "THIS", "EVENT", "NEW", "ALL", "NOW", 
                             "ROW", "THE", "TOP", "FOR", "DID", "AND", "ONE", 
                             "ADD", "NOT", "HAS", "WON", "ANY", "IS", "IT", 
                             "AT", "IN", "TO", "OF", "UP", "OR", "NO", "ON", 
                             "WHITESPACE", "COLOR_START_TAG", "COLOR_END_TAG", 
                             "END_GAME_TAG", "DOT", "SEMICOLUM", "COMMA", 
                             "INT", "WORD", "SEPARATOR", "INCREMENT", "DECREASE", 
                             "NEWLINE" ];
    static ruleNames = [ "battle", "turn", "action", "winStatus", "startTurnEffect", 
                         "purchaseHero", "purchaseHeroDetail", "acquireHeroToTable", 
                         "playHero", "tradeRowScrap", "resolveFreeAcquire", 
                         "resolveSelfScrap", "purchase", "purchaseSummary", 
                         "purchaseDetail", "acquireToHand", "acquireToDeck", 
                         "play", "playSummary", "playSingle", "playDetail", 
                         "newAbility", "multiScrap", "multiScrapSummary", 
                         "multiScrapDetail", "scrapCardEffect", "simpleScrap", 
                         "moveBaseToDeck", "freeAcquire", "completeMission", 
                         "completeMissionSummary", "completeMissionsDetail", 
                         "selectMissionsReward", "resolveAllyReward", "resolveRuleReward", 
                         "resolveDefendReward", "resolveConvertReward", 
                         "triggeredEvent", "triggeredEventSummary", "triggeredEventDetail", 
                         "resolveEvent", "resolveEventSummary", "resolveSimple", 
                         "resolveBombardment", "resolveComet", "resolveSupplyRun", 
                         "resolvingTacticalMan1", "resolvingTacticalMan2", 
                         "resolveWormhole", "resolveEventDetail", "discardFromEvent", 
                         "resolveMobilization", "moveCardToHand", "resolveCard", 
                         "attackPlayer", "attackPlayerSummary", "newAuthority", 
                         "attackBase", "attackBaseSummary", "attackBaseDetail", 
                         "scrapCard", "scrappingSummary", "scrappingDetail", 
                         "scrapEffect", "scrapAction", "freePurchase", "moveDiscardToDeck", 
                         "discard", "discardSummary", "discardDetail", "discardAction", 
                         "discardEnd", "eventRefuseDiscard", "choseEffect", 
                         "choseEffectSummary", "discountFactionGambit", 
                         "discardAndDrawSummary", "choseIncreasePool", "choseScrapFromDiscard", 
                         "choseDiscardAndIncreasePool", "choseBlobDraw", 
                         "hiddenBaseGambit", "midGateEffect", "choseEffectDetail", 
                         "refreshTradeRow", "changeHiddenBaseToFaction", 
                         "activatingEffect", "activatingSummary", "activatingDetail", 
                         "scrapAndDraw", "scrap", "drawAndScrapFromHand", 
                         "resolveHandScrap", "freeAcquireToTop", "copyBase", 
                         "copyBaseSummary", "copyBaseDetail", "noCopy", 
                         "noCopyBases", "copyCard", "copyCardSummary", "copyCardEffect", 
                         "purchaseToTop", "scrapSummary", "scrapDetail", 
                         "resolveHandScrapSummary", "resolveStealth", "copyStealth", 
                         "discardAndDraw", "endPhase", "endTurn", "drawPhaseDetail", 
                         "resetCopiedCards", "refreshIndicators", "newTurn", 
                         "selectCard", "replaceGambit", "noScrap", "selectDiscard", 
                         "discardForPool", "discarding", "drawCardsWithShuffle", 
                         "drawCards", "newBalanceDetail", "effect", "positiveBalance", 
                         "negativeBalance", "balance", "destroyBase", "shuffleCards", 
                         "name", "card", "wordPlus" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = StarRealmsParser.ruleNames;
        this.literalNames = StarRealmsParser.literalNames;
        this.symbolicNames = StarRealmsParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	battle() {
	    let localctx = new BattleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, StarRealmsParser.RULE_battle);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 266;
	            this.turn();
	            this.state = 269; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << StarRealmsParser.COMBAT) | (1 << StarRealmsParser.AUTHORITY) | (1 << StarRealmsParser.TRADE) | (1 << StarRealmsParser.FEDERATION) | (1 << StarRealmsParser.STAR) | (1 << StarRealmsParser.EMPIRE) | (1 << StarRealmsParser.MACHINE) | (1 << StarRealmsParser.CULT) | (1 << StarRealmsParser.ACQUIRE) | (1 << StarRealmsParser.ACQUIRED) | (1 << StarRealmsParser.UNALIGNED) | (1 << StarRealmsParser.ACTIVATING) | (1 << StarRealmsParser.ATTACKED) | (1 << StarRealmsParser.SCRAPPING) | (1 << StarRealmsParser.SCRAPPED) | (1 << StarRealmsParser.SCRAP) | (1 << StarRealmsParser.SELECTING) | (1 << StarRealmsParser.SHUFFLED) | (1 << StarRealmsParser.DISCARDED) | (1 << StarRealmsParser.DISCARD) | (1 << StarRealmsParser.DISCOUNTS) | (1 << StarRealmsParser.REFRESH) | (1 << StarRealmsParser.DISCARDING) | (1 << StarRealmsParser.DESTROYED) | (1 << StarRealmsParser.RESOLVING) | (1 << StarRealmsParser.INDICATORS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (StarRealmsParser.AVAILABLE - 32)) | (1 << (StarRealmsParser.RETURNING - 32)) | (1 << (StarRealmsParser.ABILITY - 32)) | (1 << (StarRealmsParser.CHANGED - 32)) | (1 << (StarRealmsParser.REVEALED - 32)) | (1 << (StarRealmsParser.REPLACED - 32)) | (1 << (StarRealmsParser.COPYING - 32)) | (1 << (StarRealmsParser.COPIED - 32)) | (1 << (StarRealmsParser.IMAGE - 32)) | (1 << (StarRealmsParser.RECEIVE - 32)) | (1 << (StarRealmsParser.REDRAW - 32)) | (1 << (StarRealmsParser.TABLE - 32)) | (1 << (StarRealmsParser.EXPLORER - 32)) | (1 << (StarRealmsParser.PUT - 32)) | (1 << (StarRealmsParser.CREATE - 32)) | (1 << (StarRealmsParser.PLAYED - 32)) | (1 << (StarRealmsParser.SECRET - 32)) | (1 << (StarRealmsParser.OUTPOST - 32)) | (1 << (StarRealmsParser.RETURN - 32)) | (1 << (StarRealmsParser.TARGET - 32)) | (1 << (StarRealmsParser.DRAW - 32)) | (1 << (StarRealmsParser.EVERY - 32)) | (1 << (StarRealmsParser.BLOB - 32)) | (1 << (StarRealmsParser.COPY - 32)) | (1 << (StarRealmsParser.CARDS - 32)) | (1 << (StarRealmsParser.CHOSE - 32)) | (1 << (StarRealmsParser.TURN - 32)) | (1 << (StarRealmsParser.DESTROY - 32)) | (1 << (StarRealmsParser.NUMBER - 32)) | (1 << (StarRealmsParser.LOSE - 32)) | (1 << (StarRealmsParser.SHIP - 32)) | (1 << (StarRealmsParser.SHIPS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (StarRealmsParser.BASE - 64)) | (1 << (StarRealmsParser.BASES - 64)) | (1 << (StarRealmsParser.PILE - 64)) | (1 << (StarRealmsParser.EACH - 64)) | (1 << (StarRealmsParser.PLAY - 64)) | (1 << (StarRealmsParser.FORM - 64)) | (1 << (StarRealmsParser.COST - 64)) | (1 << (StarRealmsParser.DECK - 64)) | (1 << (StarRealmsParser.DREW - 64)) | (1 << (StarRealmsParser.ENDS - 64)) | (1 << (StarRealmsParser.CARD - 64)) | (1 << (StarRealmsParser.MORE2 - 64)) | (1 << (StarRealmsParser.FROM - 64)) | (1 << (StarRealmsParser.YOUR - 64)) | (1 << (StarRealmsParser.ALLY - 64)) | (1 << (StarRealmsParser.HAND - 64)) | (1 << (StarRealmsParser.GAME - 64)) | (1 << (StarRealmsParser.LESS - 64)) | (1 << (StarRealmsParser.MOVING - 64)) | (1 << (StarRealmsParser.INTO - 64)) | (1 << (StarRealmsParser.THIS - 64)) | (1 << (StarRealmsParser.EVENT - 64)) | (1 << (StarRealmsParser.NEW - 64)) | (1 << (StarRealmsParser.ALL - 64)) | (1 << (StarRealmsParser.NOW - 64)) | (1 << (StarRealmsParser.ROW - 64)) | (1 << (StarRealmsParser.THE - 64)) | (1 << (StarRealmsParser.TOP - 64)) | (1 << (StarRealmsParser.FOR - 64)) | (1 << (StarRealmsParser.DID - 64)) | (1 << (StarRealmsParser.AND - 64)) | (1 << (StarRealmsParser.ONE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (StarRealmsParser.ADD - 96)) | (1 << (StarRealmsParser.NOT - 96)) | (1 << (StarRealmsParser.HAS - 96)) | (1 << (StarRealmsParser.WON - 96)) | (1 << (StarRealmsParser.ANY - 96)) | (1 << (StarRealmsParser.IS - 96)) | (1 << (StarRealmsParser.IT - 96)) | (1 << (StarRealmsParser.IN - 96)) | (1 << (StarRealmsParser.TO - 96)) | (1 << (StarRealmsParser.OF - 96)) | (1 << (StarRealmsParser.UP - 96)) | (1 << (StarRealmsParser.OR - 96)) | (1 << (StarRealmsParser.NO - 96)) | (1 << (StarRealmsParser.ON - 96)) | (1 << (StarRealmsParser.WORD - 96)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	turn() {
	    let localctx = new TurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, StarRealmsParser.RULE_turn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 272; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 271;
	        		this.action();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 274; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 276;
	            this.endPhase();
	            break;

	        case 2:
	            this.state = 277;
	            this.winStatus();
	            break;

	        case 3:
	            this.state = 278;
	            this.match(StarRealmsParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	action() {
	    let localctx = new ActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, StarRealmsParser.RULE_action);
	    try {
	        this.state = 293;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 281;
	            this.startTurnEffect();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 282;
	            this.triggeredEvent();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 283;
	            this.resolveEvent();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 284;
	            this.purchase();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 285;
	            this.purchaseHero();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 286;
	            this.play();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 287;
	            this.attackPlayer();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 288;
	            this.attackBase();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 289;
	            this.scrapCard();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 290;
	            this.discard();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 291;
	            this.choseEffect();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 292;
	            this.activatingEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winStatus() {
	    let localctx = new WinStatusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, StarRealmsParser.RULE_winStatus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 295;
	        this.name();
	        this.state = 296;
	        this.match(StarRealmsParser.HAS);
	        this.state = 297;
	        this.match(StarRealmsParser.WON);
	        this.state = 298;
	        this.match(StarRealmsParser.THE);
	        this.state = 299;
	        this.match(StarRealmsParser.GAME);
	        this.state = 301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.NEWLINE) {
	            this.state = 300;
	            this.match(StarRealmsParser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTurnEffect() {
	    let localctx = new StartTurnEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, StarRealmsParser.RULE_startTurnEffect);
	    try {
	        this.state = 305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 303;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 304;
	            this.drawCardsWithShuffle();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseHero() {
	    let localctx = new PurchaseHeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, StarRealmsParser.RULE_purchaseHero);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 307;
	        this.purchaseSummary();
	        this.state = 308;
	        this.purchaseHeroDetail();
	        this.state = 312;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 309;
	                this.playHero(); 
	            }
	            this.state = 314;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseHeroDetail() {
	    let localctx = new PurchaseHeroDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, StarRealmsParser.RULE_purchaseHeroDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.negativeBalance();
	        this.state = 316;
	        this.acquireHeroToTable();
	        this.state = 317;
	        this.refreshIndicators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireHeroToTable() {
	    let localctx = new AcquireHeroToTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, StarRealmsParser.RULE_acquireHeroToTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 320;
	        this.card();
	        this.state = 321;
	        this.match(StarRealmsParser.TO);
	        this.state = 322;
	        this.match(StarRealmsParser.ON);
	        this.state = 323;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 324;
	        this.match(StarRealmsParser.TABLE);
	        this.state = 325;
	        this.match(StarRealmsParser.IMAGE);
	        this.state = 326;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playHero() {
	    let localctx = new PlayHeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, StarRealmsParser.RULE_playHero);
	    try {
	        this.state = 336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 328;
	            this.tradeRowScrap();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 329;
	            this.resolveFreeAcquire();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 330;
	            this.resolveSelfScrap();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 331;
	            this.multiScrapSummary();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 332;
	            this.positiveBalance();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 333;
	            this.drawCardsWithShuffle();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 334;
	            this.multiScrapDetail();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 335;
	            this.simpleScrap();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tradeRowScrap() {
	    let localctx = new TradeRowScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, StarRealmsParser.RULE_tradeRowScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 339;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 346;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case StarRealmsParser.UP:
	            this.state = 340;
	            this.match(StarRealmsParser.UP);
	            this.state = 341;
	            this.match(StarRealmsParser.TO);
	            this.state = 342;
	            this.match(StarRealmsParser.INT);
	            this.state = 343;
	            this.match(StarRealmsParser.CARDS);
	            break;
	        case StarRealmsParser.WORD:
	            this.state = 344;
	            this.match(StarRealmsParser.WORD);
	            this.state = 345;
	            this.match(StarRealmsParser.CARD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 348;
	        this.match(StarRealmsParser.IN);
	        this.state = 349;
	        this.match(StarRealmsParser.THE);
	        this.state = 350;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 351;
	        this.match(StarRealmsParser.ROW);
	        this.state = 352;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveFreeAcquire() {
	    let localctx = new ResolveFreeAcquireContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, StarRealmsParser.RULE_resolveFreeAcquire);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 355;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 356;
	        this.match(StarRealmsParser.ANY);
	        this.state = 357;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 358;
	        this.match(StarRealmsParser.OR);
	        this.state = 359;
	        this.match(StarRealmsParser.BASE);
	        this.state = 360;
	        this.match(StarRealmsParser.OF);
	        this.state = 361;
	        this.match(StarRealmsParser.COST);
	        this.state = 362;
	        this.match(StarRealmsParser.INT);
	        this.state = 363;
	        this.match(StarRealmsParser.OR);
	        this.state = 364;
	        this.match(StarRealmsParser.LESS);
	        this.state = 365;
	        this.match(StarRealmsParser.TO);
	        this.state = 366;
	        this.match(StarRealmsParser.DECK);
	        this.state = 367;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSelfScrap() {
	    let localctx = new ResolveSelfScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, StarRealmsParser.RULE_resolveSelfScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 369;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 370;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 371;
	        this.match(StarRealmsParser.WORD);
	        this.state = 372;
	        this.match(StarRealmsParser.CARD);
	        this.state = 373;
	        this.match(StarRealmsParser.FROM);
	        this.state = 374;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 375;
	        this.match(StarRealmsParser.HAND);
	        this.state = 376;
	        this.match(StarRealmsParser.OR);
	        this.state = 377;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 378;
	        this.match(StarRealmsParser.PILE);
	        this.state = 379;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchase() {
	    let localctx = new PurchaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, StarRealmsParser.RULE_purchase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381;
	        this.purchaseSummary();
	        this.state = 385;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 382;
	                this.purchaseDetail(); 
	            }
	            this.state = 387;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseSummary() {
	    let localctx = new PurchaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, StarRealmsParser.RULE_purchaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 389;
	        this.card();
	        this.state = 390;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseDetail() {
	    let localctx = new PurchaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, StarRealmsParser.RULE_purchaseDetail);
	    try {
	        this.state = 396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 392;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 393;
	            this.acquireToHand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 394;
	            this.acquireToDeck();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 395;
	            this.eventRefuseDiscard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireToHand() {
	    let localctx = new AcquireToHandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, StarRealmsParser.RULE_acquireToHand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 399;
	        this.card();
	        this.state = 400;
	        this.match(StarRealmsParser.TO);
	        this.state = 401;
	        this.match(StarRealmsParser.HAND);
	        this.state = 402;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireToDeck() {
	    let localctx = new AcquireToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, StarRealmsParser.RULE_acquireToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 405;
	        this.card();
	        this.state = 406;
	        this.match(StarRealmsParser.TO);
	        this.state = 407;
	        this.match(StarRealmsParser.THE);
	        this.state = 408;
	        this.match(StarRealmsParser.TOP);
	        this.state = 409;
	        this.match(StarRealmsParser.OF);
	        this.state = 410;
	        this.match(StarRealmsParser.THE);
	        this.state = 411;
	        this.match(StarRealmsParser.DECK);
	        this.state = 412;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	play() {
	    let localctx = new PlayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, StarRealmsParser.RULE_play);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.playSummary();
	        this.state = 418;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 415;
	                this.playDetail(); 
	            }
	            this.state = 420;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	        this.state = 422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 421;
	            this.completeMission();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playSummary() {
	    let localctx = new PlaySummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, StarRealmsParser.RULE_playSummary);
	    try {
	        this.state = 428;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case StarRealmsParser.PLAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 424;
	            this.match(StarRealmsParser.PLAY);
	            this.state = 425;
	            this.match(StarRealmsParser.ALL);
	            this.state = 426;
	            this.match(StarRealmsParser.NEWLINE);
	            break;
	        case StarRealmsParser.PLAYED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 427;
	            this.playSingle();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playSingle() {
	    let localctx = new PlaySingleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, StarRealmsParser.RULE_playSingle);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this.match(StarRealmsParser.PLAYED);
	        this.state = 431;
	        this.card();
	        this.state = 432;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playDetail() {
	    let localctx = new PlayDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, StarRealmsParser.RULE_playDetail);
	    try {
	        this.state = 448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 434;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 435;
	            this.newAbility();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 436;
	            this.drawCardsWithShuffle();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 437;
	            this.scrapCardEffect();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 438;
	            this.discardForPool();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 439;
	            this.discarding();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 440;
	            this.multiScrap();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 441;
	            this.noScrap();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 442;
	            this.simpleScrap();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 443;
	            this.destroyBase();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 444;
	            this.moveBaseToDeck();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 445;
	            this.freeAcquire();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 446;
	            this.copyCardSummary();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 447;
	            this.copyCardEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newAbility() {
	    let localctx = new NewAbilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, StarRealmsParser.RULE_newAbility);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.name();
	        this.state = 451;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 452;
	        this.card();
	        this.state = 453;
	        this.match(StarRealmsParser.ABILITY);
	        this.state = 454;
	        this.match(StarRealmsParser.AVAILABLE);
	        this.state = 455;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrap() {
	    let localctx = new MultiScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, StarRealmsParser.RULE_multiScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.multiScrapSummary();
	        this.state = 458;
	        this.multiScrapDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrapSummary() {
	    let localctx = new MultiScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, StarRealmsParser.RULE_multiScrapSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 461;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 462;
	        this.match(StarRealmsParser.UP);
	        this.state = 463;
	        this.match(StarRealmsParser.TO);
	        this.state = 464;
	        this.match(StarRealmsParser.INT);
	        this.state = 465;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 466;
	        this.match(StarRealmsParser.FROM);
	        this.state = 467;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 468;
	        this.match(StarRealmsParser.HAND);
	        this.state = 469;
	        this.match(StarRealmsParser.OR);
	        this.state = 470;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 471;
	        this.match(StarRealmsParser.PILE);
	        this.state = 472;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrapDetail() {
	    let localctx = new MultiScrapDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, StarRealmsParser.RULE_multiScrapDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 474;
	        		this.scrapCardEffect();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 477; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,15, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 480; 
	        this._errHandler.sync(this);
	        _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 479;
	        		this.simpleScrap();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 482; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,16, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapCardEffect() {
	    let localctx = new ScrapCardEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, StarRealmsParser.RULE_scrapCardEffect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.name();
	        this.state = 485;
	        this.match(StarRealmsParser.IS);
	        this.state = 486;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__0) {
	            this.state = 487;
	            this.match(StarRealmsParser.T__0);
	        }

	        this.state = 490;
	        this.card();
	        this.state = 491;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleScrap() {
	    let localctx = new SimpleScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, StarRealmsParser.RULE_simpleScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 494;
	        this.card();
	        this.state = 495;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveBaseToDeck() {
	    let localctx = new MoveBaseToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, StarRealmsParser.RULE_moveBaseToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.name();
	        this.state = 498;
	        this.match(StarRealmsParser.IS);
	        this.state = 499;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 500;
	        this.card();
	        this.state = 501;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freeAcquire() {
	    let localctx = new FreeAcquireContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, StarRealmsParser.RULE_freeAcquire);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 504;
	        this.card();
	        this.state = 505;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 506;
	            this.acquireToHand();
	            break;

	        case 2:
	            this.state = 507;
	            this.acquireToDeck();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMission() {
	    let localctx = new CompleteMissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, StarRealmsParser.RULE_completeMission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.completeMissionSummary();
	        this.state = 514;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 511;
	                this.completeMissionsDetail(); 
	            }
	            this.state = 516;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMissionSummary() {
	    let localctx = new CompleteMissionSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, StarRealmsParser.RULE_completeMissionSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.match(StarRealmsParser.REVEALED);
	        this.state = 518;
	        this.card();
	        this.state = 519;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMissionsDetail() {
	    let localctx = new CompleteMissionsDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, StarRealmsParser.RULE_completeMissionsDetail);
	    try {
	        this.state = 531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 521;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 522;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 523;
	            this.acquireToHand();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 524;
	            this.selectMissionsReward();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 525;
	            this.winStatus();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 526;
	            this.freeAcquire();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 527;
	            this.resolveAllyReward();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 528;
	            this.resolveRuleReward();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 529;
	            this.resolveDefendReward();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 530;
	            this.resolveConvertReward();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectMissionsReward() {
	    let localctx = new SelectMissionsRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, StarRealmsParser.RULE_selectMissionsReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 534;
	        this.match(StarRealmsParser.ADD);
	        this.state = 535;
	        this.match(StarRealmsParser.INT);
	        this.state = 536;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 537;
	        this.match(StarRealmsParser.OR);
	        this.state = 538;
	        this.match(StarRealmsParser.ADD);
	        this.state = 539;
	        this.match(StarRealmsParser.INT);
	        this.state = 540;
	        this.match(StarRealmsParser.COMBAT);
	        this.state = 541;
	        this.match(StarRealmsParser.OR);
	        this.state = 542;
	        this.match(StarRealmsParser.ADD);
	        this.state = 543;
	        this.match(StarRealmsParser.INT);
	        this.state = 544;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 545;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveAllyReward() {
	    let localctx = new ResolveAllyRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, StarRealmsParser.RULE_resolveAllyReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 548;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 549;
	        this.match(StarRealmsParser.ANY);
	        this.state = 550;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 551;
	        this.match(StarRealmsParser.OR);
	        this.state = 552;
	        this.match(StarRealmsParser.BASE);
	        this.state = 553;
	        this.match(StarRealmsParser.OF);
	        this.state = 554;
	        this.match(StarRealmsParser.COST);
	        this.state = 555;
	        this.match(StarRealmsParser.INT);
	        this.state = 556;
	        this.match(StarRealmsParser.OR);
	        this.state = 557;
	        this.match(StarRealmsParser.LESS);
	        this.state = 558;
	        this.match(StarRealmsParser.TO);
	        this.state = 559;
	        this.match(StarRealmsParser.DECK);
	        this.state = 560;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveRuleReward() {
	    let localctx = new ResolveRuleRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, StarRealmsParser.RULE_resolveRuleReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 563;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 564;
	        this.match(StarRealmsParser.ANY);
	        this.state = 565;
	        this.match(StarRealmsParser.CARD);
	        this.state = 566;
	        this.match(StarRealmsParser.OF);
	        this.state = 567;
	        this.match(StarRealmsParser.COST);
	        this.state = 568;
	        this.match(StarRealmsParser.INT);
	        this.state = 569;
	        this.match(StarRealmsParser.OR);
	        this.state = 570;
	        this.match(StarRealmsParser.LESS);
	        this.state = 571;
	        this.match(StarRealmsParser.TO);
	        this.state = 572;
	        this.match(StarRealmsParser.HAND);
	        this.state = 573;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveDefendReward() {
	    let localctx = new ResolveDefendRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, StarRealmsParser.RULE_resolveDefendReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 576;
	        this.match(StarRealmsParser.RETURN);
	        this.state = 577;
	        this.match(StarRealmsParser.TARGET);
	        this.state = 578;
	        this.match(StarRealmsParser.BASE);
	        this.state = 579;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveConvertReward() {
	    let localctx = new ResolveConvertRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, StarRealmsParser.RULE_resolveConvertReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 582;
	        this.match(StarRealmsParser.RETURN);
	        this.state = 583;
	        this.match(StarRealmsParser.INT);
	        this.state = 584;
	        this.match(StarRealmsParser.CARD);
	        this.state = 585;
	        this.match(StarRealmsParser.TO);
	        this.state = 586;
	        this.match(StarRealmsParser.THE);
	        this.state = 587;
	        this.match(StarRealmsParser.TOP);
	        this.state = 588;
	        this.match(StarRealmsParser.OF);
	        this.state = 589;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 590;
	        this.match(StarRealmsParser.DECK);
	        this.state = 591;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 592;
	        this.name();
	        this.state = 593;
	        this.match(StarRealmsParser.IS);
	        this.state = 594;
	        this.match(StarRealmsParser.RETURNING);
	        this.state = 595;
	        this.card();
	        this.state = 596;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 597;
	        this.discard();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEvent() {
	    let localctx = new TriggeredEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, StarRealmsParser.RULE_triggeredEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.triggeredEventSummary();
	        this.state = 603;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 600;
	                this.triggeredEventDetail(); 
	            }
	            this.state = 605;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEventSummary() {
	    let localctx = new TriggeredEventSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, StarRealmsParser.RULE_triggeredEventSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.match(StarRealmsParser.REVEALED);
	        this.state = 607;
	        this.match(StarRealmsParser.EVENT);
	        this.state = 608;
	        this.card();
	        this.state = 609;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEventDetail() {
	    let localctx = new TriggeredEventDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, StarRealmsParser.RULE_triggeredEventDetail);
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.acquireToHand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 613;
	            this.negativeBalance();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 614;
	            this.scrapAction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 615;
	            this.drawCardsWithShuffle();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 616;
	            this.resolveEvent();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 617;
	            this.refreshIndicators();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEvent() {
	    let localctx = new ResolveEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, StarRealmsParser.RULE_resolveEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.resolveEventSummary();
	        this.state = 624;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 621;
	                this.resolveEventDetail(); 
	            }
	            this.state = 626;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEventSummary() {
	    let localctx = new ResolveEventSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, StarRealmsParser.RULE_resolveEventSummary);
	    try {
	        this.state = 636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 627;
	            this.resolveSimple();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.resolveBombardment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 629;
	            this.resolveComet();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 630;
	            this.negativeBalance();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 631;
	            this.resolveSupplyRun();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 632;
	            this.resolvingTacticalMan1();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 633;
	            this.resolvingTacticalMan2();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 634;
	            this.resolveWormhole();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 635;
	            this.resolveCard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSimple() {
	    let localctx = new ResolveSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, StarRealmsParser.RULE_resolveSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 639;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveBombardment() {
	    let localctx = new ResolveBombardmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, StarRealmsParser.RULE_resolveBombardment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 642;
	        this.card();
	        this.state = 643;
	        this.match(StarRealmsParser.T__0);
	        this.state = 644;
	        this.match(StarRealmsParser.DESTROY);
	        this.state = 645;
	        this.match(StarRealmsParser.WORD);
	        this.state = 646;
	        this.match(StarRealmsParser.BASE);
	        this.state = 647;
	        this.match(StarRealmsParser.OR);
	        this.state = 648;
	        this.match(StarRealmsParser.LOSE);
	        this.state = 649;
	        this.match(StarRealmsParser.INT);
	        this.state = 650;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 651;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveComet() {
	    let localctx = new ResolveCometContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, StarRealmsParser.RULE_resolveComet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 654;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 655;
	        this.match(StarRealmsParser.UP);
	        this.state = 656;
	        this.match(StarRealmsParser.TO);
	        this.state = 657;
	        this.match(StarRealmsParser.INT);
	        this.state = 658;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 659;
	        this.match(StarRealmsParser.FROM);
	        this.state = 660;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 661;
	        this.match(StarRealmsParser.HAND);
	        this.state = 662;
	        this.match(StarRealmsParser.OR);
	        this.state = 663;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 664;
	        this.match(StarRealmsParser.PILE);
	        this.state = 665;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSupplyRun() {
	    let localctx = new ResolveSupplyRunContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, StarRealmsParser.RULE_resolveSupplyRun);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 668;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 669;
	        this.match(StarRealmsParser.INT);
	        this.state = 670;
	        this.match(StarRealmsParser.EXPLORER);
	        this.state = 671;
	        this.match(StarRealmsParser.TO);
	        this.state = 672;
	        this.match(StarRealmsParser.DECK);
	        this.state = 673;
	        this.match(StarRealmsParser.OR);
	        this.state = 674;
	        this.match(StarRealmsParser.PUT);
	        this.state = 675;
	        this.match(StarRealmsParser.TARGET);
	        this.state = 676;
	        this.match(StarRealmsParser.CARD);
	        this.state = 677;
	        this.match(StarRealmsParser.FROM);
	        this.state = 678;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 679;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 680;
	        this.match(StarRealmsParser.PILE);
	        this.state = 681;
	        this.match(StarRealmsParser.ON);
	        this.state = 682;
	        this.match(StarRealmsParser.TOP);
	        this.state = 683;
	        this.match(StarRealmsParser.OF);
	        this.state = 684;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 685;
	        this.match(StarRealmsParser.DECK);
	        this.state = 686;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolvingTacticalMan1() {
	    let localctx = new ResolvingTacticalMan1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, StarRealmsParser.RULE_resolvingTacticalMan1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 689;
	        this.match(StarRealmsParser.ADD);
	        this.state = 690;
	        this.match(StarRealmsParser.INT);
	        this.state = 691;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 692;
	        this.match(StarRealmsParser.OR);
	        this.state = 693;
	        this.match(StarRealmsParser.ADD);
	        this.state = 694;
	        this.match(StarRealmsParser.INT);
	        this.state = 695;
	        this.match(StarRealmsParser.COMBAT);
	        this.state = 696;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolvingTacticalMan2() {
	    let localctx = new ResolvingTacticalMan2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, StarRealmsParser.RULE_resolvingTacticalMan2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 699;
	        this.match(StarRealmsParser.ADD);
	        this.state = 700;
	        this.match(StarRealmsParser.INT);
	        this.state = 701;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 702;
	        this.match(StarRealmsParser.OR);
	        this.state = 703;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 704;
	        this.match(StarRealmsParser.INT);
	        this.state = 705;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 706;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveWormhole() {
	    let localctx = new ResolveWormholeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, StarRealmsParser.RULE_resolveWormhole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 709;
	        this.match(StarRealmsParser.PUT);
	        this.state = 710;
	        this.wordPlus();
	        this.state = 711;
	        this.match(StarRealmsParser.CARD);
	        this.state = 712;
	        this.match(StarRealmsParser.FROM);
	        this.state = 713;
	        this.match(StarRealmsParser.THE);
	        this.state = 714;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 715;
	        this.match(StarRealmsParser.PILE);
	        this.state = 716;
	        this.match(StarRealmsParser.INTO);
	        this.state = 717;
	        this.match(StarRealmsParser.THE);
	        this.state = 718;
	        this.match(StarRealmsParser.HAND);
	        this.state = 719;
	        this.match(StarRealmsParser.OR);
	        this.state = 720;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 721;
	        this.match(StarRealmsParser.INT);
	        this.state = 722;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 723;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEventDetail() {
	    let localctx = new ResolveEventDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, StarRealmsParser.RULE_resolveEventDetail);
	    try {
	        this.state = 737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 725;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 726;
	            this.positiveBalance();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 727;
	            this.discardFromEvent();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 728;
	            this.discarding();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 729;
	            this.scrapSummary();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 730;
	            this.scrapDetail();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 731;
	            this.resolveMobilization();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 732;
	            this.acquireToDeck();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 733;
	            this.selectCard();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 734;
	            this.drawCardsWithShuffle();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 735;
	            this.moveCardToHand();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 736;
	            this.acquireToHand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardFromEvent() {
	    let localctx = new DiscardFromEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, StarRealmsParser.RULE_discardFromEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.name();
	        this.state = 740;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__0) {
	            this.state = 741;
	            this.match(StarRealmsParser.T__0);
	        }

	        this.state = 744;
	        this.card();
	        this.state = 745;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveMobilization() {
	    let localctx = new ResolveMobilizationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, StarRealmsParser.RULE_resolveMobilization);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.name();
	        this.state = 748;
	        this.match(StarRealmsParser.IS);
	        this.state = 749;
	        this.match(StarRealmsParser.NOT);
	        this.state = 750;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 751;
	        this.match(StarRealmsParser.ANY);
	        this.state = 752;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 753;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveCardToHand() {
	    let localctx = new MoveCardToHandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, StarRealmsParser.RULE_moveCardToHand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.name();
	        this.state = 756;
	        this.match(StarRealmsParser.IS);
	        this.state = 757;
	        this.match(StarRealmsParser.MOVING);
	        this.state = 758;
	        this.card();
	        this.state = 759;
	        this.match(StarRealmsParser.TO);
	        this.state = 760;
	        this.match(StarRealmsParser.HAND);
	        this.state = 761;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveCard() {
	    let localctx = new ResolveCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, StarRealmsParser.RULE_resolveCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 764;
	        this.card();
	        this.state = 765;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackPlayer() {
	    let localctx = new AttackPlayerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, StarRealmsParser.RULE_attackPlayer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.attackPlayerSummary();
	        this.state = 769; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 768;
	        		this.negativeBalance();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 771; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,27, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackPlayerSummary() {
	    let localctx = new AttackPlayerSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, StarRealmsParser.RULE_attackPlayerSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.match(StarRealmsParser.ATTACKED);
	        this.state = 774;
	        this.name();
	        this.state = 775;
	        this.match(StarRealmsParser.FOR);
	        this.state = 776;
	        this.match(StarRealmsParser.INT);
	        this.state = 777;
	        this.newAuthority();
	        this.state = 778;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newAuthority() {
	    let localctx = new NewAuthorityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, StarRealmsParser.RULE_newAuthority);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.match(StarRealmsParser.T__1);
	        this.state = 781;
	        this.match(StarRealmsParser.NEW);
	        this.state = 782;
	        this.wordPlus();
	        this.state = 783;
	        this.match(StarRealmsParser.T__0);
	        this.state = 784;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.DECREASE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 785;
	        this.match(StarRealmsParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBase() {
	    let localctx = new AttackBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, StarRealmsParser.RULE_attackBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this.attackBaseSummary();
	        this.state = 791;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 788;
	                this.attackBaseDetail(); 
	            }
	            this.state = 793;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBaseSummary() {
	    let localctx = new AttackBaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, StarRealmsParser.RULE_attackBaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this.match(StarRealmsParser.ATTACKED);
	        this.state = 795;
	        this.card();
	        this.state = 796;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBaseDetail() {
	    let localctx = new AttackBaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, StarRealmsParser.RULE_attackBaseDetail);
	    try {
	        this.state = 801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 798;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 799;
	            this.destroyBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 800;
	            this.scrapAction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapCard() {
	    let localctx = new ScrapCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, StarRealmsParser.RULE_scrapCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.scrappingSummary();
	        this.state = 804;
	        this.scrappingDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrappingSummary() {
	    let localctx = new ScrappingSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, StarRealmsParser.RULE_scrappingSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 806;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 807;
	        this.card();
	        this.state = 808;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrappingDetail() {
	    let localctx = new ScrappingDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, StarRealmsParser.RULE_scrappingDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 810;
	        		this.scrapEffect();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 813; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,30, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapEffect() {
	    let localctx = new ScrapEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, StarRealmsParser.RULE_scrapEffect);
	    try {
	        this.state = 826;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 815;
	            this.scrapAction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 816;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 817;
	            this.freePurchase();
	            this.state = 818;
	            this.scrapAction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 820;
	            this.destroyBase();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 821;
	            this.newBalanceDetail();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 822;
	            this.replaceGambit();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 823;
	            this.scrapSummary();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 824;
	            this.moveDiscardToDeck();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 825;
	            this.refreshIndicators();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapAction() {
	    let localctx = new ScrapActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, StarRealmsParser.RULE_scrapAction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 829;
	        this.card();
	        this.state = 830;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freePurchase() {
	    let localctx = new FreePurchaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, StarRealmsParser.RULE_freePurchase);
	    try {
	        this.state = 852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 832;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 833;
	            this.card();
	            this.state = 834;
	            this.match(StarRealmsParser.TO);
	            this.state = 835;
	            this.match(StarRealmsParser.HAND);
	            this.state = 836;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 838;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 839;
	            this.card();
	            this.state = 840;
	            this.match(StarRealmsParser.TO);
	            this.state = 841;
	            this.match(StarRealmsParser.THE);
	            this.state = 842;
	            this.match(StarRealmsParser.TOP);
	            this.state = 843;
	            this.match(StarRealmsParser.OF);
	            this.state = 844;
	            this.match(StarRealmsParser.THE);
	            this.state = 845;
	            this.match(StarRealmsParser.DECK);
	            this.state = 846;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 848;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 849;
	            this.card();
	            this.state = 850;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveDiscardToDeck() {
	    let localctx = new MoveDiscardToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, StarRealmsParser.RULE_moveDiscardToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.name();
	        this.state = 855;
	        this.match(StarRealmsParser.IS);
	        this.state = 856;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 857;
	        this.card();
	        this.state = 858;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discard() {
	    let localctx = new DiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, StarRealmsParser.RULE_discard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.discardSummary();
	        this.state = 864;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 861;
	                this.discardDetail(); 
	            }
	            this.state = 866;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardSummary() {
	    let localctx = new DiscardSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, StarRealmsParser.RULE_discardSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 868;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 869;
	        this.match(StarRealmsParser.INT);
	        this.state = 870;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 871;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardDetail() {
	    let localctx = new DiscardDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, StarRealmsParser.RULE_discardDetail);
	    try {
	        this.state = 878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 873;
	            this.discardAction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 874;
	            this.discardEnd();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 875;
	            this.discarding();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 876;
	            this.eventRefuseDiscard();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 877;
	            this.negativeBalance();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAction() {
	    let localctx = new DiscardActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, StarRealmsParser.RULE_discardAction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        this.name();
	        this.state = 881;
	        this.match(StarRealmsParser.IS);
	        this.state = 882;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 883;
	        this.card();
	        this.state = 884;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardEnd() {
	    let localctx = new DiscardEndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, StarRealmsParser.RULE_discardEnd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.match(StarRealmsParser.NO);
	        this.state = 887;
	        this.match(StarRealmsParser.MORE2);
	        this.state = 888;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 889;
	        this.match(StarRealmsParser.TO);
	        this.state = 890;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 891;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventRefuseDiscard() {
	    let localctx = new EventRefuseDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, StarRealmsParser.RULE_eventRefuseDiscard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 893;
	        this.name();
	        this.state = 894;
	        this.match(StarRealmsParser.IS);
	        this.state = 895;
	        this.match(StarRealmsParser.NOT);
	        this.state = 896;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 897;
	        this.match(StarRealmsParser.ANY);
	        this.state = 898;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 899;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffect() {
	    let localctx = new ChoseEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, StarRealmsParser.RULE_choseEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 901;
	        this.choseEffectSummary();
	        this.state = 905;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 902;
	                this.choseEffectDetail(); 
	            }
	            this.state = 907;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffectSummary() {
	    let localctx = new ChoseEffectSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, StarRealmsParser.RULE_choseEffectSummary);
	    try {
	        this.state = 916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 908;
	            this.discardAndDrawSummary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 909;
	            this.choseIncreasePool();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 910;
	            this.choseScrapFromDiscard();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 911;
	            this.choseDiscardAndIncreasePool();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 912;
	            this.discountFactionGambit();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 913;
	            this.hiddenBaseGambit();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 914;
	            this.choseBlobDraw();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 915;
	            this.midGateEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discountFactionGambit() {
	    let localctx = new DiscountFactionGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, StarRealmsParser.RULE_discountFactionGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 919;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 921; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 920;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 923; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 925;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 926;
	        this.match(StarRealmsParser.AT);
	        this.state = 927;
	        this.match(StarRealmsParser.ONE);
	        this.state = 928;
	        this.match(StarRealmsParser.LESS);
	        this.state = 929;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 930;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAndDrawSummary() {
	    let localctx = new DiscardAndDrawSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, StarRealmsParser.RULE_discardAndDrawSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 932;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 933;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 934;
	        this.match(StarRealmsParser.AND);
	        this.state = 935;
	        this.match(StarRealmsParser.REDRAW);
	        this.state = 936;
	        this.match(StarRealmsParser.UP);
	        this.state = 937;
	        this.match(StarRealmsParser.TO);
	        this.state = 938;
	        this.match(StarRealmsParser.INT);
	        this.state = 939;
	        this.match(StarRealmsParser.CARD);
	        this.state = 940;
	        this.match(StarRealmsParser.T__3);
	        this.state = 941;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseIncreasePool() {
	    let localctx = new ChoseIncreasePoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, StarRealmsParser.RULE_choseIncreasePool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 944;
	        this.match(StarRealmsParser.ADD);
	        this.state = 945;
	        this.match(StarRealmsParser.INT);
	        this.state = 946;
	        this.wordPlus();
	        this.state = 947;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseScrapFromDiscard() {
	    let localctx = new ChoseScrapFromDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, StarRealmsParser.RULE_choseScrapFromDiscard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 950;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 951;
	        this.match(StarRealmsParser.WORD);
	        this.state = 952;
	        this.match(StarRealmsParser.CARD);
	        this.state = 953;
	        this.match(StarRealmsParser.FROM);
	        this.state = 954;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 955;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 956;
	        this.match(StarRealmsParser.PILE);
	        this.state = 957;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseDiscardAndIncreasePool() {
	    let localctx = new ChoseDiscardAndIncreasePoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, StarRealmsParser.RULE_choseDiscardAndIncreasePool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 960;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 961;
	        this.match(StarRealmsParser.UP);
	        this.state = 962;
	        this.match(StarRealmsParser.TO);
	        this.state = 963;
	        this.match(StarRealmsParser.INT);
	        this.state = 964;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 965;
	        this.match(StarRealmsParser.RECEIVE);
	        this.state = 966;
	        this.match(StarRealmsParser.INT);
	        this.state = 967;
	        this.wordPlus();
	        this.state = 968;
	        this.match(StarRealmsParser.FOR);
	        this.state = 969;
	        this.match(StarRealmsParser.EACH);
	        this.state = 970;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseBlobDraw() {
	    let localctx = new ChoseBlobDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, StarRealmsParser.RULE_choseBlobDraw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 973;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 974;
	        this.match(StarRealmsParser.WORD);
	        this.state = 975;
	        this.match(StarRealmsParser.CARD);
	        this.state = 976;
	        this.match(StarRealmsParser.FOR);
	        this.state = 977;
	        this.match(StarRealmsParser.EVERY);
	        this.state = 978;
	        this.match(StarRealmsParser.BLOB);
	        this.state = 979;
	        this.match(StarRealmsParser.CARD);
	        this.state = 980;
	        this.match(StarRealmsParser.PLAYED);
	        this.state = 981;
	        this.match(StarRealmsParser.THIS);
	        this.state = 982;
	        this.match(StarRealmsParser.TURN);
	        this.state = 983;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hiddenBaseGambit() {
	    let localctx = new HiddenBaseGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, StarRealmsParser.RULE_hiddenBaseGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 985;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 986;
	        this.match(StarRealmsParser.CREATE);
	        this.state = 988; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 987;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 990; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,38, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 992;
	        this.match(StarRealmsParser.SECRET);
	        this.state = 993;
	        this.match(StarRealmsParser.OUTPOST);
	        this.state = 994;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midGateEffect() {
	    let localctx = new MidGateEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, StarRealmsParser.RULE_midGateEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 996;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 997;
	        this.match(StarRealmsParser.ADD);
	        this.state = 998;
	        this.match(StarRealmsParser.INT);
	        this.state = 999;
	        this.wordPlus();
	        this.state = 1000;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1001;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1002;
	        this.match(StarRealmsParser.NUMBER);
	        this.state = 1003;
	        this.match(StarRealmsParser.OF);
	        this.state = 1004;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1005;
	        this.match(StarRealmsParser.RECEIVE);
	        this.state = 1006;
	        this.match(StarRealmsParser.INT);
	        this.state = 1007;
	        this.wordPlus();
	        this.state = 1008;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1009;
	        this.match(StarRealmsParser.EACH);
	        this.state = 1010;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffectDetail() {
	    let localctx = new ChoseEffectDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, StarRealmsParser.RULE_choseEffectDetail);
	    try {
	        this.state = 1022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1012;
	            this.selectDiscard();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1013;
	            this.discardForPool();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1014;
	            this.discarding();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1015;
	            this.drawCardsWithShuffle();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1016;
	            this.noScrap();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1017;
	            this.simpleScrap();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1018;
	            this.positiveBalance();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1019;
	            this.refreshTradeRow();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1020;
	            this.changeHiddenBaseToFaction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1021;
	            this.replaceGambit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshTradeRow() {
	    let localctx = new RefreshTradeRowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, StarRealmsParser.RULE_refreshTradeRow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this.match(StarRealmsParser.REFRESH);
	        this.state = 1025;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 1026;
	        this.match(StarRealmsParser.ROW);
	        this.state = 1027;
	        this.match(StarRealmsParser.DISCOUNTS);
	        this.state = 1028;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeHiddenBaseToFaction() {
	    let localctx = new ChangeHiddenBaseToFactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, StarRealmsParser.RULE_changeHiddenBaseToFaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1030;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1031;
	        this.match(StarRealmsParser.SECRET);
	        this.state = 1032;
	        this.match(StarRealmsParser.OUTPOST);
	        this.state = 1033;
	        this.match(StarRealmsParser.TO);
	        this.state = 1035; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1034;
	            this.wordPlus();
	            this.state = 1037; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << StarRealmsParser.COMBAT) | (1 << StarRealmsParser.AUTHORITY) | (1 << StarRealmsParser.TRADE) | (1 << StarRealmsParser.FEDERATION) | (1 << StarRealmsParser.STAR) | (1 << StarRealmsParser.EMPIRE) | (1 << StarRealmsParser.MACHINE) | (1 << StarRealmsParser.CULT) | (1 << StarRealmsParser.ACQUIRE) | (1 << StarRealmsParser.ACQUIRED) | (1 << StarRealmsParser.UNALIGNED) | (1 << StarRealmsParser.ACTIVATING) | (1 << StarRealmsParser.ATTACKED) | (1 << StarRealmsParser.SCRAPPING) | (1 << StarRealmsParser.SCRAPPED) | (1 << StarRealmsParser.SCRAP) | (1 << StarRealmsParser.SELECTING) | (1 << StarRealmsParser.SHUFFLED) | (1 << StarRealmsParser.DISCARDED) | (1 << StarRealmsParser.DISCARD) | (1 << StarRealmsParser.DISCOUNTS) | (1 << StarRealmsParser.REFRESH) | (1 << StarRealmsParser.DISCARDING) | (1 << StarRealmsParser.DESTROYED) | (1 << StarRealmsParser.RESOLVING) | (1 << StarRealmsParser.INDICATORS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (StarRealmsParser.AVAILABLE - 32)) | (1 << (StarRealmsParser.RETURNING - 32)) | (1 << (StarRealmsParser.ABILITY - 32)) | (1 << (StarRealmsParser.CHANGED - 32)) | (1 << (StarRealmsParser.REVEALED - 32)) | (1 << (StarRealmsParser.REPLACED - 32)) | (1 << (StarRealmsParser.COPYING - 32)) | (1 << (StarRealmsParser.COPIED - 32)) | (1 << (StarRealmsParser.IMAGE - 32)) | (1 << (StarRealmsParser.RECEIVE - 32)) | (1 << (StarRealmsParser.REDRAW - 32)) | (1 << (StarRealmsParser.TABLE - 32)) | (1 << (StarRealmsParser.EXPLORER - 32)) | (1 << (StarRealmsParser.PUT - 32)) | (1 << (StarRealmsParser.CREATE - 32)) | (1 << (StarRealmsParser.PLAYED - 32)) | (1 << (StarRealmsParser.SECRET - 32)) | (1 << (StarRealmsParser.OUTPOST - 32)) | (1 << (StarRealmsParser.RETURN - 32)) | (1 << (StarRealmsParser.TARGET - 32)) | (1 << (StarRealmsParser.DRAW - 32)) | (1 << (StarRealmsParser.EVERY - 32)) | (1 << (StarRealmsParser.BLOB - 32)) | (1 << (StarRealmsParser.COPY - 32)) | (1 << (StarRealmsParser.CARDS - 32)) | (1 << (StarRealmsParser.CHOSE - 32)) | (1 << (StarRealmsParser.TURN - 32)) | (1 << (StarRealmsParser.DESTROY - 32)) | (1 << (StarRealmsParser.NUMBER - 32)) | (1 << (StarRealmsParser.LOSE - 32)) | (1 << (StarRealmsParser.SHIP - 32)) | (1 << (StarRealmsParser.SHIPS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (StarRealmsParser.BASE - 64)) | (1 << (StarRealmsParser.BASES - 64)) | (1 << (StarRealmsParser.PILE - 64)) | (1 << (StarRealmsParser.EACH - 64)) | (1 << (StarRealmsParser.PLAY - 64)) | (1 << (StarRealmsParser.FORM - 64)) | (1 << (StarRealmsParser.COST - 64)) | (1 << (StarRealmsParser.DECK - 64)) | (1 << (StarRealmsParser.DREW - 64)) | (1 << (StarRealmsParser.ENDS - 64)) | (1 << (StarRealmsParser.CARD - 64)) | (1 << (StarRealmsParser.MORE2 - 64)) | (1 << (StarRealmsParser.FROM - 64)) | (1 << (StarRealmsParser.YOUR - 64)) | (1 << (StarRealmsParser.ALLY - 64)) | (1 << (StarRealmsParser.HAND - 64)) | (1 << (StarRealmsParser.GAME - 64)) | (1 << (StarRealmsParser.LESS - 64)) | (1 << (StarRealmsParser.MOVING - 64)) | (1 << (StarRealmsParser.INTO - 64)) | (1 << (StarRealmsParser.THIS - 64)) | (1 << (StarRealmsParser.EVENT - 64)) | (1 << (StarRealmsParser.NEW - 64)) | (1 << (StarRealmsParser.ALL - 64)) | (1 << (StarRealmsParser.NOW - 64)) | (1 << (StarRealmsParser.ROW - 64)) | (1 << (StarRealmsParser.THE - 64)) | (1 << (StarRealmsParser.TOP - 64)) | (1 << (StarRealmsParser.FOR - 64)) | (1 << (StarRealmsParser.DID - 64)) | (1 << (StarRealmsParser.AND - 64)) | (1 << (StarRealmsParser.ONE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (StarRealmsParser.ADD - 96)) | (1 << (StarRealmsParser.NOT - 96)) | (1 << (StarRealmsParser.HAS - 96)) | (1 << (StarRealmsParser.WON - 96)) | (1 << (StarRealmsParser.ANY - 96)) | (1 << (StarRealmsParser.IS - 96)) | (1 << (StarRealmsParser.IT - 96)) | (1 << (StarRealmsParser.IN - 96)) | (1 << (StarRealmsParser.TO - 96)) | (1 << (StarRealmsParser.OF - 96)) | (1 << (StarRealmsParser.UP - 96)) | (1 << (StarRealmsParser.OR - 96)) | (1 << (StarRealmsParser.NO - 96)) | (1 << (StarRealmsParser.ON - 96)) | (1 << (StarRealmsParser.WORD - 96)))) !== 0));
	        this.state = 1039;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingEffect() {
	    let localctx = new ActivatingEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, StarRealmsParser.RULE_activatingEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1041;
	        this.activatingSummary();
	        this.state = 1045;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1042;
	                this.activatingDetail(); 
	            }
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingSummary() {
	    let localctx = new ActivatingSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, StarRealmsParser.RULE_activatingSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1048;
	        this.match(StarRealmsParser.ACTIVATING);
	        this.state = 1049;
	        this.card();
	        this.state = 1050;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingDetail() {
	    let localctx = new ActivatingDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, StarRealmsParser.RULE_activatingDetail);
	    try {
	        this.state = 1067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1052;
	            this.drawAndScrapFromHand();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1053;
	            this.scrapAndDraw();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1054;
	            this.scrap();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1055;
	            this.noScrap();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1056;
	            this.freeAcquireToTop();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1057;
	            this.destroyBase();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1058;
	            this.scrapDetail();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1059;
	            this.noCopy();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1060;
	            this.noCopyBases();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1061;
	            this.copyCard();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1062;
	            this.copyBase();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1063;
	            this.discardAndDraw();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1064;
	            this.negativeBalance();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1065;
	            this.resolveStealth();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1066;
	            this.copyStealth();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapAndDraw() {
	    let localctx = new ScrapAndDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, StarRealmsParser.RULE_scrapAndDraw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1069;
	        this.scrap();
	        this.state = 1070;
	        this.drawCardsWithShuffle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrap() {
	    let localctx = new ScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, StarRealmsParser.RULE_scrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1073; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1072;
	        		this.scrapSummary();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1075; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,43, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1078; 
	        this._errHandler.sync(this);
	        _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1077;
	        		this.scrapDetail();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1080; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawAndScrapFromHand() {
	    let localctx = new DrawAndScrapFromHandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, StarRealmsParser.RULE_drawAndScrapFromHand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.drawCardsWithShuffle();
	        this.state = 1083;
	        this.resolveHandScrap();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveHandScrap() {
	    let localctx = new ResolveHandScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, StarRealmsParser.RULE_resolveHandScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1085;
	        this.resolveHandScrapSummary();
	        this.state = 1086;
	        this.scrapDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freeAcquireToTop() {
	    let localctx = new FreeAcquireToTopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, StarRealmsParser.RULE_freeAcquireToTop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 1089;
	        this.card();
	        this.state = 1090;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 1091;
	        this.purchaseToTop();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBase() {
	    let localctx = new CopyBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, StarRealmsParser.RULE_copyBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.copyBaseSummary();
	        this.state = 1094;
	        this.copyBaseDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBaseSummary() {
	    let localctx = new CopyBaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, StarRealmsParser.RULE_copyBaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1096;
	        this.name();
	        this.state = 1097;
	        this.match(StarRealmsParser.COPIED);
	        this.state = 1098;
	        this.match(StarRealmsParser.BASE);
	        this.state = 1099;
	        this.name();
	        this.state = 1100;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBaseDetail() {
	    let localctx = new CopyBaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, StarRealmsParser.RULE_copyBaseDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1102;
	        this.copyCardEffect();
	        this.state = 1106;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1103;
	                this.newBalanceDetail(); 
	            }
	            this.state = 1108;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noCopy() {
	    let localctx = new NoCopyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, StarRealmsParser.RULE_noCopy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.name();
	        this.state = 1110;
	        this.match(StarRealmsParser.IS);
	        this.state = 1111;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1112;
	        this.match(StarRealmsParser.COPYING);
	        this.state = 1113;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1114;
	        this.match(StarRealmsParser.SHIPS);
	        this.state = 1115;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noCopyBases() {
	    let localctx = new NoCopyBasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, StarRealmsParser.RULE_noCopyBases);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.name();
	        this.state = 1118;
	        this.match(StarRealmsParser.DID);
	        this.state = 1119;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1120;
	        this.match(StarRealmsParser.COPY);
	        this.state = 1121;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1122;
	        this.match(StarRealmsParser.BASES);
	        this.state = 1123;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCard() {
	    let localctx = new CopyCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, StarRealmsParser.RULE_copyCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1125;
	        this.copyCardSummary();
	        this.state = 1126;
	        this.copyCardEffect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCardSummary() {
	    let localctx = new CopyCardSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, StarRealmsParser.RULE_copyCardSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1128;
	        this.name();
	        this.state = 1129;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1130;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 1131;
	        this.card();
	        this.state = 1132;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCardEffect() {
	    let localctx = new CopyCardEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, StarRealmsParser.RULE_copyCardEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1135;
	        this.card();
	        this.state = 1136;
	        this.match(StarRealmsParser.TO);
	        this.state = 1137;
	        this.card();
	        this.state = 1138;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseToTop() {
	    let localctx = new PurchaseToTopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, StarRealmsParser.RULE_purchaseToTop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 1141;
	        this.card();
	        this.state = 1142;
	        this.match(StarRealmsParser.TO);
	        this.state = 1143;
	        this.match(StarRealmsParser.THE);
	        this.state = 1144;
	        this.match(StarRealmsParser.TOP);
	        this.state = 1145;
	        this.match(StarRealmsParser.OF);
	        this.state = 1146;
	        this.match(StarRealmsParser.THE);
	        this.state = 1147;
	        this.match(StarRealmsParser.DECK);
	        this.state = 1148;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapSummary() {
	    let localctx = new ScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, StarRealmsParser.RULE_scrapSummary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1150;
	        this.name();
	        this.state = 1151;
	        this.match(StarRealmsParser.IS);
	        this.state = 1152;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 1154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__0) {
	            this.state = 1153;
	            this.match(StarRealmsParser.T__0);
	        }

	        this.state = 1156;
	        this.card();
	        this.state = 1157;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapDetail() {
	    let localctx = new ScrapDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, StarRealmsParser.RULE_scrapDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1159;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 1160;
	        this.card();
	        this.state = 1161;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveHandScrapSummary() {
	    let localctx = new ResolveHandScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, StarRealmsParser.RULE_resolveHandScrapSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1163;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 1164;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 1165;
	        this.match(StarRealmsParser.WORD);
	        this.state = 1166;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1167;
	        this.match(StarRealmsParser.FROM);
	        this.state = 1168;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 1169;
	        this.match(StarRealmsParser.HAND);
	        this.state = 1170;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveStealth() {
	    let localctx = new ResolveStealthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, StarRealmsParser.RULE_resolveStealth);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1172;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 1173;
	        this.match(StarRealmsParser.FEDERATION);
	        this.state = 1174;
	        this.match(StarRealmsParser.OR);
	        this.state = 1175;
	        this.match(StarRealmsParser.STAR);
	        this.state = 1176;
	        this.match(StarRealmsParser.EMPIRE);
	        this.state = 1177;
	        this.match(StarRealmsParser.OR);
	        this.state = 1178;
	        this.match(StarRealmsParser.MACHINE);
	        this.state = 1179;
	        this.match(StarRealmsParser.CULT);
	        this.state = 1180;
	        this.match(StarRealmsParser.OR);
	        this.state = 1181;
	        this.match(StarRealmsParser.BLOB);
	        this.state = 1182;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyStealth() {
	    let localctx = new CopyStealthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, StarRealmsParser.RULE_copyStealth);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1184;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1185;
	        this.card();
	        this.state = 1186;
	        this.match(StarRealmsParser.TO);
	        this.state = 1188; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1187;
	            this.wordPlus();
	            this.state = 1190; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << StarRealmsParser.COMBAT) | (1 << StarRealmsParser.AUTHORITY) | (1 << StarRealmsParser.TRADE) | (1 << StarRealmsParser.FEDERATION) | (1 << StarRealmsParser.STAR) | (1 << StarRealmsParser.EMPIRE) | (1 << StarRealmsParser.MACHINE) | (1 << StarRealmsParser.CULT) | (1 << StarRealmsParser.ACQUIRE) | (1 << StarRealmsParser.ACQUIRED) | (1 << StarRealmsParser.UNALIGNED) | (1 << StarRealmsParser.ACTIVATING) | (1 << StarRealmsParser.ATTACKED) | (1 << StarRealmsParser.SCRAPPING) | (1 << StarRealmsParser.SCRAPPED) | (1 << StarRealmsParser.SCRAP) | (1 << StarRealmsParser.SELECTING) | (1 << StarRealmsParser.SHUFFLED) | (1 << StarRealmsParser.DISCARDED) | (1 << StarRealmsParser.DISCARD) | (1 << StarRealmsParser.DISCOUNTS) | (1 << StarRealmsParser.REFRESH) | (1 << StarRealmsParser.DISCARDING) | (1 << StarRealmsParser.DESTROYED) | (1 << StarRealmsParser.RESOLVING) | (1 << StarRealmsParser.INDICATORS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (StarRealmsParser.AVAILABLE - 32)) | (1 << (StarRealmsParser.RETURNING - 32)) | (1 << (StarRealmsParser.ABILITY - 32)) | (1 << (StarRealmsParser.CHANGED - 32)) | (1 << (StarRealmsParser.REVEALED - 32)) | (1 << (StarRealmsParser.REPLACED - 32)) | (1 << (StarRealmsParser.COPYING - 32)) | (1 << (StarRealmsParser.COPIED - 32)) | (1 << (StarRealmsParser.IMAGE - 32)) | (1 << (StarRealmsParser.RECEIVE - 32)) | (1 << (StarRealmsParser.REDRAW - 32)) | (1 << (StarRealmsParser.TABLE - 32)) | (1 << (StarRealmsParser.EXPLORER - 32)) | (1 << (StarRealmsParser.PUT - 32)) | (1 << (StarRealmsParser.CREATE - 32)) | (1 << (StarRealmsParser.PLAYED - 32)) | (1 << (StarRealmsParser.SECRET - 32)) | (1 << (StarRealmsParser.OUTPOST - 32)) | (1 << (StarRealmsParser.RETURN - 32)) | (1 << (StarRealmsParser.TARGET - 32)) | (1 << (StarRealmsParser.DRAW - 32)) | (1 << (StarRealmsParser.EVERY - 32)) | (1 << (StarRealmsParser.BLOB - 32)) | (1 << (StarRealmsParser.COPY - 32)) | (1 << (StarRealmsParser.CARDS - 32)) | (1 << (StarRealmsParser.CHOSE - 32)) | (1 << (StarRealmsParser.TURN - 32)) | (1 << (StarRealmsParser.DESTROY - 32)) | (1 << (StarRealmsParser.NUMBER - 32)) | (1 << (StarRealmsParser.LOSE - 32)) | (1 << (StarRealmsParser.SHIP - 32)) | (1 << (StarRealmsParser.SHIPS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (StarRealmsParser.BASE - 64)) | (1 << (StarRealmsParser.BASES - 64)) | (1 << (StarRealmsParser.PILE - 64)) | (1 << (StarRealmsParser.EACH - 64)) | (1 << (StarRealmsParser.PLAY - 64)) | (1 << (StarRealmsParser.FORM - 64)) | (1 << (StarRealmsParser.COST - 64)) | (1 << (StarRealmsParser.DECK - 64)) | (1 << (StarRealmsParser.DREW - 64)) | (1 << (StarRealmsParser.ENDS - 64)) | (1 << (StarRealmsParser.CARD - 64)) | (1 << (StarRealmsParser.MORE2 - 64)) | (1 << (StarRealmsParser.FROM - 64)) | (1 << (StarRealmsParser.YOUR - 64)) | (1 << (StarRealmsParser.ALLY - 64)) | (1 << (StarRealmsParser.HAND - 64)) | (1 << (StarRealmsParser.GAME - 64)) | (1 << (StarRealmsParser.LESS - 64)) | (1 << (StarRealmsParser.MOVING - 64)) | (1 << (StarRealmsParser.INTO - 64)) | (1 << (StarRealmsParser.THIS - 64)) | (1 << (StarRealmsParser.EVENT - 64)) | (1 << (StarRealmsParser.NEW - 64)) | (1 << (StarRealmsParser.ALL - 64)) | (1 << (StarRealmsParser.NOW - 64)) | (1 << (StarRealmsParser.ROW - 64)) | (1 << (StarRealmsParser.THE - 64)) | (1 << (StarRealmsParser.TOP - 64)) | (1 << (StarRealmsParser.FOR - 64)) | (1 << (StarRealmsParser.DID - 64)) | (1 << (StarRealmsParser.AND - 64)) | (1 << (StarRealmsParser.ONE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (StarRealmsParser.ADD - 96)) | (1 << (StarRealmsParser.NOT - 96)) | (1 << (StarRealmsParser.HAS - 96)) | (1 << (StarRealmsParser.WON - 96)) | (1 << (StarRealmsParser.ANY - 96)) | (1 << (StarRealmsParser.IS - 96)) | (1 << (StarRealmsParser.IT - 96)) | (1 << (StarRealmsParser.IN - 96)) | (1 << (StarRealmsParser.TO - 96)) | (1 << (StarRealmsParser.OF - 96)) | (1 << (StarRealmsParser.UP - 96)) | (1 << (StarRealmsParser.OR - 96)) | (1 << (StarRealmsParser.NO - 96)) | (1 << (StarRealmsParser.ON - 96)) | (1 << (StarRealmsParser.WORD - 96)))) !== 0));
	        this.state = 1192;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAndDraw() {
	    let localctx = new DiscardAndDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, StarRealmsParser.RULE_discardAndDraw);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1194;
	        		this.selectDiscard();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1197; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,48, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1200; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1199;
	            this.discarding();
	            this.state = 1202; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===StarRealmsParser.DISCARDED);
	        this.state = 1204;
	        this.drawCardsWithShuffle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endPhase() {
	    let localctx = new EndPhaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, StarRealmsParser.RULE_endPhase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.endTurn();
	        this.state = 1210;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1207;
	                this.drawPhaseDetail(); 
	            }
	            this.state = 1212;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	        }

	        this.state = 1213;
	        this.newTurn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endTurn() {
	    let localctx = new EndTurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, StarRealmsParser.RULE_endTurn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1215;
	        this.name();
	        this.state = 1216;
	        this.match(StarRealmsParser.ENDS);
	        this.state = 1217;
	        this.match(StarRealmsParser.TURN);
	        this.state = 1218;
	        this.match(StarRealmsParser.INT);
	        this.state = 1219;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawPhaseDetail() {
	    let localctx = new DrawPhaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, StarRealmsParser.RULE_drawPhaseDetail);
	    try {
	        this.state = 1225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1221;
	            this.resetCopiedCards();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1222;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1223;
	            this.refreshIndicators();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1224;
	            this.eventRefuseDiscard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetCopiedCards() {
	    let localctx = new ResetCopiedCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, StarRealmsParser.RULE_resetCopiedCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1227;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1228;
	        this.card();
	        this.state = 1229;
	        this.match(StarRealmsParser.TO);
	        this.state = 1230;
	        this.match(StarRealmsParser.UNALIGNED);
	        this.state = 1231;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshIndicators() {
	    let localctx = new RefreshIndicatorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, StarRealmsParser.RULE_refreshIndicators);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this.match(StarRealmsParser.REFRESH);
	        this.state = 1234;
	        this.match(StarRealmsParser.ALLY);
	        this.state = 1235;
	        this.match(StarRealmsParser.INDICATORS);
	        this.state = 1236;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newTurn() {
	    let localctx = new NewTurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, StarRealmsParser.RULE_newTurn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1238;
	        this.match(StarRealmsParser.IT);
	        this.state = 1239;
	        this.match(StarRealmsParser.IS);
	        this.state = 1240;
	        this.match(StarRealmsParser.NOW);
	        this.state = 1241;
	        this.name();
	        this.state = 1242;
	        this.match(StarRealmsParser.T__4);
	        this.state = 1243;
	        this.match(StarRealmsParser.TURN);
	        this.state = 1244;
	        this.match(StarRealmsParser.INT);
	        this.state = 1245;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectCard() {
	    let localctx = new SelectCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, StarRealmsParser.RULE_selectCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        this.name();
	        this.state = 1248;
	        this.match(StarRealmsParser.IS);
	        this.state = 1249;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1250;
	        this.card();
	        this.state = 1251;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceGambit() {
	    let localctx = new ReplaceGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, StarRealmsParser.RULE_replaceGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.match(StarRealmsParser.REPLACED);
	        this.state = 1254;
	        this.card();
	        this.state = 1255;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noScrap() {
	    let localctx = new NoScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, StarRealmsParser.RULE_noScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1257;
	        this.name();
	        this.state = 1258;
	        this.match(StarRealmsParser.IS);
	        this.state = 1259;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1260;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 1261;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1262;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1263;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectDiscard() {
	    let localctx = new SelectDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, StarRealmsParser.RULE_selectDiscard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        this.name();
	        this.state = 1266;
	        this.match(StarRealmsParser.IS);
	        this.state = 1267;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1268;
	        this.card();
	        this.state = 1269;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardForPool() {
	    let localctx = new DiscardForPoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, StarRealmsParser.RULE_discardForPool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this.name();
	        this.state = 1272;
	        this.match(StarRealmsParser.IS);
	        this.state = 1273;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 1274;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1275;
	        this.wordPlus();
	        this.state = 1276;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discarding() {
	    let localctx = new DiscardingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, StarRealmsParser.RULE_discarding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this.match(StarRealmsParser.DISCARDED);
	        this.state = 1279;
	        this.card();
	        this.state = 1280;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawCardsWithShuffle() {
	    let localctx = new DrawCardsWithShuffleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, StarRealmsParser.RULE_drawCardsWithShuffle);
	    var _la = 0; // Token type
	    try {
	        this.state = 1301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
			let _alt;
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1283; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1282;
	                this.drawCards();
	                this.state = 1285; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===StarRealmsParser.DREW);
	            this.state = 1287;
	            this.shuffleCards();
	            this.state = 1289; 
	            this._errHandler.sync(this);
	            _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1288;
	            		this.drawCards();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1291; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,53, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===StarRealmsParser.SHUFFLED) {
	                this.state = 1293;
	                this.shuffleCards();
	            }

	            this.state = 1297; 
	            this._errHandler.sync(this);
	            _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1296;
	            		this.drawCards();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1299; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,55, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawCards() {
	    let localctx = new DrawCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, StarRealmsParser.RULE_drawCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.match(StarRealmsParser.DREW);
	        this.state = 1304;
	        this.match(StarRealmsParser.INT);
	        this.state = 1305;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1306;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newBalanceDetail() {
	    let localctx = new NewBalanceDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, StarRealmsParser.RULE_newBalanceDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1308;
	        this.name();
	        this.state = 1309;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 1310;
	            this.card();

	        }
	        this.state = 1313;
	        this.effect();
	        this.state = 1314;
	        this.balance();
	        this.state = 1315;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	effect() {
	    let localctx = new EffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, StarRealmsParser.RULE_effect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1317;
	        _la = this._input.LA(1);
	        if(!(((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (StarRealmsParser.INT - 118)) | (1 << (StarRealmsParser.INCREMENT - 118)) | (1 << (StarRealmsParser.DECREASE - 118)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1318;
	        this.wordPlus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positiveBalance() {
	    let localctx = new PositiveBalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, StarRealmsParser.RULE_positiveBalance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.name();
	        this.state = 1321;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        if(la_===1) {
	            this.state = 1322;
	            this.card();

	        }
	        this.state = 1325;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.INCREMENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1326;
	        this.wordPlus();
	        this.state = 1327;
	        this.balance();
	        this.state = 1328;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negativeBalance() {
	    let localctx = new NegativeBalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, StarRealmsParser.RULE_negativeBalance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1330;
	        this.name();
	        this.state = 1331;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << StarRealmsParser.COMBAT) | (1 << StarRealmsParser.AUTHORITY) | (1 << StarRealmsParser.TRADE) | (1 << StarRealmsParser.FEDERATION) | (1 << StarRealmsParser.STAR) | (1 << StarRealmsParser.EMPIRE) | (1 << StarRealmsParser.MACHINE) | (1 << StarRealmsParser.CULT) | (1 << StarRealmsParser.ACQUIRE) | (1 << StarRealmsParser.ACQUIRED) | (1 << StarRealmsParser.UNALIGNED) | (1 << StarRealmsParser.ACTIVATING) | (1 << StarRealmsParser.ATTACKED) | (1 << StarRealmsParser.SCRAPPING) | (1 << StarRealmsParser.SCRAPPED) | (1 << StarRealmsParser.SCRAP) | (1 << StarRealmsParser.SELECTING) | (1 << StarRealmsParser.SHUFFLED) | (1 << StarRealmsParser.DISCARDED) | (1 << StarRealmsParser.DISCARD) | (1 << StarRealmsParser.DISCOUNTS) | (1 << StarRealmsParser.REFRESH) | (1 << StarRealmsParser.DISCARDING) | (1 << StarRealmsParser.DESTROYED) | (1 << StarRealmsParser.RESOLVING) | (1 << StarRealmsParser.INDICATORS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (StarRealmsParser.AVAILABLE - 32)) | (1 << (StarRealmsParser.RETURNING - 32)) | (1 << (StarRealmsParser.ABILITY - 32)) | (1 << (StarRealmsParser.CHANGED - 32)) | (1 << (StarRealmsParser.REVEALED - 32)) | (1 << (StarRealmsParser.REPLACED - 32)) | (1 << (StarRealmsParser.COPYING - 32)) | (1 << (StarRealmsParser.COPIED - 32)) | (1 << (StarRealmsParser.IMAGE - 32)) | (1 << (StarRealmsParser.RECEIVE - 32)) | (1 << (StarRealmsParser.REDRAW - 32)) | (1 << (StarRealmsParser.TABLE - 32)) | (1 << (StarRealmsParser.EXPLORER - 32)) | (1 << (StarRealmsParser.PUT - 32)) | (1 << (StarRealmsParser.CREATE - 32)) | (1 << (StarRealmsParser.PLAYED - 32)) | (1 << (StarRealmsParser.SECRET - 32)) | (1 << (StarRealmsParser.OUTPOST - 32)) | (1 << (StarRealmsParser.RETURN - 32)) | (1 << (StarRealmsParser.TARGET - 32)) | (1 << (StarRealmsParser.DRAW - 32)) | (1 << (StarRealmsParser.EVERY - 32)) | (1 << (StarRealmsParser.BLOB - 32)) | (1 << (StarRealmsParser.COPY - 32)) | (1 << (StarRealmsParser.CARDS - 32)) | (1 << (StarRealmsParser.CHOSE - 32)) | (1 << (StarRealmsParser.TURN - 32)) | (1 << (StarRealmsParser.DESTROY - 32)) | (1 << (StarRealmsParser.NUMBER - 32)) | (1 << (StarRealmsParser.LOSE - 32)) | (1 << (StarRealmsParser.SHIP - 32)) | (1 << (StarRealmsParser.SHIPS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (StarRealmsParser.BASE - 64)) | (1 << (StarRealmsParser.BASES - 64)) | (1 << (StarRealmsParser.PILE - 64)) | (1 << (StarRealmsParser.EACH - 64)) | (1 << (StarRealmsParser.PLAY - 64)) | (1 << (StarRealmsParser.FORM - 64)) | (1 << (StarRealmsParser.COST - 64)) | (1 << (StarRealmsParser.DECK - 64)) | (1 << (StarRealmsParser.DREW - 64)) | (1 << (StarRealmsParser.ENDS - 64)) | (1 << (StarRealmsParser.CARD - 64)) | (1 << (StarRealmsParser.MORE2 - 64)) | (1 << (StarRealmsParser.FROM - 64)) | (1 << (StarRealmsParser.YOUR - 64)) | (1 << (StarRealmsParser.ALLY - 64)) | (1 << (StarRealmsParser.HAND - 64)) | (1 << (StarRealmsParser.GAME - 64)) | (1 << (StarRealmsParser.LESS - 64)) | (1 << (StarRealmsParser.MOVING - 64)) | (1 << (StarRealmsParser.INTO - 64)) | (1 << (StarRealmsParser.THIS - 64)) | (1 << (StarRealmsParser.EVENT - 64)) | (1 << (StarRealmsParser.NEW - 64)) | (1 << (StarRealmsParser.ALL - 64)) | (1 << (StarRealmsParser.NOW - 64)) | (1 << (StarRealmsParser.ROW - 64)) | (1 << (StarRealmsParser.THE - 64)) | (1 << (StarRealmsParser.TOP - 64)) | (1 << (StarRealmsParser.FOR - 64)) | (1 << (StarRealmsParser.DID - 64)) | (1 << (StarRealmsParser.AND - 64)) | (1 << (StarRealmsParser.ONE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (StarRealmsParser.ADD - 96)) | (1 << (StarRealmsParser.NOT - 96)) | (1 << (StarRealmsParser.HAS - 96)) | (1 << (StarRealmsParser.WON - 96)) | (1 << (StarRealmsParser.ANY - 96)) | (1 << (StarRealmsParser.IS - 96)) | (1 << (StarRealmsParser.IT - 96)) | (1 << (StarRealmsParser.IN - 96)) | (1 << (StarRealmsParser.TO - 96)) | (1 << (StarRealmsParser.OF - 96)) | (1 << (StarRealmsParser.UP - 96)) | (1 << (StarRealmsParser.OR - 96)) | (1 << (StarRealmsParser.NO - 96)) | (1 << (StarRealmsParser.ON - 96)) | (1 << (StarRealmsParser.INT - 96)) | (1 << (StarRealmsParser.WORD - 96)))) !== 0)) {
	            this.state = 1332;
	            this.card();
	        }

	        this.state = 1335;
	        this.match(StarRealmsParser.DECREASE);

	        this.state = 1336;
	        this.wordPlus();
	        this.state = 1337;
	        this.balance();
	        this.state = 1338;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balance() {
	    let localctx = new BalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, StarRealmsParser.RULE_balance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.match(StarRealmsParser.T__1);
	        this.state = 1341;
	        this.wordPlus();
	        this.state = 1342;
	        this.match(StarRealmsParser.T__0);
	        this.state = 1343;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.DECREASE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1344;
	        this.match(StarRealmsParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destroyBase() {
	    let localctx = new DestroyBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, StarRealmsParser.RULE_destroyBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.match(StarRealmsParser.DESTROYED);
	        this.state = 1347;
	        this.card();
	        this.state = 1348;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shuffleCards() {
	    let localctx = new ShuffleCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, StarRealmsParser.RULE_shuffleCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.match(StarRealmsParser.SHUFFLED);
	        this.state = 1351;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1352;
	        this.match(StarRealmsParser.PILE);
	        this.state = 1353;
	        this.match(StarRealmsParser.TO);
	        this.state = 1354;
	        this.match(StarRealmsParser.FORM);
	        this.state = 1355;
	        this.match(StarRealmsParser.NEW);
	        this.state = 1356;
	        this.match(StarRealmsParser.DECK);
	        this.state = 1357;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, StarRealmsParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1359;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1362; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,60, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	card() {
	    let localctx = new CardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, StarRealmsParser.RULE_card);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1369; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1369;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case StarRealmsParser.COMBAT:
	        		case StarRealmsParser.AUTHORITY:
	        		case StarRealmsParser.TRADE:
	        		case StarRealmsParser.FEDERATION:
	        		case StarRealmsParser.STAR:
	        		case StarRealmsParser.EMPIRE:
	        		case StarRealmsParser.MACHINE:
	        		case StarRealmsParser.CULT:
	        		case StarRealmsParser.ACQUIRE:
	        		case StarRealmsParser.ACQUIRED:
	        		case StarRealmsParser.UNALIGNED:
	        		case StarRealmsParser.ACTIVATING:
	        		case StarRealmsParser.ATTACKED:
	        		case StarRealmsParser.SCRAPPING:
	        		case StarRealmsParser.SCRAPPED:
	        		case StarRealmsParser.SCRAP:
	        		case StarRealmsParser.SELECTING:
	        		case StarRealmsParser.SHUFFLED:
	        		case StarRealmsParser.DISCARDED:
	        		case StarRealmsParser.DISCARD:
	        		case StarRealmsParser.DISCOUNTS:
	        		case StarRealmsParser.REFRESH:
	        		case StarRealmsParser.DISCARDING:
	        		case StarRealmsParser.DESTROYED:
	        		case StarRealmsParser.RESOLVING:
	        		case StarRealmsParser.INDICATORS:
	        		case StarRealmsParser.AVAILABLE:
	        		case StarRealmsParser.RETURNING:
	        		case StarRealmsParser.ABILITY:
	        		case StarRealmsParser.CHANGED:
	        		case StarRealmsParser.REVEALED:
	        		case StarRealmsParser.REPLACED:
	        		case StarRealmsParser.COPYING:
	        		case StarRealmsParser.COPIED:
	        		case StarRealmsParser.IMAGE:
	        		case StarRealmsParser.RECEIVE:
	        		case StarRealmsParser.REDRAW:
	        		case StarRealmsParser.TABLE:
	        		case StarRealmsParser.EXPLORER:
	        		case StarRealmsParser.PUT:
	        		case StarRealmsParser.CREATE:
	        		case StarRealmsParser.PLAYED:
	        		case StarRealmsParser.SECRET:
	        		case StarRealmsParser.OUTPOST:
	        		case StarRealmsParser.RETURN:
	        		case StarRealmsParser.TARGET:
	        		case StarRealmsParser.DRAW:
	        		case StarRealmsParser.EVERY:
	        		case StarRealmsParser.BLOB:
	        		case StarRealmsParser.COPY:
	        		case StarRealmsParser.CARDS:
	        		case StarRealmsParser.CHOSE:
	        		case StarRealmsParser.TURN:
	        		case StarRealmsParser.DESTROY:
	        		case StarRealmsParser.NUMBER:
	        		case StarRealmsParser.LOSE:
	        		case StarRealmsParser.SHIP:
	        		case StarRealmsParser.SHIPS:
	        		case StarRealmsParser.BASE:
	        		case StarRealmsParser.BASES:
	        		case StarRealmsParser.PILE:
	        		case StarRealmsParser.EACH:
	        		case StarRealmsParser.PLAY:
	        		case StarRealmsParser.FORM:
	        		case StarRealmsParser.COST:
	        		case StarRealmsParser.DECK:
	        		case StarRealmsParser.DREW:
	        		case StarRealmsParser.ENDS:
	        		case StarRealmsParser.CARD:
	        		case StarRealmsParser.MORE2:
	        		case StarRealmsParser.FROM:
	        		case StarRealmsParser.YOUR:
	        		case StarRealmsParser.ALLY:
	        		case StarRealmsParser.HAND:
	        		case StarRealmsParser.GAME:
	        		case StarRealmsParser.LESS:
	        		case StarRealmsParser.MOVING:
	        		case StarRealmsParser.INTO:
	        		case StarRealmsParser.THIS:
	        		case StarRealmsParser.EVENT:
	        		case StarRealmsParser.NEW:
	        		case StarRealmsParser.ALL:
	        		case StarRealmsParser.NOW:
	        		case StarRealmsParser.ROW:
	        		case StarRealmsParser.THE:
	        		case StarRealmsParser.TOP:
	        		case StarRealmsParser.FOR:
	        		case StarRealmsParser.DID:
	        		case StarRealmsParser.AND:
	        		case StarRealmsParser.ONE:
	        		case StarRealmsParser.ADD:
	        		case StarRealmsParser.NOT:
	        		case StarRealmsParser.HAS:
	        		case StarRealmsParser.WON:
	        		case StarRealmsParser.ANY:
	        		case StarRealmsParser.IS:
	        		case StarRealmsParser.IT:
	        		case StarRealmsParser.IN:
	        		case StarRealmsParser.TO:
	        		case StarRealmsParser.OF:
	        		case StarRealmsParser.UP:
	        		case StarRealmsParser.OR:
	        		case StarRealmsParser.NO:
	        		case StarRealmsParser.ON:
	        		case StarRealmsParser.WORD:
	        		    this.state = 1364;
	        		    this.wordPlus();
	        		    this.state = 1366;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===StarRealmsParser.T__4) {
	        		        this.state = 1365;
	        		        this.match(StarRealmsParser.T__4);
	        		    }

	        		    break;
	        		case StarRealmsParser.INT:
	        		    this.state = 1368;
	        		    this.match(StarRealmsParser.INT);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1371; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,63, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wordPlus() {
	    let localctx = new WordPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, StarRealmsParser.RULE_wordPlus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << StarRealmsParser.COMBAT) | (1 << StarRealmsParser.AUTHORITY) | (1 << StarRealmsParser.TRADE) | (1 << StarRealmsParser.FEDERATION) | (1 << StarRealmsParser.STAR) | (1 << StarRealmsParser.EMPIRE) | (1 << StarRealmsParser.MACHINE) | (1 << StarRealmsParser.CULT) | (1 << StarRealmsParser.ACQUIRE) | (1 << StarRealmsParser.ACQUIRED) | (1 << StarRealmsParser.UNALIGNED) | (1 << StarRealmsParser.ACTIVATING) | (1 << StarRealmsParser.ATTACKED) | (1 << StarRealmsParser.SCRAPPING) | (1 << StarRealmsParser.SCRAPPED) | (1 << StarRealmsParser.SCRAP) | (1 << StarRealmsParser.SELECTING) | (1 << StarRealmsParser.SHUFFLED) | (1 << StarRealmsParser.DISCARDED) | (1 << StarRealmsParser.DISCARD) | (1 << StarRealmsParser.DISCOUNTS) | (1 << StarRealmsParser.REFRESH) | (1 << StarRealmsParser.DISCARDING) | (1 << StarRealmsParser.DESTROYED) | (1 << StarRealmsParser.RESOLVING) | (1 << StarRealmsParser.INDICATORS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (StarRealmsParser.AVAILABLE - 32)) | (1 << (StarRealmsParser.RETURNING - 32)) | (1 << (StarRealmsParser.ABILITY - 32)) | (1 << (StarRealmsParser.CHANGED - 32)) | (1 << (StarRealmsParser.REVEALED - 32)) | (1 << (StarRealmsParser.REPLACED - 32)) | (1 << (StarRealmsParser.COPYING - 32)) | (1 << (StarRealmsParser.COPIED - 32)) | (1 << (StarRealmsParser.IMAGE - 32)) | (1 << (StarRealmsParser.RECEIVE - 32)) | (1 << (StarRealmsParser.REDRAW - 32)) | (1 << (StarRealmsParser.TABLE - 32)) | (1 << (StarRealmsParser.EXPLORER - 32)) | (1 << (StarRealmsParser.PUT - 32)) | (1 << (StarRealmsParser.CREATE - 32)) | (1 << (StarRealmsParser.PLAYED - 32)) | (1 << (StarRealmsParser.SECRET - 32)) | (1 << (StarRealmsParser.OUTPOST - 32)) | (1 << (StarRealmsParser.RETURN - 32)) | (1 << (StarRealmsParser.TARGET - 32)) | (1 << (StarRealmsParser.DRAW - 32)) | (1 << (StarRealmsParser.EVERY - 32)) | (1 << (StarRealmsParser.BLOB - 32)) | (1 << (StarRealmsParser.COPY - 32)) | (1 << (StarRealmsParser.CARDS - 32)) | (1 << (StarRealmsParser.CHOSE - 32)) | (1 << (StarRealmsParser.TURN - 32)) | (1 << (StarRealmsParser.DESTROY - 32)) | (1 << (StarRealmsParser.NUMBER - 32)) | (1 << (StarRealmsParser.LOSE - 32)) | (1 << (StarRealmsParser.SHIP - 32)) | (1 << (StarRealmsParser.SHIPS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (StarRealmsParser.BASE - 64)) | (1 << (StarRealmsParser.BASES - 64)) | (1 << (StarRealmsParser.PILE - 64)) | (1 << (StarRealmsParser.EACH - 64)) | (1 << (StarRealmsParser.PLAY - 64)) | (1 << (StarRealmsParser.FORM - 64)) | (1 << (StarRealmsParser.COST - 64)) | (1 << (StarRealmsParser.DECK - 64)) | (1 << (StarRealmsParser.DREW - 64)) | (1 << (StarRealmsParser.ENDS - 64)) | (1 << (StarRealmsParser.CARD - 64)) | (1 << (StarRealmsParser.MORE2 - 64)) | (1 << (StarRealmsParser.FROM - 64)) | (1 << (StarRealmsParser.YOUR - 64)) | (1 << (StarRealmsParser.ALLY - 64)) | (1 << (StarRealmsParser.HAND - 64)) | (1 << (StarRealmsParser.GAME - 64)) | (1 << (StarRealmsParser.LESS - 64)) | (1 << (StarRealmsParser.MOVING - 64)) | (1 << (StarRealmsParser.INTO - 64)) | (1 << (StarRealmsParser.THIS - 64)) | (1 << (StarRealmsParser.EVENT - 64)) | (1 << (StarRealmsParser.NEW - 64)) | (1 << (StarRealmsParser.ALL - 64)) | (1 << (StarRealmsParser.NOW - 64)) | (1 << (StarRealmsParser.ROW - 64)) | (1 << (StarRealmsParser.THE - 64)) | (1 << (StarRealmsParser.TOP - 64)) | (1 << (StarRealmsParser.FOR - 64)) | (1 << (StarRealmsParser.DID - 64)) | (1 << (StarRealmsParser.AND - 64)) | (1 << (StarRealmsParser.ONE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (StarRealmsParser.ADD - 96)) | (1 << (StarRealmsParser.NOT - 96)) | (1 << (StarRealmsParser.HAS - 96)) | (1 << (StarRealmsParser.WON - 96)) | (1 << (StarRealmsParser.ANY - 96)) | (1 << (StarRealmsParser.IS - 96)) | (1 << (StarRealmsParser.IT - 96)) | (1 << (StarRealmsParser.IN - 96)) | (1 << (StarRealmsParser.TO - 96)) | (1 << (StarRealmsParser.OF - 96)) | (1 << (StarRealmsParser.UP - 96)) | (1 << (StarRealmsParser.OR - 96)) | (1 << (StarRealmsParser.NO - 96)) | (1 << (StarRealmsParser.ON - 96)) | (1 << (StarRealmsParser.WORD - 96)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

StarRealmsParser.EOF = antlr4.Token.EOF;
StarRealmsParser.T__0 = 1;
StarRealmsParser.T__1 = 2;
StarRealmsParser.T__2 = 3;
StarRealmsParser.T__3 = 4;
StarRealmsParser.T__4 = 5;
StarRealmsParser.COMBAT = 6;
StarRealmsParser.AUTHORITY = 7;
StarRealmsParser.TRADE = 8;
StarRealmsParser.FEDERATION = 9;
StarRealmsParser.STAR = 10;
StarRealmsParser.EMPIRE = 11;
StarRealmsParser.MACHINE = 12;
StarRealmsParser.CULT = 13;
StarRealmsParser.ACQUIRE = 14;
StarRealmsParser.ACQUIRED = 15;
StarRealmsParser.UNALIGNED = 16;
StarRealmsParser.ACTIVATING = 17;
StarRealmsParser.ATTACKED = 18;
StarRealmsParser.SCRAPPING = 19;
StarRealmsParser.SCRAPPED = 20;
StarRealmsParser.SCRAP = 21;
StarRealmsParser.SELECTING = 22;
StarRealmsParser.SHUFFLED = 23;
StarRealmsParser.DISCARDED = 24;
StarRealmsParser.DISCARD = 25;
StarRealmsParser.DISCOUNTS = 26;
StarRealmsParser.REFRESH = 27;
StarRealmsParser.DISCARDING = 28;
StarRealmsParser.DESTROYED = 29;
StarRealmsParser.RESOLVING = 30;
StarRealmsParser.INDICATORS = 31;
StarRealmsParser.AVAILABLE = 32;
StarRealmsParser.RETURNING = 33;
StarRealmsParser.ABILITY = 34;
StarRealmsParser.CHANGED = 35;
StarRealmsParser.REVEALED = 36;
StarRealmsParser.REPLACED = 37;
StarRealmsParser.COPYING = 38;
StarRealmsParser.COPIED = 39;
StarRealmsParser.IMAGE = 40;
StarRealmsParser.RECEIVE = 41;
StarRealmsParser.REDRAW = 42;
StarRealmsParser.TABLE = 43;
StarRealmsParser.EXPLORER = 44;
StarRealmsParser.PUT = 45;
StarRealmsParser.CREATE = 46;
StarRealmsParser.PLAYED = 47;
StarRealmsParser.SECRET = 48;
StarRealmsParser.OUTPOST = 49;
StarRealmsParser.RETURN = 50;
StarRealmsParser.TARGET = 51;
StarRealmsParser.DRAW = 52;
StarRealmsParser.EVERY = 53;
StarRealmsParser.BLOB = 54;
StarRealmsParser.COPY = 55;
StarRealmsParser.CARDS = 56;
StarRealmsParser.CHOSE = 57;
StarRealmsParser.TURN = 58;
StarRealmsParser.DESTROY = 59;
StarRealmsParser.NUMBER = 60;
StarRealmsParser.LOSE = 61;
StarRealmsParser.SHIP = 62;
StarRealmsParser.SHIPS = 63;
StarRealmsParser.BASE = 64;
StarRealmsParser.BASES = 65;
StarRealmsParser.PILE = 66;
StarRealmsParser.EACH = 67;
StarRealmsParser.PLAY = 68;
StarRealmsParser.FORM = 69;
StarRealmsParser.COST = 70;
StarRealmsParser.DECK = 71;
StarRealmsParser.DREW = 72;
StarRealmsParser.ENDS = 73;
StarRealmsParser.CARD = 74;
StarRealmsParser.MORE2 = 75;
StarRealmsParser.FROM = 76;
StarRealmsParser.YOUR = 77;
StarRealmsParser.ALLY = 78;
StarRealmsParser.HAND = 79;
StarRealmsParser.GAME = 80;
StarRealmsParser.LESS = 81;
StarRealmsParser.MOVING = 82;
StarRealmsParser.INTO = 83;
StarRealmsParser.THIS = 84;
StarRealmsParser.EVENT = 85;
StarRealmsParser.NEW = 86;
StarRealmsParser.ALL = 87;
StarRealmsParser.NOW = 88;
StarRealmsParser.ROW = 89;
StarRealmsParser.THE = 90;
StarRealmsParser.TOP = 91;
StarRealmsParser.FOR = 92;
StarRealmsParser.DID = 93;
StarRealmsParser.AND = 94;
StarRealmsParser.ONE = 95;
StarRealmsParser.ADD = 96;
StarRealmsParser.NOT = 97;
StarRealmsParser.HAS = 98;
StarRealmsParser.WON = 99;
StarRealmsParser.ANY = 100;
StarRealmsParser.IS = 101;
StarRealmsParser.IT = 102;
StarRealmsParser.AT = 103;
StarRealmsParser.IN = 104;
StarRealmsParser.TO = 105;
StarRealmsParser.OF = 106;
StarRealmsParser.UP = 107;
StarRealmsParser.OR = 108;
StarRealmsParser.NO = 109;
StarRealmsParser.ON = 110;
StarRealmsParser.WHITESPACE = 111;
StarRealmsParser.COLOR_START_TAG = 112;
StarRealmsParser.COLOR_END_TAG = 113;
StarRealmsParser.END_GAME_TAG = 114;
StarRealmsParser.DOT = 115;
StarRealmsParser.SEMICOLUM = 116;
StarRealmsParser.COMMA = 117;
StarRealmsParser.INT = 118;
StarRealmsParser.WORD = 119;
StarRealmsParser.SEPARATOR = 120;
StarRealmsParser.INCREMENT = 121;
StarRealmsParser.DECREASE = 122;
StarRealmsParser.NEWLINE = 123;

StarRealmsParser.RULE_battle = 0;
StarRealmsParser.RULE_turn = 1;
StarRealmsParser.RULE_action = 2;
StarRealmsParser.RULE_winStatus = 3;
StarRealmsParser.RULE_startTurnEffect = 4;
StarRealmsParser.RULE_purchaseHero = 5;
StarRealmsParser.RULE_purchaseHeroDetail = 6;
StarRealmsParser.RULE_acquireHeroToTable = 7;
StarRealmsParser.RULE_playHero = 8;
StarRealmsParser.RULE_tradeRowScrap = 9;
StarRealmsParser.RULE_resolveFreeAcquire = 10;
StarRealmsParser.RULE_resolveSelfScrap = 11;
StarRealmsParser.RULE_purchase = 12;
StarRealmsParser.RULE_purchaseSummary = 13;
StarRealmsParser.RULE_purchaseDetail = 14;
StarRealmsParser.RULE_acquireToHand = 15;
StarRealmsParser.RULE_acquireToDeck = 16;
StarRealmsParser.RULE_play = 17;
StarRealmsParser.RULE_playSummary = 18;
StarRealmsParser.RULE_playSingle = 19;
StarRealmsParser.RULE_playDetail = 20;
StarRealmsParser.RULE_newAbility = 21;
StarRealmsParser.RULE_multiScrap = 22;
StarRealmsParser.RULE_multiScrapSummary = 23;
StarRealmsParser.RULE_multiScrapDetail = 24;
StarRealmsParser.RULE_scrapCardEffect = 25;
StarRealmsParser.RULE_simpleScrap = 26;
StarRealmsParser.RULE_moveBaseToDeck = 27;
StarRealmsParser.RULE_freeAcquire = 28;
StarRealmsParser.RULE_completeMission = 29;
StarRealmsParser.RULE_completeMissionSummary = 30;
StarRealmsParser.RULE_completeMissionsDetail = 31;
StarRealmsParser.RULE_selectMissionsReward = 32;
StarRealmsParser.RULE_resolveAllyReward = 33;
StarRealmsParser.RULE_resolveRuleReward = 34;
StarRealmsParser.RULE_resolveDefendReward = 35;
StarRealmsParser.RULE_resolveConvertReward = 36;
StarRealmsParser.RULE_triggeredEvent = 37;
StarRealmsParser.RULE_triggeredEventSummary = 38;
StarRealmsParser.RULE_triggeredEventDetail = 39;
StarRealmsParser.RULE_resolveEvent = 40;
StarRealmsParser.RULE_resolveEventSummary = 41;
StarRealmsParser.RULE_resolveSimple = 42;
StarRealmsParser.RULE_resolveBombardment = 43;
StarRealmsParser.RULE_resolveComet = 44;
StarRealmsParser.RULE_resolveSupplyRun = 45;
StarRealmsParser.RULE_resolvingTacticalMan1 = 46;
StarRealmsParser.RULE_resolvingTacticalMan2 = 47;
StarRealmsParser.RULE_resolveWormhole = 48;
StarRealmsParser.RULE_resolveEventDetail = 49;
StarRealmsParser.RULE_discardFromEvent = 50;
StarRealmsParser.RULE_resolveMobilization = 51;
StarRealmsParser.RULE_moveCardToHand = 52;
StarRealmsParser.RULE_resolveCard = 53;
StarRealmsParser.RULE_attackPlayer = 54;
StarRealmsParser.RULE_attackPlayerSummary = 55;
StarRealmsParser.RULE_newAuthority = 56;
StarRealmsParser.RULE_attackBase = 57;
StarRealmsParser.RULE_attackBaseSummary = 58;
StarRealmsParser.RULE_attackBaseDetail = 59;
StarRealmsParser.RULE_scrapCard = 60;
StarRealmsParser.RULE_scrappingSummary = 61;
StarRealmsParser.RULE_scrappingDetail = 62;
StarRealmsParser.RULE_scrapEffect = 63;
StarRealmsParser.RULE_scrapAction = 64;
StarRealmsParser.RULE_freePurchase = 65;
StarRealmsParser.RULE_moveDiscardToDeck = 66;
StarRealmsParser.RULE_discard = 67;
StarRealmsParser.RULE_discardSummary = 68;
StarRealmsParser.RULE_discardDetail = 69;
StarRealmsParser.RULE_discardAction = 70;
StarRealmsParser.RULE_discardEnd = 71;
StarRealmsParser.RULE_eventRefuseDiscard = 72;
StarRealmsParser.RULE_choseEffect = 73;
StarRealmsParser.RULE_choseEffectSummary = 74;
StarRealmsParser.RULE_discountFactionGambit = 75;
StarRealmsParser.RULE_discardAndDrawSummary = 76;
StarRealmsParser.RULE_choseIncreasePool = 77;
StarRealmsParser.RULE_choseScrapFromDiscard = 78;
StarRealmsParser.RULE_choseDiscardAndIncreasePool = 79;
StarRealmsParser.RULE_choseBlobDraw = 80;
StarRealmsParser.RULE_hiddenBaseGambit = 81;
StarRealmsParser.RULE_midGateEffect = 82;
StarRealmsParser.RULE_choseEffectDetail = 83;
StarRealmsParser.RULE_refreshTradeRow = 84;
StarRealmsParser.RULE_changeHiddenBaseToFaction = 85;
StarRealmsParser.RULE_activatingEffect = 86;
StarRealmsParser.RULE_activatingSummary = 87;
StarRealmsParser.RULE_activatingDetail = 88;
StarRealmsParser.RULE_scrapAndDraw = 89;
StarRealmsParser.RULE_scrap = 90;
StarRealmsParser.RULE_drawAndScrapFromHand = 91;
StarRealmsParser.RULE_resolveHandScrap = 92;
StarRealmsParser.RULE_freeAcquireToTop = 93;
StarRealmsParser.RULE_copyBase = 94;
StarRealmsParser.RULE_copyBaseSummary = 95;
StarRealmsParser.RULE_copyBaseDetail = 96;
StarRealmsParser.RULE_noCopy = 97;
StarRealmsParser.RULE_noCopyBases = 98;
StarRealmsParser.RULE_copyCard = 99;
StarRealmsParser.RULE_copyCardSummary = 100;
StarRealmsParser.RULE_copyCardEffect = 101;
StarRealmsParser.RULE_purchaseToTop = 102;
StarRealmsParser.RULE_scrapSummary = 103;
StarRealmsParser.RULE_scrapDetail = 104;
StarRealmsParser.RULE_resolveHandScrapSummary = 105;
StarRealmsParser.RULE_resolveStealth = 106;
StarRealmsParser.RULE_copyStealth = 107;
StarRealmsParser.RULE_discardAndDraw = 108;
StarRealmsParser.RULE_endPhase = 109;
StarRealmsParser.RULE_endTurn = 110;
StarRealmsParser.RULE_drawPhaseDetail = 111;
StarRealmsParser.RULE_resetCopiedCards = 112;
StarRealmsParser.RULE_refreshIndicators = 113;
StarRealmsParser.RULE_newTurn = 114;
StarRealmsParser.RULE_selectCard = 115;
StarRealmsParser.RULE_replaceGambit = 116;
StarRealmsParser.RULE_noScrap = 117;
StarRealmsParser.RULE_selectDiscard = 118;
StarRealmsParser.RULE_discardForPool = 119;
StarRealmsParser.RULE_discarding = 120;
StarRealmsParser.RULE_drawCardsWithShuffle = 121;
StarRealmsParser.RULE_drawCards = 122;
StarRealmsParser.RULE_newBalanceDetail = 123;
StarRealmsParser.RULE_effect = 124;
StarRealmsParser.RULE_positiveBalance = 125;
StarRealmsParser.RULE_negativeBalance = 126;
StarRealmsParser.RULE_balance = 127;
StarRealmsParser.RULE_destroyBase = 128;
StarRealmsParser.RULE_shuffleCards = 129;
StarRealmsParser.RULE_name = 130;
StarRealmsParser.RULE_card = 131;
StarRealmsParser.RULE_wordPlus = 132;

class BattleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_battle;
    }

	turn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TurnContext);
	    } else {
	        return this.getTypedRuleContext(TurnContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterBattle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitBattle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitBattle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_turn;
    }

	endPhase() {
	    return this.getTypedRuleContext(EndPhaseContext,0);
	};

	winStatus() {
	    return this.getTypedRuleContext(WinStatusContext,0);
	};

	EOF() {
	    return this.getToken(StarRealmsParser.EOF, 0);
	};

	action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionContext);
	    } else {
	        return this.getTypedRuleContext(ActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_action;
    }

	startTurnEffect() {
	    return this.getTypedRuleContext(StartTurnEffectContext,0);
	};

	triggeredEvent() {
	    return this.getTypedRuleContext(TriggeredEventContext,0);
	};

	resolveEvent() {
	    return this.getTypedRuleContext(ResolveEventContext,0);
	};

	purchase() {
	    return this.getTypedRuleContext(PurchaseContext,0);
	};

	purchaseHero() {
	    return this.getTypedRuleContext(PurchaseHeroContext,0);
	};

	play() {
	    return this.getTypedRuleContext(PlayContext,0);
	};

	attackPlayer() {
	    return this.getTypedRuleContext(AttackPlayerContext,0);
	};

	attackBase() {
	    return this.getTypedRuleContext(AttackBaseContext,0);
	};

	scrapCard() {
	    return this.getTypedRuleContext(ScrapCardContext,0);
	};

	discard() {
	    return this.getTypedRuleContext(DiscardContext,0);
	};

	choseEffect() {
	    return this.getTypedRuleContext(ChoseEffectContext,0);
	};

	activatingEffect() {
	    return this.getTypedRuleContext(ActivatingEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinStatusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_winStatus;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	HAS() {
	    return this.getToken(StarRealmsParser.HAS, 0);
	};

	WON() {
	    return this.getToken(StarRealmsParser.WON, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	GAME() {
	    return this.getToken(StarRealmsParser.GAME, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterWinStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitWinStatus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitWinStatus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartTurnEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_startTurnEffect;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterStartTurnEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitStartTurnEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitStartTurnEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseHeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseHero;
    }

	purchaseSummary() {
	    return this.getTypedRuleContext(PurchaseSummaryContext,0);
	};

	purchaseHeroDetail() {
	    return this.getTypedRuleContext(PurchaseHeroDetailContext,0);
	};

	playHero = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlayHeroContext);
	    } else {
	        return this.getTypedRuleContext(PlayHeroContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseHero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseHero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseHero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseHeroDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseHeroDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	acquireHeroToTable() {
	    return this.getTypedRuleContext(AcquireHeroToTableContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseHeroDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseHeroDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseHeroDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireHeroToTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireHeroToTable;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	TABLE() {
	    return this.getToken(StarRealmsParser.TABLE, 0);
	};

	IMAGE() {
	    return this.getToken(StarRealmsParser.IMAGE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireHeroToTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireHeroToTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireHeroToTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayHeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playHero;
    }

	tradeRowScrap() {
	    return this.getTypedRuleContext(TradeRowScrapContext,0);
	};

	resolveFreeAcquire() {
	    return this.getTypedRuleContext(ResolveFreeAcquireContext,0);
	};

	resolveSelfScrap() {
	    return this.getTypedRuleContext(ResolveSelfScrapContext,0);
	};

	multiScrapSummary() {
	    return this.getTypedRuleContext(MultiScrapSummaryContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	multiScrapDetail() {
	    return this.getTypedRuleContext(MultiScrapDetailContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlayHero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlayHero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlayHero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TradeRowScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_tradeRowScrap;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	IN() {
	    return this.getToken(StarRealmsParser.IN, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTradeRowScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTradeRowScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTradeRowScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveFreeAcquireContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveFreeAcquire;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveFreeAcquire(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveFreeAcquire(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveFreeAcquire(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSelfScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSelfScrap;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSelfScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSelfScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSelfScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchase;
    }

	purchaseSummary() {
	    return this.getTypedRuleContext(PurchaseSummaryContext,0);
	};

	purchaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PurchaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(PurchaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseSummary;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireToHandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireToHand;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireToHand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireToHand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireToHand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireToDeck;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_play;
    }

	playSummary() {
	    return this.getTypedRuleContext(PlaySummaryContext,0);
	};

	playDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlayDetailContext);
	    } else {
	        return this.getTypedRuleContext(PlayDetailContext,i);
	    }
	};

	completeMission() {
	    return this.getTypedRuleContext(CompleteMissionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlay(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlay(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlay(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaySummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playSummary;
    }

	PLAY() {
	    return this.getToken(StarRealmsParser.PLAY, 0);
	};

	ALL() {
	    return this.getToken(StarRealmsParser.ALL, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	playSingle() {
	    return this.getTypedRuleContext(PlaySingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlaySummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlaySummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlaySummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaySingleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playSingle;
    }

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlaySingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlaySingle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlaySingle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	newAbility() {
	    return this.getTypedRuleContext(NewAbilityContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	scrapCardEffect() {
	    return this.getTypedRuleContext(ScrapCardEffectContext,0);
	};

	discardForPool() {
	    return this.getTypedRuleContext(DiscardForPoolContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	multiScrap() {
	    return this.getTypedRuleContext(MultiScrapContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	moveBaseToDeck() {
	    return this.getTypedRuleContext(MoveBaseToDeckContext,0);
	};

	freeAcquire() {
	    return this.getTypedRuleContext(FreeAcquireContext,0);
	};

	copyCardSummary() {
	    return this.getTypedRuleContext(CopyCardSummaryContext,0);
	};

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlayDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlayDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlayDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewAbilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newAbility;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	ABILITY() {
	    return this.getToken(StarRealmsParser.ABILITY, 0);
	};

	AVAILABLE() {
	    return this.getToken(StarRealmsParser.AVAILABLE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewAbility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewAbility(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewAbility(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrap;
    }

	multiScrapSummary() {
	    return this.getTypedRuleContext(MultiScrapSummaryContext,0);
	};

	multiScrapDetail() {
	    return this.getTypedRuleContext(MultiScrapDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrapSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrapDetail;
    }

	scrapCardEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapCardEffectContext);
	    } else {
	        return this.getTypedRuleContext(ScrapCardEffectContext,i);
	    }
	};

	simpleScrap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleScrapContext);
	    } else {
	        return this.getTypedRuleContext(SimpleScrapContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrapDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrapDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrapDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapCardEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapCardEffect;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapCardEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapCardEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapCardEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_simpleScrap;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSimpleScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSimpleScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSimpleScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveBaseToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveBaseToDeck;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveBaseToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveBaseToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveBaseToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreeAcquireContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freeAcquire;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreeAcquire(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreeAcquire(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreeAcquire(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMission;
    }

	completeMissionSummary() {
	    return this.getTypedRuleContext(CompleteMissionSummaryContext,0);
	};

	completeMissionsDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompleteMissionsDetailContext);
	    } else {
	        return this.getTypedRuleContext(CompleteMissionsDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMissionSummary;
    }

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMissionSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMissionSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMissionSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionsDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMissionsDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	selectMissionsReward() {
	    return this.getTypedRuleContext(SelectMissionsRewardContext,0);
	};

	winStatus() {
	    return this.getTypedRuleContext(WinStatusContext,0);
	};

	freeAcquire() {
	    return this.getTypedRuleContext(FreeAcquireContext,0);
	};

	resolveAllyReward() {
	    return this.getTypedRuleContext(ResolveAllyRewardContext,0);
	};

	resolveRuleReward() {
	    return this.getTypedRuleContext(ResolveRuleRewardContext,0);
	};

	resolveDefendReward() {
	    return this.getTypedRuleContext(ResolveDefendRewardContext,0);
	};

	resolveConvertReward() {
	    return this.getTypedRuleContext(ResolveConvertRewardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMissionsDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMissionsDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMissionsDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectMissionsRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectMissionsReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ADD);
	    } else {
	        return this.getToken(StarRealmsParser.ADD, i);
	    }
	};


	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectMissionsReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectMissionsReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectMissionsReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveAllyRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveAllyReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveAllyReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveAllyReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveAllyReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveRuleRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveRuleReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveRuleReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveRuleReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveRuleReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveDefendRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveDefendReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveDefendReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveDefendReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveDefendReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveConvertRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveConvertReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.NEWLINE);
	    } else {
	        return this.getToken(StarRealmsParser.NEWLINE, i);
	    }
	};


	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	RETURNING() {
	    return this.getToken(StarRealmsParser.RETURNING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	discard() {
	    return this.getTypedRuleContext(DiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveConvertReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveConvertReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveConvertReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEvent;
    }

	triggeredEventSummary() {
	    return this.getTypedRuleContext(TriggeredEventSummaryContext,0);
	};

	triggeredEventDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggeredEventDetailContext);
	    } else {
	        return this.getTypedRuleContext(TriggeredEventDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEventSummary;
    }

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	EVENT() {
	    return this.getToken(StarRealmsParser.EVENT, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEventSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEventSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEventSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEventDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	resolveEvent() {
	    return this.getTypedRuleContext(ResolveEventContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEventDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEventDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEventDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEvent;
    }

	resolveEventSummary() {
	    return this.getTypedRuleContext(ResolveEventSummaryContext,0);
	};

	resolveEventDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResolveEventDetailContext);
	    } else {
	        return this.getTypedRuleContext(ResolveEventDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEventSummary;
    }

	resolveSimple() {
	    return this.getTypedRuleContext(ResolveSimpleContext,0);
	};

	resolveBombardment() {
	    return this.getTypedRuleContext(ResolveBombardmentContext,0);
	};

	resolveComet() {
	    return this.getTypedRuleContext(ResolveCometContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	resolveSupplyRun() {
	    return this.getTypedRuleContext(ResolveSupplyRunContext,0);
	};

	resolvingTacticalMan1() {
	    return this.getTypedRuleContext(ResolvingTacticalMan1Context,0);
	};

	resolvingTacticalMan2() {
	    return this.getTypedRuleContext(ResolvingTacticalMan2Context,0);
	};

	resolveWormhole() {
	    return this.getTypedRuleContext(ResolveWormholeContext,0);
	};

	resolveCard() {
	    return this.getTypedRuleContext(ResolveCardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEventSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEventSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEventSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSimple;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSimple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSimple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveBombardmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveBombardment;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	DESTROY() {
	    return this.getToken(StarRealmsParser.DESTROY, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	LOSE() {
	    return this.getToken(StarRealmsParser.LOSE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveBombardment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveBombardment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveBombardment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveCometContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveComet;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveComet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveComet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveComet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSupplyRunContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSupplyRun;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	EXPLORER() {
	    return this.getToken(StarRealmsParser.EXPLORER, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.DECK);
	    } else {
	        return this.getToken(StarRealmsParser.DECK, i);
	    }
	};


	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.YOUR);
	    } else {
	        return this.getToken(StarRealmsParser.YOUR, i);
	    }
	};


	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSupplyRun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSupplyRun(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSupplyRun(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolvingTacticalMan1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolvingTacticalMan1;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ADD);
	    } else {
	        return this.getToken(StarRealmsParser.ADD, i);
	    }
	};


	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolvingTacticalMan1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolvingTacticalMan1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolvingTacticalMan1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolvingTacticalMan2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolvingTacticalMan2;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolvingTacticalMan2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolvingTacticalMan2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolvingTacticalMan2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveWormholeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveWormhole;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	INTO() {
	    return this.getToken(StarRealmsParser.INTO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveWormhole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveWormhole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveWormhole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEventDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	discardFromEvent() {
	    return this.getTypedRuleContext(DiscardFromEventContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	scrapSummary() {
	    return this.getTypedRuleContext(ScrapSummaryContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	resolveMobilization() {
	    return this.getTypedRuleContext(ResolveMobilizationContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	selectCard() {
	    return this.getTypedRuleContext(SelectCardContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	moveCardToHand() {
	    return this.getTypedRuleContext(MoveCardToHandContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEventDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEventDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEventDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardFromEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardFromEvent;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardFromEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardFromEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardFromEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveMobilizationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveMobilization;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveMobilization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveMobilization(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveMobilization(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveCardToHandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveCardToHand;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	MOVING() {
	    return this.getToken(StarRealmsParser.MOVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveCardToHand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveCardToHand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveCardToHand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveCard;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackPlayerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackPlayer;
    }

	attackPlayerSummary() {
	    return this.getTypedRuleContext(AttackPlayerSummaryContext,0);
	};

	negativeBalance = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NegativeBalanceContext);
	    } else {
	        return this.getTypedRuleContext(NegativeBalanceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackPlayer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackPlayer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackPlayer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackPlayerSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackPlayerSummary;
    }

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	newAuthority() {
	    return this.getTypedRuleContext(NewAuthorityContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackPlayerSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackPlayerSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackPlayerSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewAuthorityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newAuthority;
    }

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewAuthority(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewAuthority(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewAuthority(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBase;
    }

	attackBaseSummary() {
	    return this.getTypedRuleContext(AttackBaseSummaryContext,0);
	};

	attackBaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttackBaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(AttackBaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBaseSummary;
    }

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBaseDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapCard;
    }

	scrappingSummary() {
	    return this.getTypedRuleContext(ScrappingSummaryContext,0);
	};

	scrappingDetail() {
	    return this.getTypedRuleContext(ScrappingDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrappingSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrappingSummary;
    }

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrappingSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrappingSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrappingSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrappingDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrappingDetail;
    }

	scrapEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapEffectContext);
	    } else {
	        return this.getTypedRuleContext(ScrapEffectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrappingDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrappingDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrappingDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapEffect;
    }

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	freePurchase() {
	    return this.getTypedRuleContext(FreePurchaseContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	newBalanceDetail() {
	    return this.getTypedRuleContext(NewBalanceDetailContext,0);
	};

	replaceGambit() {
	    return this.getTypedRuleContext(ReplaceGambitContext,0);
	};

	scrapSummary() {
	    return this.getTypedRuleContext(ScrapSummaryContext,0);
	};

	moveDiscardToDeck() {
	    return this.getTypedRuleContext(MoveDiscardToDeckContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapAction;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreePurchaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freePurchase;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreePurchase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreePurchase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreePurchase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveDiscardToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveDiscardToDeck;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveDiscardToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveDiscardToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveDiscardToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discard;
    }

	discardSummary() {
	    return this.getTypedRuleContext(DiscardSummaryContext,0);
	};

	discardDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiscardDetailContext);
	    } else {
	        return this.getTypedRuleContext(DiscardDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardDetail;
    }

	discardAction() {
	    return this.getTypedRuleContext(DiscardActionContext,0);
	};

	discardEnd() {
	    return this.getTypedRuleContext(DiscardEndContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAction;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardEndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardEnd;
    }

	NO() {
	    return this.getToken(StarRealmsParser.NO, 0);
	};

	MORE2() {
	    return this.getToken(StarRealmsParser.MORE2, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardEnd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardEnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventRefuseDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_eventRefuseDiscard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEventRefuseDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEventRefuseDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEventRefuseDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffect;
    }

	choseEffectSummary() {
	    return this.getTypedRuleContext(ChoseEffectSummaryContext,0);
	};

	choseEffectDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoseEffectDetailContext);
	    } else {
	        return this.getTypedRuleContext(ChoseEffectDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffectSummary;
    }

	discardAndDrawSummary() {
	    return this.getTypedRuleContext(DiscardAndDrawSummaryContext,0);
	};

	choseIncreasePool() {
	    return this.getTypedRuleContext(ChoseIncreasePoolContext,0);
	};

	choseScrapFromDiscard() {
	    return this.getTypedRuleContext(ChoseScrapFromDiscardContext,0);
	};

	choseDiscardAndIncreasePool() {
	    return this.getTypedRuleContext(ChoseDiscardAndIncreasePoolContext,0);
	};

	discountFactionGambit() {
	    return this.getTypedRuleContext(DiscountFactionGambitContext,0);
	};

	hiddenBaseGambit() {
	    return this.getTypedRuleContext(HiddenBaseGambitContext,0);
	};

	choseBlobDraw() {
	    return this.getTypedRuleContext(ChoseBlobDrawContext,0);
	};

	midGateEffect() {
	    return this.getTypedRuleContext(MidGateEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffectSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffectSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffectSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscountFactionGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discountFactionGambit;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	AT() {
	    return this.getToken(StarRealmsParser.AT, 0);
	};

	ONE() {
	    return this.getToken(StarRealmsParser.ONE, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscountFactionGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscountFactionGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscountFactionGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardAndDrawSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAndDrawSummary;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	AND() {
	    return this.getToken(StarRealmsParser.AND, 0);
	};

	REDRAW() {
	    return this.getToken(StarRealmsParser.REDRAW, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAndDrawSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAndDrawSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAndDrawSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseIncreasePoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseIncreasePool;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseIncreasePool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseIncreasePool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseIncreasePool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseScrapFromDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseScrapFromDiscard;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseScrapFromDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseScrapFromDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseScrapFromDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseDiscardAndIncreasePoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseDiscardAndIncreasePool;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseDiscardAndIncreasePool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseDiscardAndIncreasePool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseDiscardAndIncreasePool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseBlobDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseBlobDraw;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.CARD);
	    } else {
	        return this.getToken(StarRealmsParser.CARD, i);
	    }
	};


	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EVERY() {
	    return this.getToken(StarRealmsParser.EVERY, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	THIS() {
	    return this.getToken(StarRealmsParser.THIS, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseBlobDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseBlobDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseBlobDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HiddenBaseGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_hiddenBaseGambit;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	CREATE() {
	    return this.getToken(StarRealmsParser.CREATE, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterHiddenBaseGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitHiddenBaseGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitHiddenBaseGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MidGateEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_midGateEffect;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	NUMBER() {
	    return this.getToken(StarRealmsParser.NUMBER, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMidGateEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMidGateEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMidGateEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffectDetail;
    }

	selectDiscard() {
	    return this.getTypedRuleContext(SelectDiscardContext,0);
	};

	discardForPool() {
	    return this.getTypedRuleContext(DiscardForPoolContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	refreshTradeRow() {
	    return this.getTypedRuleContext(RefreshTradeRowContext,0);
	};

	changeHiddenBaseToFaction() {
	    return this.getTypedRuleContext(ChangeHiddenBaseToFactionContext,0);
	};

	replaceGambit() {
	    return this.getTypedRuleContext(ReplaceGambitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffectDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffectDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffectDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshTradeRowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_refreshTradeRow;
    }

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	DISCOUNTS() {
	    return this.getToken(StarRealmsParser.DISCOUNTS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterRefreshTradeRow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitRefreshTradeRow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitRefreshTradeRow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeHiddenBaseToFactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_changeHiddenBaseToFaction;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChangeHiddenBaseToFaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChangeHiddenBaseToFaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChangeHiddenBaseToFaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingEffect;
    }

	activatingSummary() {
	    return this.getTypedRuleContext(ActivatingSummaryContext,0);
	};

	activatingDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActivatingDetailContext);
	    } else {
	        return this.getTypedRuleContext(ActivatingDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingSummary;
    }

	ACTIVATING() {
	    return this.getToken(StarRealmsParser.ACTIVATING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingDetail;
    }

	drawAndScrapFromHand() {
	    return this.getTypedRuleContext(DrawAndScrapFromHandContext,0);
	};

	scrapAndDraw() {
	    return this.getTypedRuleContext(ScrapAndDrawContext,0);
	};

	scrap() {
	    return this.getTypedRuleContext(ScrapContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	freeAcquireToTop() {
	    return this.getTypedRuleContext(FreeAcquireToTopContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	noCopy() {
	    return this.getTypedRuleContext(NoCopyContext,0);
	};

	noCopyBases() {
	    return this.getTypedRuleContext(NoCopyBasesContext,0);
	};

	copyCard() {
	    return this.getTypedRuleContext(CopyCardContext,0);
	};

	copyBase() {
	    return this.getTypedRuleContext(CopyBaseContext,0);
	};

	discardAndDraw() {
	    return this.getTypedRuleContext(DiscardAndDrawContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	resolveStealth() {
	    return this.getTypedRuleContext(ResolveStealthContext,0);
	};

	copyStealth() {
	    return this.getTypedRuleContext(CopyStealthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapAndDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapAndDraw;
    }

	scrap() {
	    return this.getTypedRuleContext(ScrapContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapAndDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapAndDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapAndDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrap;
    }

	scrapSummary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapSummaryContext);
	    } else {
	        return this.getTypedRuleContext(ScrapSummaryContext,i);
	    }
	};

	scrapDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapDetailContext);
	    } else {
	        return this.getTypedRuleContext(ScrapDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawAndScrapFromHandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawAndScrapFromHand;
    }

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	resolveHandScrap() {
	    return this.getTypedRuleContext(ResolveHandScrapContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawAndScrapFromHand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawAndScrapFromHand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawAndScrapFromHand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveHandScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveHandScrap;
    }

	resolveHandScrapSummary() {
	    return this.getTypedRuleContext(ResolveHandScrapSummaryContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveHandScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveHandScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveHandScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreeAcquireToTopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freeAcquireToTop;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	purchaseToTop() {
	    return this.getTypedRuleContext(PurchaseToTopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreeAcquireToTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreeAcquireToTop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreeAcquireToTop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBase;
    }

	copyBaseSummary() {
	    return this.getTypedRuleContext(CopyBaseSummaryContext,0);
	};

	copyBaseDetail() {
	    return this.getTypedRuleContext(CopyBaseDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBaseSummary;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COPIED() {
	    return this.getToken(StarRealmsParser.COPIED, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBaseDetail;
    }

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	newBalanceDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NewBalanceDetailContext);
	    } else {
	        return this.getTypedRuleContext(NewBalanceDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoCopyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noCopy;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	COPYING() {
	    return this.getToken(StarRealmsParser.COPYING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIPS() {
	    return this.getToken(StarRealmsParser.SHIPS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoCopy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoCopy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoCopy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoCopyBasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noCopyBases;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	DID() {
	    return this.getToken(StarRealmsParser.DID, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	COPY() {
	    return this.getToken(StarRealmsParser.COPY, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	BASES() {
	    return this.getToken(StarRealmsParser.BASES, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoCopyBases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoCopyBases(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoCopyBases(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCard;
    }

	copyCardSummary() {
	    return this.getTypedRuleContext(CopyCardSummaryContext,0);
	};

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCardSummary;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCardSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCardSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCardSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCardEffect;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardContext);
	    } else {
	        return this.getTypedRuleContext(CardContext,i);
	    }
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCardEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCardEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCardEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseToTopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseToTop;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseToTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseToTop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseToTop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapSummary;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapDetail;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveHandScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveHandScrapSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveHandScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveHandScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveHandScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveStealthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveStealth;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	FEDERATION() {
	    return this.getToken(StarRealmsParser.FEDERATION, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	STAR() {
	    return this.getToken(StarRealmsParser.STAR, 0);
	};

	EMPIRE() {
	    return this.getToken(StarRealmsParser.EMPIRE, 0);
	};

	MACHINE() {
	    return this.getToken(StarRealmsParser.MACHINE, 0);
	};

	CULT() {
	    return this.getToken(StarRealmsParser.CULT, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveStealth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveStealth(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveStealth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyStealthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyStealth;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyStealth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyStealth(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyStealth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardAndDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAndDraw;
    }

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	selectDiscard = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectDiscardContext);
	    } else {
	        return this.getTypedRuleContext(SelectDiscardContext,i);
	    }
	};

	discarding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiscardingContext);
	    } else {
	        return this.getTypedRuleContext(DiscardingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAndDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAndDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAndDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndPhaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_endPhase;
    }

	endTurn() {
	    return this.getTypedRuleContext(EndTurnContext,0);
	};

	newTurn() {
	    return this.getTypedRuleContext(NewTurnContext,0);
	};

	drawPhaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DrawPhaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(DrawPhaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEndPhase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEndPhase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEndPhase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndTurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_endTurn;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ENDS() {
	    return this.getToken(StarRealmsParser.ENDS, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEndTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEndTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEndTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawPhaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawPhaseDetail;
    }

	resetCopiedCards() {
	    return this.getTypedRuleContext(ResetCopiedCardsContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawPhaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawPhaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawPhaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetCopiedCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resetCopiedCards;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	UNALIGNED() {
	    return this.getToken(StarRealmsParser.UNALIGNED, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResetCopiedCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResetCopiedCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResetCopiedCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshIndicatorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_refreshIndicators;
    }

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	ALLY() {
	    return this.getToken(StarRealmsParser.ALLY, 0);
	};

	INDICATORS() {
	    return this.getToken(StarRealmsParser.INDICATORS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterRefreshIndicators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitRefreshIndicators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitRefreshIndicators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewTurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newTurn;
    }

	IT() {
	    return this.getToken(StarRealmsParser.IT, 0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOW() {
	    return this.getToken(StarRealmsParser.NOW, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectCard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplaceGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_replaceGambit;
    }

	REPLACED() {
	    return this.getToken(StarRealmsParser.REPLACED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterReplaceGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitReplaceGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitReplaceGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noScrap;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectDiscard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardForPoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardForPool;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardForPool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardForPool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardForPool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discarding;
    }

	DISCARDED() {
	    return this.getToken(StarRealmsParser.DISCARDED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscarding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscarding(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscarding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawCardsWithShuffleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawCardsWithShuffle;
    }

	shuffleCards() {
	    return this.getTypedRuleContext(ShuffleCardsContext,0);
	};

	drawCards = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DrawCardsContext);
	    } else {
	        return this.getTypedRuleContext(DrawCardsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawCardsWithShuffle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawCardsWithShuffle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawCardsWithShuffle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawCards;
    }

	DREW() {
	    return this.getToken(StarRealmsParser.DREW, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewBalanceDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newBalanceDetail;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	effect() {
	    return this.getTypedRuleContext(EffectContext,0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewBalanceDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewBalanceDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewBalanceDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_effect;
    }

	INCREMENT() {
	    return this.getToken(StarRealmsParser.INCREMENT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PositiveBalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_positiveBalance;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	INCREMENT() {
	    return this.getToken(StarRealmsParser.INCREMENT, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPositiveBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPositiveBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPositiveBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NegativeBalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_negativeBalance;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNegativeBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNegativeBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNegativeBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_balance;
    }

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestroyBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_destroyBase;
    }

	DESTROYED() {
	    return this.getToken(StarRealmsParser.DESTROYED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDestroyBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDestroyBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDestroyBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShuffleCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_shuffleCards;
    }

	SHUFFLED() {
	    return this.getToken(StarRealmsParser.SHUFFLED, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	FORM() {
	    return this.getToken(StarRealmsParser.FORM, 0);
	};

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterShuffleCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitShuffleCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitShuffleCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_name;
    }

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_card;
    }

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WordPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_wordPlus;
    }

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	FEDERATION() {
	    return this.getToken(StarRealmsParser.FEDERATION, 0);
	};

	STAR() {
	    return this.getToken(StarRealmsParser.STAR, 0);
	};

	EXPLORER() {
	    return this.getToken(StarRealmsParser.EXPLORER, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	EMPIRE() {
	    return this.getToken(StarRealmsParser.EMPIRE, 0);
	};

	MACHINE() {
	    return this.getToken(StarRealmsParser.MACHINE, 0);
	};

	CULT() {
	    return this.getToken(StarRealmsParser.CULT, 0);
	};

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	DISCOUNTS() {
	    return this.getToken(StarRealmsParser.DISCOUNTS, 0);
	};

	CREATE() {
	    return this.getToken(StarRealmsParser.CREATE, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	UNALIGNED() {
	    return this.getToken(StarRealmsParser.UNALIGNED, 0);
	};

	ACTIVATING() {
	    return this.getToken(StarRealmsParser.ACTIVATING, 0);
	};

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	RETURNING() {
	    return this.getToken(StarRealmsParser.RETURNING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	SHUFFLED() {
	    return this.getToken(StarRealmsParser.SHUFFLED, 0);
	};

	DISCARDED() {
	    return this.getToken(StarRealmsParser.DISCARDED, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	DESTROYED() {
	    return this.getToken(StarRealmsParser.DESTROYED, 0);
	};

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	INDICATORS() {
	    return this.getToken(StarRealmsParser.INDICATORS, 0);
	};

	MOVING() {
	    return this.getToken(StarRealmsParser.MOVING, 0);
	};

	AVAILABLE() {
	    return this.getToken(StarRealmsParser.AVAILABLE, 0);
	};

	ABILITY() {
	    return this.getToken(StarRealmsParser.ABILITY, 0);
	};

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	IMAGE() {
	    return this.getToken(StarRealmsParser.IMAGE, 0);
	};

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	COPYING() {
	    return this.getToken(StarRealmsParser.COPYING, 0);
	};

	COPIED() {
	    return this.getToken(StarRealmsParser.COPIED, 0);
	};

	REPLACED() {
	    return this.getToken(StarRealmsParser.REPLACED, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	REDRAW() {
	    return this.getToken(StarRealmsParser.REDRAW, 0);
	};

	COPY() {
	    return this.getToken(StarRealmsParser.COPY, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	INTO() {
	    return this.getToken(StarRealmsParser.INTO, 0);
	};

	EVENT() {
	    return this.getToken(StarRealmsParser.EVENT, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	EVERY() {
	    return this.getToken(StarRealmsParser.EVERY, 0);
	};

	NUMBER() {
	    return this.getToken(StarRealmsParser.NUMBER, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	SHIPS() {
	    return this.getToken(StarRealmsParser.SHIPS, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	TABLE() {
	    return this.getToken(StarRealmsParser.TABLE, 0);
	};

	BASES() {
	    return this.getToken(StarRealmsParser.BASES, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	PLAY() {
	    return this.getToken(StarRealmsParser.PLAY, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	FORM() {
	    return this.getToken(StarRealmsParser.FORM, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	DREW() {
	    return this.getToken(StarRealmsParser.DREW, 0);
	};

	DESTROY() {
	    return this.getToken(StarRealmsParser.DESTROY, 0);
	};

	LOSE() {
	    return this.getToken(StarRealmsParser.LOSE, 0);
	};

	ENDS() {
	    return this.getToken(StarRealmsParser.ENDS, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	MORE2() {
	    return this.getToken(StarRealmsParser.MORE2, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	ALLY() {
	    return this.getToken(StarRealmsParser.ALLY, 0);
	};

	THIS() {
	    return this.getToken(StarRealmsParser.THIS, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	GAME() {
	    return this.getToken(StarRealmsParser.GAME, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	ONE() {
	    return this.getToken(StarRealmsParser.ONE, 0);
	};

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	ALL() {
	    return this.getToken(StarRealmsParser.ALL, 0);
	};

	NOW() {
	    return this.getToken(StarRealmsParser.NOW, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	DID() {
	    return this.getToken(StarRealmsParser.DID, 0);
	};

	AND() {
	    return this.getToken(StarRealmsParser.AND, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	HAS() {
	    return this.getToken(StarRealmsParser.HAS, 0);
	};

	WON() {
	    return this.getToken(StarRealmsParser.WON, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	IT() {
	    return this.getToken(StarRealmsParser.IT, 0);
	};

	IN() {
	    return this.getToken(StarRealmsParser.IN, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	NO() {
	    return this.getToken(StarRealmsParser.NO, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterWordPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitWordPlus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitWordPlus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




StarRealmsParser.BattleContext = BattleContext; 
StarRealmsParser.TurnContext = TurnContext; 
StarRealmsParser.ActionContext = ActionContext; 
StarRealmsParser.WinStatusContext = WinStatusContext; 
StarRealmsParser.StartTurnEffectContext = StartTurnEffectContext; 
StarRealmsParser.PurchaseHeroContext = PurchaseHeroContext; 
StarRealmsParser.PurchaseHeroDetailContext = PurchaseHeroDetailContext; 
StarRealmsParser.AcquireHeroToTableContext = AcquireHeroToTableContext; 
StarRealmsParser.PlayHeroContext = PlayHeroContext; 
StarRealmsParser.TradeRowScrapContext = TradeRowScrapContext; 
StarRealmsParser.ResolveFreeAcquireContext = ResolveFreeAcquireContext; 
StarRealmsParser.ResolveSelfScrapContext = ResolveSelfScrapContext; 
StarRealmsParser.PurchaseContext = PurchaseContext; 
StarRealmsParser.PurchaseSummaryContext = PurchaseSummaryContext; 
StarRealmsParser.PurchaseDetailContext = PurchaseDetailContext; 
StarRealmsParser.AcquireToHandContext = AcquireToHandContext; 
StarRealmsParser.AcquireToDeckContext = AcquireToDeckContext; 
StarRealmsParser.PlayContext = PlayContext; 
StarRealmsParser.PlaySummaryContext = PlaySummaryContext; 
StarRealmsParser.PlaySingleContext = PlaySingleContext; 
StarRealmsParser.PlayDetailContext = PlayDetailContext; 
StarRealmsParser.NewAbilityContext = NewAbilityContext; 
StarRealmsParser.MultiScrapContext = MultiScrapContext; 
StarRealmsParser.MultiScrapSummaryContext = MultiScrapSummaryContext; 
StarRealmsParser.MultiScrapDetailContext = MultiScrapDetailContext; 
StarRealmsParser.ScrapCardEffectContext = ScrapCardEffectContext; 
StarRealmsParser.SimpleScrapContext = SimpleScrapContext; 
StarRealmsParser.MoveBaseToDeckContext = MoveBaseToDeckContext; 
StarRealmsParser.FreeAcquireContext = FreeAcquireContext; 
StarRealmsParser.CompleteMissionContext = CompleteMissionContext; 
StarRealmsParser.CompleteMissionSummaryContext = CompleteMissionSummaryContext; 
StarRealmsParser.CompleteMissionsDetailContext = CompleteMissionsDetailContext; 
StarRealmsParser.SelectMissionsRewardContext = SelectMissionsRewardContext; 
StarRealmsParser.ResolveAllyRewardContext = ResolveAllyRewardContext; 
StarRealmsParser.ResolveRuleRewardContext = ResolveRuleRewardContext; 
StarRealmsParser.ResolveDefendRewardContext = ResolveDefendRewardContext; 
StarRealmsParser.ResolveConvertRewardContext = ResolveConvertRewardContext; 
StarRealmsParser.TriggeredEventContext = TriggeredEventContext; 
StarRealmsParser.TriggeredEventSummaryContext = TriggeredEventSummaryContext; 
StarRealmsParser.TriggeredEventDetailContext = TriggeredEventDetailContext; 
StarRealmsParser.ResolveEventContext = ResolveEventContext; 
StarRealmsParser.ResolveEventSummaryContext = ResolveEventSummaryContext; 
StarRealmsParser.ResolveSimpleContext = ResolveSimpleContext; 
StarRealmsParser.ResolveBombardmentContext = ResolveBombardmentContext; 
StarRealmsParser.ResolveCometContext = ResolveCometContext; 
StarRealmsParser.ResolveSupplyRunContext = ResolveSupplyRunContext; 
StarRealmsParser.ResolvingTacticalMan1Context = ResolvingTacticalMan1Context; 
StarRealmsParser.ResolvingTacticalMan2Context = ResolvingTacticalMan2Context; 
StarRealmsParser.ResolveWormholeContext = ResolveWormholeContext; 
StarRealmsParser.ResolveEventDetailContext = ResolveEventDetailContext; 
StarRealmsParser.DiscardFromEventContext = DiscardFromEventContext; 
StarRealmsParser.ResolveMobilizationContext = ResolveMobilizationContext; 
StarRealmsParser.MoveCardToHandContext = MoveCardToHandContext; 
StarRealmsParser.ResolveCardContext = ResolveCardContext; 
StarRealmsParser.AttackPlayerContext = AttackPlayerContext; 
StarRealmsParser.AttackPlayerSummaryContext = AttackPlayerSummaryContext; 
StarRealmsParser.NewAuthorityContext = NewAuthorityContext; 
StarRealmsParser.AttackBaseContext = AttackBaseContext; 
StarRealmsParser.AttackBaseSummaryContext = AttackBaseSummaryContext; 
StarRealmsParser.AttackBaseDetailContext = AttackBaseDetailContext; 
StarRealmsParser.ScrapCardContext = ScrapCardContext; 
StarRealmsParser.ScrappingSummaryContext = ScrappingSummaryContext; 
StarRealmsParser.ScrappingDetailContext = ScrappingDetailContext; 
StarRealmsParser.ScrapEffectContext = ScrapEffectContext; 
StarRealmsParser.ScrapActionContext = ScrapActionContext; 
StarRealmsParser.FreePurchaseContext = FreePurchaseContext; 
StarRealmsParser.MoveDiscardToDeckContext = MoveDiscardToDeckContext; 
StarRealmsParser.DiscardContext = DiscardContext; 
StarRealmsParser.DiscardSummaryContext = DiscardSummaryContext; 
StarRealmsParser.DiscardDetailContext = DiscardDetailContext; 
StarRealmsParser.DiscardActionContext = DiscardActionContext; 
StarRealmsParser.DiscardEndContext = DiscardEndContext; 
StarRealmsParser.EventRefuseDiscardContext = EventRefuseDiscardContext; 
StarRealmsParser.ChoseEffectContext = ChoseEffectContext; 
StarRealmsParser.ChoseEffectSummaryContext = ChoseEffectSummaryContext; 
StarRealmsParser.DiscountFactionGambitContext = DiscountFactionGambitContext; 
StarRealmsParser.DiscardAndDrawSummaryContext = DiscardAndDrawSummaryContext; 
StarRealmsParser.ChoseIncreasePoolContext = ChoseIncreasePoolContext; 
StarRealmsParser.ChoseScrapFromDiscardContext = ChoseScrapFromDiscardContext; 
StarRealmsParser.ChoseDiscardAndIncreasePoolContext = ChoseDiscardAndIncreasePoolContext; 
StarRealmsParser.ChoseBlobDrawContext = ChoseBlobDrawContext; 
StarRealmsParser.HiddenBaseGambitContext = HiddenBaseGambitContext; 
StarRealmsParser.MidGateEffectContext = MidGateEffectContext; 
StarRealmsParser.ChoseEffectDetailContext = ChoseEffectDetailContext; 
StarRealmsParser.RefreshTradeRowContext = RefreshTradeRowContext; 
StarRealmsParser.ChangeHiddenBaseToFactionContext = ChangeHiddenBaseToFactionContext; 
StarRealmsParser.ActivatingEffectContext = ActivatingEffectContext; 
StarRealmsParser.ActivatingSummaryContext = ActivatingSummaryContext; 
StarRealmsParser.ActivatingDetailContext = ActivatingDetailContext; 
StarRealmsParser.ScrapAndDrawContext = ScrapAndDrawContext; 
StarRealmsParser.ScrapContext = ScrapContext; 
StarRealmsParser.DrawAndScrapFromHandContext = DrawAndScrapFromHandContext; 
StarRealmsParser.ResolveHandScrapContext = ResolveHandScrapContext; 
StarRealmsParser.FreeAcquireToTopContext = FreeAcquireToTopContext; 
StarRealmsParser.CopyBaseContext = CopyBaseContext; 
StarRealmsParser.CopyBaseSummaryContext = CopyBaseSummaryContext; 
StarRealmsParser.CopyBaseDetailContext = CopyBaseDetailContext; 
StarRealmsParser.NoCopyContext = NoCopyContext; 
StarRealmsParser.NoCopyBasesContext = NoCopyBasesContext; 
StarRealmsParser.CopyCardContext = CopyCardContext; 
StarRealmsParser.CopyCardSummaryContext = CopyCardSummaryContext; 
StarRealmsParser.CopyCardEffectContext = CopyCardEffectContext; 
StarRealmsParser.PurchaseToTopContext = PurchaseToTopContext; 
StarRealmsParser.ScrapSummaryContext = ScrapSummaryContext; 
StarRealmsParser.ScrapDetailContext = ScrapDetailContext; 
StarRealmsParser.ResolveHandScrapSummaryContext = ResolveHandScrapSummaryContext; 
StarRealmsParser.ResolveStealthContext = ResolveStealthContext; 
StarRealmsParser.CopyStealthContext = CopyStealthContext; 
StarRealmsParser.DiscardAndDrawContext = DiscardAndDrawContext; 
StarRealmsParser.EndPhaseContext = EndPhaseContext; 
StarRealmsParser.EndTurnContext = EndTurnContext; 
StarRealmsParser.DrawPhaseDetailContext = DrawPhaseDetailContext; 
StarRealmsParser.ResetCopiedCardsContext = ResetCopiedCardsContext; 
StarRealmsParser.RefreshIndicatorsContext = RefreshIndicatorsContext; 
StarRealmsParser.NewTurnContext = NewTurnContext; 
StarRealmsParser.SelectCardContext = SelectCardContext; 
StarRealmsParser.ReplaceGambitContext = ReplaceGambitContext; 
StarRealmsParser.NoScrapContext = NoScrapContext; 
StarRealmsParser.SelectDiscardContext = SelectDiscardContext; 
StarRealmsParser.DiscardForPoolContext = DiscardForPoolContext; 
StarRealmsParser.DiscardingContext = DiscardingContext; 
StarRealmsParser.DrawCardsWithShuffleContext = DrawCardsWithShuffleContext; 
StarRealmsParser.DrawCardsContext = DrawCardsContext; 
StarRealmsParser.NewBalanceDetailContext = NewBalanceDetailContext; 
StarRealmsParser.EffectContext = EffectContext; 
StarRealmsParser.PositiveBalanceContext = PositiveBalanceContext; 
StarRealmsParser.NegativeBalanceContext = NegativeBalanceContext; 
StarRealmsParser.BalanceContext = BalanceContext; 
StarRealmsParser.DestroyBaseContext = DestroyBaseContext; 
StarRealmsParser.ShuffleCardsContext = ShuffleCardsContext; 
StarRealmsParser.NameContext = NameContext; 
StarRealmsParser.CardContext = CardContext; 
StarRealmsParser.WordPlusContext = WordPlusContext; 
