// Generated from StarRealms.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import StarRealmsListener from './StarRealmsListener.js';
import StarRealmsVisitor from './StarRealmsVisitor.js';

const serializedATN = [4,1,133,1516,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
1,0,4,0,286,8,0,11,0,12,0,287,1,1,4,1,291,8,1,11,1,12,1,292,1,1,1,1,1,1,
3,1,298,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
314,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,322,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,340,8,6,1,7,1,7,1,7,5,7,345,8,7,
10,7,12,7,348,9,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,374,8,10,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,384,8,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,433,
8,15,10,15,12,15,436,9,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,446,
8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,20,1,20,5,20,466,8,20,10,20,12,20,469,9,20,1,20,3,20,472,
8,20,1,21,1,21,1,21,1,21,3,21,478,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,500,
8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,4,27,527,8,27,
11,27,12,27,528,1,27,4,27,532,8,27,11,27,12,27,533,1,28,1,28,1,28,1,28,3,
28,540,8,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
1,30,1,31,1,31,1,31,1,31,1,31,3,31,560,8,31,1,32,1,32,1,32,1,32,1,32,1,32,
1,33,1,33,5,33,570,8,33,10,33,12,33,573,9,33,1,34,1,34,1,34,1,34,1,34,1,
35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,587,8,35,1,36,1,36,1,36,1,37,1,37,
1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,3,39,606,8,39,
1,39,1,39,5,39,610,8,39,10,39,12,39,613,9,39,1,40,1,40,1,40,1,40,1,41,1,
41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,629,8,41,1,42,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,
45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,1,47,1,47,5,47,699,8,47,10,47,12,47,702,9,47,1,
48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,714,8,48,1,49,1,49,
1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,
55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,3,57,835,8,57,1,58,1,58,1,58,3,58,840,8,58,1,58,1,58,1,58,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
61,1,61,1,61,1,61,1,62,1,62,4,62,867,8,62,11,62,12,62,868,1,63,1,63,1,63,
1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,5,65,887,
8,65,10,65,12,65,890,9,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,899,8,
67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,4,70,909,8,70,11,70,12,70,910,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,925,8,71,
1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,951,8,73,1,74,1,74,
1,74,1,74,1,74,1,74,1,75,1,75,5,75,961,8,75,10,75,12,75,964,9,75,1,76,1,
76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,3,77,978,8,77,1,78,
1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,
80,1,80,3,80,997,8,80,1,80,1,80,1,80,1,80,1,80,3,80,1004,8,80,1,80,1,80,
1,81,1,81,5,81,1010,8,81,10,81,12,81,1013,9,81,1,82,1,82,1,82,1,82,1,82,
1,82,1,82,1,82,1,82,1,82,1,82,3,82,1026,8,82,1,83,1,83,1,83,4,83,1031,8,
83,11,83,12,83,1032,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,86,
1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,
87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,4,91,1116,
8,91,11,91,12,91,1117,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,
93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
1,94,1,94,3,94,1161,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,
96,1,96,4,96,1174,8,96,11,96,12,96,1175,1,96,1,96,1,97,1,97,5,97,1182,8,
97,10,97,12,97,1185,9,97,1,97,3,97,1188,8,97,1,98,1,98,1,98,1,98,1,99,1,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,3,99,1214,8,99,1,100,4,100,1217,8,100,11,100,12,100,
1218,1,100,4,100,1222,8,100,11,100,12,100,1223,1,101,1,101,1,101,1,102,1,
102,1,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,
104,1,105,1,105,5,105,1245,8,105,10,105,12,105,1248,9,105,1,106,1,106,1,
106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,
107,1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,
110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,
111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,1295,8,112,1,112,1,112,1,112,
1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,116,1,116,1,116,1,116,4,116,1329,8,116,11,116,12,116,1330,1,116,
1,116,1,117,4,117,1336,8,117,11,117,12,117,1337,1,117,4,117,1341,8,117,11,
117,12,117,1342,1,117,1,117,1,118,1,118,5,118,1349,8,118,10,118,12,118,1352,
9,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,
1,120,3,120,1366,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,
122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,
124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,
126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,
128,1,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,130,4,
130,1424,8,130,11,130,12,130,1425,1,130,1,130,4,130,1430,8,130,11,130,12,
130,1431,1,130,3,130,1435,8,130,1,130,4,130,1438,8,130,11,130,12,130,1439,
3,130,1442,8,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,3,132,1452,
8,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,134,1,134,1,134,3,134,
1464,8,134,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,3,135,1474,8,
135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,1,
137,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,
138,1,139,4,139,1501,8,139,11,139,12,139,1502,1,140,1,140,3,140,1507,8,140,
1,140,4,140,1510,8,140,11,140,12,140,1511,1,141,1,141,1,141,0,0,142,0,2,
4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
282,0,4,2,0,128,128,132,132,2,0,128,128,131,132,2,0,128,128,131,131,3,0,
6,112,114,120,129,129,1563,0,285,1,0,0,0,2,290,1,0,0,0,4,313,1,0,0,0,6,315,
1,0,0,0,8,323,1,0,0,0,10,331,1,0,0,0,12,339,1,0,0,0,14,341,1,0,0,0,16,349,
1,0,0,0,18,353,1,0,0,0,20,373,1,0,0,0,22,375,1,0,0,0,24,391,1,0,0,0,26,406,
1,0,0,0,28,418,1,0,0,0,30,430,1,0,0,0,32,437,1,0,0,0,34,445,1,0,0,0,36,447,
1,0,0,0,38,453,1,0,0,0,40,463,1,0,0,0,42,477,1,0,0,0,44,479,1,0,0,0,46,499,
1,0,0,0,48,501,1,0,0,0,50,508,1,0,0,0,52,511,1,0,0,0,54,526,1,0,0,0,56,535,
1,0,0,0,58,544,1,0,0,0,60,548,1,0,0,0,62,554,1,0,0,0,64,561,1,0,0,0,66,567,
1,0,0,0,68,574,1,0,0,0,70,586,1,0,0,0,72,588,1,0,0,0,74,591,1,0,0,0,76,598,
1,0,0,0,78,605,1,0,0,0,80,614,1,0,0,0,82,628,1,0,0,0,84,630,1,0,0,0,86,644,
1,0,0,0,88,659,1,0,0,0,90,672,1,0,0,0,92,678,1,0,0,0,94,696,1,0,0,0,96,713,
1,0,0,0,98,715,1,0,0,0,100,718,1,0,0,0,102,730,1,0,0,0,104,744,1,0,0,0,106,
765,1,0,0,0,108,775,1,0,0,0,110,785,1,0,0,0,112,802,1,0,0,0,114,834,1,0,
0,0,116,836,1,0,0,0,118,844,1,0,0,0,120,852,1,0,0,0,122,860,1,0,0,0,124,
864,1,0,0,0,126,870,1,0,0,0,128,877,1,0,0,0,130,884,1,0,0,0,132,891,1,0,
0,0,134,898,1,0,0,0,136,900,1,0,0,0,138,903,1,0,0,0,140,908,1,0,0,0,142,
924,1,0,0,0,144,926,1,0,0,0,146,950,1,0,0,0,148,952,1,0,0,0,150,958,1,0,
0,0,152,965,1,0,0,0,154,977,1,0,0,0,156,979,1,0,0,0,158,985,1,0,0,0,160,
992,1,0,0,0,162,1007,1,0,0,0,164,1025,1,0,0,0,166,1027,1,0,0,0,168,1041,
1,0,0,0,170,1052,1,0,0,0,172,1058,1,0,0,0,174,1067,1,0,0,0,176,1077,1,0,
0,0,178,1090,1,0,0,0,180,1103,1,0,0,0,182,1112,1,0,0,0,184,1123,1,0,0,0,
186,1139,1,0,0,0,188,1160,1,0,0,0,190,1162,1,0,0,0,192,1168,1,0,0,0,194,
1179,1,0,0,0,196,1189,1,0,0,0,198,1213,1,0,0,0,200,1216,1,0,0,0,202,1225,
1,0,0,0,204,1228,1,0,0,0,206,1233,1,0,0,0,208,1236,1,0,0,0,210,1242,1,0,
0,0,212,1249,1,0,0,0,214,1257,1,0,0,0,216,1265,1,0,0,0,218,1268,1,0,0,0,
220,1274,1,0,0,0,222,1280,1,0,0,0,224,1290,1,0,0,0,226,1299,1,0,0,0,228,
1303,1,0,0,0,230,1312,1,0,0,0,232,1324,1,0,0,0,234,1335,1,0,0,0,236,1346,
1,0,0,0,238,1355,1,0,0,0,240,1365,1,0,0,0,242,1367,1,0,0,0,244,1373,1,0,
0,0,246,1378,1,0,0,0,248,1387,1,0,0,0,250,1393,1,0,0,0,252,1397,1,0,0,0,
254,1405,1,0,0,0,256,1411,1,0,0,0,258,1418,1,0,0,0,260,1441,1,0,0,0,262,
1443,1,0,0,0,264,1448,1,0,0,0,266,1457,1,0,0,0,268,1460,1,0,0,0,270,1470,
1,0,0,0,272,1480,1,0,0,0,274,1486,1,0,0,0,276,1490,1,0,0,0,278,1500,1,0,
0,0,280,1509,1,0,0,0,282,1513,1,0,0,0,284,286,3,2,1,0,285,284,1,0,0,0,286,
287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,1,1,0,0,0,289,291,3,4,2,
0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,297,
1,0,0,0,294,298,3,236,118,0,295,298,3,6,3,0,296,298,5,0,0,1,297,294,1,0,
0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,3,1,0,0,0,299,314,3,12,6,0,300,314,
3,66,33,0,301,314,3,94,47,0,302,314,3,30,15,0,303,314,3,14,7,0,304,314,3,
40,20,0,305,314,3,124,62,0,306,314,3,130,65,0,307,314,3,136,68,0,308,314,
3,150,75,0,309,314,3,162,81,0,310,314,3,194,97,0,311,314,3,8,4,0,312,314,
3,10,5,0,313,299,1,0,0,0,313,300,1,0,0,0,313,301,1,0,0,0,313,302,1,0,0,0,
313,303,1,0,0,0,313,304,1,0,0,0,313,305,1,0,0,0,313,306,1,0,0,0,313,307,
1,0,0,0,313,308,1,0,0,0,313,309,1,0,0,0,313,310,1,0,0,0,313,311,1,0,0,0,
313,312,1,0,0,0,314,5,1,0,0,0,315,316,3,278,139,0,316,317,5,107,0,0,317,
318,5,108,0,0,318,319,5,99,0,0,319,321,5,89,0,0,320,322,5,133,0,0,321,320,
1,0,0,0,321,322,1,0,0,0,322,7,1,0,0,0,323,324,3,278,139,0,324,325,5,1,0,
0,325,326,5,128,0,0,326,327,5,2,0,0,327,328,5,31,0,0,328,329,5,133,0,0,329,
330,3,270,135,0,330,9,1,0,0,0,331,332,3,278,139,0,332,333,5,109,0,0,333,
334,5,99,0,0,334,335,5,89,0,0,335,336,5,133,0,0,336,11,1,0,0,0,337,340,3,
268,134,0,338,340,3,260,130,0,339,337,1,0,0,0,339,338,1,0,0,0,340,13,1,0,
0,0,341,342,3,32,16,0,342,346,3,16,8,0,343,345,3,20,10,0,344,343,1,0,0,0,
345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,15,1,0,0,0,348,346,1,
0,0,0,349,350,3,270,135,0,350,351,3,18,9,0,351,352,3,244,122,0,352,17,1,
0,0,0,353,354,5,39,0,0,354,355,3,280,140,0,355,356,5,115,0,0,356,357,5,120,
0,0,357,358,5,130,0,0,358,359,5,48,0,0,359,360,5,45,0,0,360,361,5,133,0,
0,361,19,1,0,0,0,362,374,3,66,33,0,363,374,3,22,11,0,364,374,3,24,12,0,365,
374,3,26,13,0,366,374,3,28,14,0,367,374,3,52,26,0,368,374,3,268,134,0,369,
374,3,260,130,0,370,374,3,54,27,0,371,374,3,58,29,0,372,374,3,258,129,0,
373,362,1,0,0,0,373,363,1,0,0,0,373,364,1,0,0,0,373,365,1,0,0,0,373,366,
1,0,0,0,373,367,1,0,0,0,373,368,1,0,0,0,373,369,1,0,0,0,373,370,1,0,0,0,
373,371,1,0,0,0,373,372,1,0,0,0,374,21,1,0,0,0,375,376,5,34,0,0,376,383,
5,23,0,0,377,378,5,117,0,0,378,379,5,115,0,0,379,380,5,128,0,0,380,384,5,
65,0,0,381,382,5,129,0,0,382,384,5,83,0,0,383,377,1,0,0,0,383,381,1,0,0,
0,384,385,1,0,0,0,385,386,5,114,0,0,386,387,5,99,0,0,387,388,5,8,0,0,388,
389,5,98,0,0,389,390,5,133,0,0,390,23,1,0,0,0,391,392,5,34,0,0,392,393,5,
14,0,0,393,394,5,110,0,0,394,395,5,71,0,0,395,396,5,118,0,0,396,397,5,73,
0,0,397,398,5,116,0,0,398,399,5,79,0,0,399,400,5,128,0,0,400,401,5,118,0,
0,401,402,5,90,0,0,402,403,5,115,0,0,403,404,5,80,0,0,404,405,5,133,0,0,
405,25,1,0,0,0,406,407,5,34,0,0,407,408,5,23,0,0,408,409,5,129,0,0,409,410,
5,83,0,0,410,411,5,85,0,0,411,412,5,86,0,0,412,413,5,88,0,0,413,414,5,118,
0,0,414,415,5,27,0,0,415,416,5,75,0,0,416,417,5,133,0,0,417,27,1,0,0,0,418,
419,5,34,0,0,419,420,5,27,0,0,420,421,5,103,0,0,421,422,5,47,0,0,422,423,
5,117,0,0,423,424,5,115,0,0,424,425,5,128,0,0,425,426,5,83,0,0,426,427,5,
3,0,0,427,428,5,133,0,0,428,429,3,248,124,0,429,29,1,0,0,0,430,434,3,32,
16,0,431,433,3,34,17,0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,
435,1,0,0,0,435,31,1,0,0,0,436,434,1,0,0,0,437,438,5,15,0,0,438,439,3,280,
140,0,439,440,5,133,0,0,440,33,1,0,0,0,441,446,3,270,135,0,442,446,3,36,
18,0,443,446,3,38,19,0,444,446,3,160,80,0,445,441,1,0,0,0,445,442,1,0,0,
0,445,443,1,0,0,0,445,444,1,0,0,0,446,35,1,0,0,0,447,448,5,15,0,0,448,449,
3,280,140,0,449,450,5,115,0,0,450,451,5,88,0,0,451,452,5,133,0,0,452,37,
1,0,0,0,453,454,5,15,0,0,454,455,3,280,140,0,455,456,5,115,0,0,456,457,5,
99,0,0,457,458,5,100,0,0,458,459,5,116,0,0,459,460,5,99,0,0,460,461,5,80,
0,0,461,462,5,133,0,0,462,39,1,0,0,0,463,467,3,42,21,0,464,466,3,46,23,0,
465,464,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,471,
1,0,0,0,469,467,1,0,0,0,470,472,3,78,39,0,471,470,1,0,0,0,471,472,1,0,0,
0,472,41,1,0,0,0,473,474,5,77,0,0,474,475,5,96,0,0,475,478,5,133,0,0,476,
478,3,44,22,0,477,473,1,0,0,0,477,476,1,0,0,0,478,43,1,0,0,0,479,480,5,56,
0,0,480,481,3,280,140,0,481,482,5,133,0,0,482,45,1,0,0,0,483,500,3,268,134,
0,484,500,3,48,24,0,485,500,3,260,130,0,486,500,3,56,28,0,487,500,3,256,
128,0,488,500,3,258,129,0,489,500,3,50,25,0,490,500,3,252,126,0,491,500,
3,58,29,0,492,500,3,274,137,0,493,500,3,60,30,0,494,500,3,62,31,0,495,500,
3,218,109,0,496,500,3,220,110,0,497,500,3,64,32,0,498,500,3,66,33,0,499,
483,1,0,0,0,499,484,1,0,0,0,499,485,1,0,0,0,499,486,1,0,0,0,499,487,1,0,
0,0,499,488,1,0,0,0,499,489,1,0,0,0,499,490,1,0,0,0,499,491,1,0,0,0,499,
492,1,0,0,0,499,493,1,0,0,0,499,494,1,0,0,0,499,495,1,0,0,0,499,496,1,0,
0,0,499,497,1,0,0,0,499,498,1,0,0,0,500,47,1,0,0,0,501,502,3,278,139,0,502,
503,5,130,0,0,503,504,3,280,140,0,504,505,5,38,0,0,505,506,5,36,0,0,506,
507,5,133,0,0,507,49,1,0,0,0,508,509,3,52,26,0,509,510,3,54,27,0,510,51,
1,0,0,0,511,512,5,34,0,0,512,513,5,23,0,0,513,514,5,117,0,0,514,515,5,115,
0,0,515,516,5,128,0,0,516,517,5,65,0,0,517,518,5,85,0,0,518,519,5,86,0,0,
519,520,5,88,0,0,520,521,5,118,0,0,521,522,5,27,0,0,522,523,5,75,0,0,523,
524,5,133,0,0,524,53,1,0,0,0,525,527,3,56,28,0,526,525,1,0,0,0,527,528,1,
0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,532,3,58,29,0,
531,530,1,0,0,0,532,533,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,55,1,
0,0,0,535,536,3,278,139,0,536,537,5,111,0,0,537,539,5,19,0,0,538,540,5,4,
0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,3,280,140,0,
542,543,5,133,0,0,543,57,1,0,0,0,544,545,5,20,0,0,545,546,3,280,140,0,546,
547,5,133,0,0,547,59,1,0,0,0,548,549,3,278,139,0,549,550,5,111,0,0,550,551,
5,24,0,0,551,552,3,280,140,0,552,553,5,133,0,0,553,61,1,0,0,0,554,555,5,
15,0,0,555,556,3,280,140,0,556,559,5,133,0,0,557,560,3,36,18,0,558,560,3,
38,19,0,559,557,1,0,0,0,559,558,1,0,0,0,560,63,1,0,0,0,561,562,5,29,0,0,
562,563,5,8,0,0,563,564,5,98,0,0,564,565,5,28,0,0,565,566,5,133,0,0,566,
65,1,0,0,0,567,571,3,68,34,0,568,570,3,70,35,0,569,568,1,0,0,0,570,573,1,
0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,67,1,0,0,0,573,571,1,0,0,0,574,
575,5,40,0,0,575,576,5,94,0,0,576,577,3,280,140,0,577,578,5,133,0,0,578,
69,1,0,0,0,579,587,3,268,134,0,580,587,3,36,18,0,581,587,3,270,135,0,582,
587,3,144,72,0,583,587,3,260,130,0,584,587,3,94,47,0,585,587,3,244,122,0,
586,579,1,0,0,0,586,580,1,0,0,0,586,581,1,0,0,0,586,582,1,0,0,0,586,583,
1,0,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,71,1,0,0,0,588,589,3,74,37,0,
589,590,3,76,38,0,590,73,1,0,0,0,591,592,5,34,0,0,592,593,5,51,0,0,593,594,
5,53,0,0,594,595,5,115,0,0,595,596,5,41,0,0,596,597,5,133,0,0,597,75,1,0,
0,0,598,599,5,52,0,0,599,600,5,53,0,0,600,601,5,4,0,0,601,602,3,280,140,
0,602,603,5,133,0,0,603,77,1,0,0,0,604,606,3,72,36,0,605,604,1,0,0,0,605,
606,1,0,0,0,606,607,1,0,0,0,607,611,3,80,40,0,608,610,3,82,41,0,609,608,
1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,79,1,0,0,0,613,
611,1,0,0,0,614,615,5,40,0,0,615,616,3,280,140,0,616,617,5,133,0,0,617,81,
1,0,0,0,618,629,3,268,134,0,619,629,3,260,130,0,620,629,3,36,18,0,621,629,
3,84,42,0,622,629,3,6,3,0,623,629,3,62,31,0,624,629,3,86,43,0,625,629,3,
88,44,0,626,629,3,90,45,0,627,629,3,92,46,0,628,618,1,0,0,0,628,619,1,0,
0,0,628,620,1,0,0,0,628,621,1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,0,628,
624,1,0,0,0,628,625,1,0,0,0,628,626,1,0,0,0,628,627,1,0,0,0,629,83,1,0,0,
0,630,631,5,34,0,0,631,632,5,105,0,0,632,633,5,128,0,0,633,634,5,8,0,0,634,
635,5,118,0,0,635,636,5,105,0,0,636,637,5,128,0,0,637,638,5,6,0,0,638,639,
5,118,0,0,639,640,5,105,0,0,640,641,5,128,0,0,641,642,5,7,0,0,642,643,5,
133,0,0,643,85,1,0,0,0,644,645,5,34,0,0,645,646,5,14,0,0,646,647,5,110,0,
0,647,648,5,71,0,0,648,649,5,118,0,0,649,650,5,73,0,0,650,651,5,116,0,0,
651,652,5,79,0,0,652,653,5,128,0,0,653,654,5,118,0,0,654,655,5,90,0,0,655,
656,5,115,0,0,656,657,5,80,0,0,657,658,5,133,0,0,658,87,1,0,0,0,659,660,
5,34,0,0,660,661,5,14,0,0,661,662,5,110,0,0,662,663,5,83,0,0,663,664,5,116,
0,0,664,665,5,79,0,0,665,666,5,128,0,0,666,667,5,118,0,0,667,668,5,90,0,
0,668,669,5,115,0,0,669,670,5,88,0,0,670,671,5,133,0,0,671,89,1,0,0,0,672,
673,5,34,0,0,673,674,5,59,0,0,674,675,5,60,0,0,675,676,5,73,0,0,676,677,
5,133,0,0,677,91,1,0,0,0,678,679,5,34,0,0,679,680,5,59,0,0,680,681,5,128,
0,0,681,682,5,83,0,0,682,683,5,115,0,0,683,684,5,99,0,0,684,685,5,100,0,
0,685,686,5,116,0,0,686,687,5,86,0,0,687,688,5,80,0,0,688,689,5,133,0,0,
689,690,3,278,139,0,690,691,5,111,0,0,691,692,5,37,0,0,692,693,3,280,140,
0,693,694,5,133,0,0,694,695,3,150,75,0,695,93,1,0,0,0,696,700,3,96,48,0,
697,699,3,114,57,0,698,697,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,
1,0,0,0,701,95,1,0,0,0,702,700,1,0,0,0,703,714,3,98,49,0,704,714,3,100,50,
0,705,714,3,102,51,0,706,714,3,270,135,0,707,714,3,104,52,0,708,714,3,106,
53,0,709,714,3,108,54,0,710,714,3,110,55,0,711,714,3,112,56,0,712,714,3,
122,61,0,713,703,1,0,0,0,713,704,1,0,0,0,713,705,1,0,0,0,713,706,1,0,0,0,
713,707,1,0,0,0,713,708,1,0,0,0,713,709,1,0,0,0,713,710,1,0,0,0,713,711,
1,0,0,0,713,712,1,0,0,0,714,97,1,0,0,0,715,716,5,34,0,0,716,717,5,133,0,
0,717,99,1,0,0,0,718,719,5,34,0,0,719,720,3,280,140,0,720,721,5,4,0,0,721,
722,5,68,0,0,722,723,5,129,0,0,723,724,5,73,0,0,724,725,5,118,0,0,725,726,
5,70,0,0,726,727,5,128,0,0,727,728,5,7,0,0,728,729,5,133,0,0,729,101,1,0,
0,0,730,731,5,34,0,0,731,732,5,23,0,0,732,733,5,117,0,0,733,734,5,115,0,
0,734,735,5,128,0,0,735,736,5,65,0,0,736,737,5,85,0,0,737,738,5,86,0,0,738,
739,5,88,0,0,739,740,5,118,0,0,740,741,5,27,0,0,741,742,5,75,0,0,742,743,
5,133,0,0,743,103,1,0,0,0,744,745,5,34,0,0,745,746,5,14,0,0,746,747,5,128,
0,0,747,748,5,50,0,0,748,749,5,115,0,0,749,750,5,80,0,0,750,751,5,118,0,
0,751,752,5,54,0,0,752,753,5,60,0,0,753,754,5,83,0,0,754,755,5,85,0,0,755,
756,5,86,0,0,756,757,5,27,0,0,757,758,5,75,0,0,758,759,5,120,0,0,759,760,
5,100,0,0,760,761,5,116,0,0,761,762,5,86,0,0,762,763,5,80,0,0,763,764,5,
133,0,0,764,105,1,0,0,0,765,766,5,34,0,0,766,767,5,105,0,0,767,768,5,128,
0,0,768,769,5,8,0,0,769,770,5,118,0,0,770,771,5,105,0,0,771,772,5,128,0,
0,772,773,5,6,0,0,773,774,5,133,0,0,774,107,1,0,0,0,775,776,5,34,0,0,776,
777,5,105,0,0,777,778,5,128,0,0,778,779,5,7,0,0,779,780,5,118,0,0,780,781,
5,61,0,0,781,782,5,128,0,0,782,783,5,65,0,0,783,784,5,133,0,0,784,109,1,
0,0,0,785,786,5,34,0,0,786,787,5,54,0,0,787,788,3,282,141,0,788,789,5,83,
0,0,789,790,5,85,0,0,790,791,5,99,0,0,791,792,5,27,0,0,792,793,5,75,0,0,
793,794,5,92,0,0,794,795,5,99,0,0,795,796,5,88,0,0,796,797,5,118,0,0,797,
798,5,61,0,0,798,799,5,128,0,0,799,800,5,65,0,0,800,801,5,133,0,0,801,111,
1,0,0,0,802,803,5,34,0,0,803,804,5,105,0,0,804,805,5,9,0,0,805,806,5,49,
0,0,806,807,5,118,0,0,807,808,5,105,0,0,808,809,5,10,0,0,809,810,5,11,0,
0,810,811,5,49,0,0,811,812,5,118,0,0,812,813,5,105,0,0,813,814,5,12,0,0,
814,815,5,13,0,0,815,816,5,49,0,0,816,817,5,118,0,0,817,818,5,105,0,0,818,
819,5,63,0,0,819,820,5,49,0,0,820,113,1,0,0,0,821,835,3,270,135,0,822,835,
3,268,134,0,823,835,3,116,58,0,824,835,3,258,129,0,825,835,3,224,112,0,826,
835,3,226,113,0,827,835,3,118,59,0,828,835,3,38,19,0,829,835,3,248,124,0,
830,835,3,260,130,0,831,835,3,120,60,0,832,835,3,36,18,0,833,835,3,244,122,
0,834,821,1,0,0,0,834,822,1,0,0,0,834,823,1,0,0,0,834,824,1,0,0,0,834,825,
1,0,0,0,834,826,1,0,0,0,834,827,1,0,0,0,834,828,1,0,0,0,834,829,1,0,0,0,
834,830,1,0,0,0,834,831,1,0,0,0,834,832,1,0,0,0,834,833,1,0,0,0,835,115,
1,0,0,0,836,837,3,278,139,0,837,839,5,32,0,0,838,840,5,4,0,0,839,838,1,0,
0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,842,3,280,140,0,842,843,5,133,0,
0,843,117,1,0,0,0,844,845,3,278,139,0,845,846,5,111,0,0,846,847,5,106,0,
0,847,848,5,24,0,0,848,849,5,110,0,0,849,850,5,65,0,0,850,851,5,133,0,0,
851,119,1,0,0,0,852,853,3,278,139,0,853,854,5,111,0,0,854,855,5,91,0,0,855,
856,3,280,140,0,856,857,5,115,0,0,857,858,5,88,0,0,858,859,5,133,0,0,859,
121,1,0,0,0,860,861,5,34,0,0,861,862,3,280,140,0,862,863,5,133,0,0,863,123,
1,0,0,0,864,866,3,126,63,0,865,867,3,270,135,0,866,865,1,0,0,0,867,868,1,
0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,125,1,0,0,0,870,871,5,18,0,0,871,
872,3,278,139,0,872,873,5,101,0,0,873,874,5,128,0,0,874,875,3,128,64,0,875,
876,5,133,0,0,876,127,1,0,0,0,877,878,5,1,0,0,878,879,5,95,0,0,879,880,3,
282,141,0,880,881,5,4,0,0,881,882,7,0,0,0,882,883,5,2,0,0,883,129,1,0,0,
0,884,888,3,132,66,0,885,887,3,134,67,0,886,885,1,0,0,0,887,890,1,0,0,0,
888,886,1,0,0,0,888,889,1,0,0,0,889,131,1,0,0,0,890,888,1,0,0,0,891,892,
5,18,0,0,892,893,3,280,140,0,893,894,5,133,0,0,894,133,1,0,0,0,895,899,3,
270,135,0,896,899,3,274,137,0,897,899,3,144,72,0,898,895,1,0,0,0,898,896,
1,0,0,0,898,897,1,0,0,0,899,135,1,0,0,0,900,901,3,138,69,0,901,902,3,140,
70,0,902,137,1,0,0,0,903,904,5,19,0,0,904,905,3,280,140,0,905,906,5,133,
0,0,906,139,1,0,0,0,907,909,3,142,71,0,908,907,1,0,0,0,909,910,1,0,0,0,910,
908,1,0,0,0,910,911,1,0,0,0,911,141,1,0,0,0,912,925,3,144,72,0,913,925,3,
260,130,0,914,915,3,146,73,0,915,916,3,144,72,0,916,925,1,0,0,0,917,925,
3,274,137,0,918,925,3,264,132,0,919,925,3,250,125,0,920,925,3,224,112,0,
921,925,3,148,74,0,922,925,3,244,122,0,923,925,3,258,129,0,924,912,1,0,0,
0,924,913,1,0,0,0,924,914,1,0,0,0,924,917,1,0,0,0,924,918,1,0,0,0,924,919,
1,0,0,0,924,920,1,0,0,0,924,921,1,0,0,0,924,922,1,0,0,0,924,923,1,0,0,0,
925,143,1,0,0,0,926,927,5,20,0,0,927,928,3,280,140,0,928,929,5,133,0,0,929,
145,1,0,0,0,930,931,5,15,0,0,931,932,3,280,140,0,932,933,5,115,0,0,933,934,
5,88,0,0,934,935,5,133,0,0,935,951,1,0,0,0,936,937,5,15,0,0,937,938,3,280,
140,0,938,939,5,115,0,0,939,940,5,99,0,0,940,941,5,100,0,0,941,942,5,116,
0,0,942,943,5,99,0,0,943,944,5,80,0,0,944,945,5,133,0,0,945,951,1,0,0,0,
946,947,5,15,0,0,947,948,3,280,140,0,948,949,5,133,0,0,949,951,1,0,0,0,950,
930,1,0,0,0,950,936,1,0,0,0,950,946,1,0,0,0,951,147,1,0,0,0,952,953,3,278,
139,0,953,954,5,111,0,0,954,955,5,24,0,0,955,956,3,280,140,0,956,957,5,133,
0,0,957,149,1,0,0,0,958,962,3,152,76,0,959,961,3,154,77,0,960,959,1,0,0,
0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,151,1,0,0,0,964,962,
1,0,0,0,965,966,5,34,0,0,966,967,5,27,0,0,967,968,5,128,0,0,968,969,5,65,
0,0,969,970,5,133,0,0,970,153,1,0,0,0,971,978,3,156,78,0,972,978,3,158,79,
0,973,978,3,258,129,0,974,978,3,160,80,0,975,978,3,270,135,0,976,978,3,190,
95,0,977,971,1,0,0,0,977,972,1,0,0,0,977,973,1,0,0,0,977,974,1,0,0,0,977,
975,1,0,0,0,977,976,1,0,0,0,978,155,1,0,0,0,979,980,3,278,139,0,980,981,
5,111,0,0,981,982,5,32,0,0,982,983,3,280,140,0,983,984,5,133,0,0,984,157,
1,0,0,0,985,986,5,119,0,0,986,987,5,84,0,0,987,988,5,65,0,0,988,989,5,115,
0,0,989,990,5,27,0,0,990,991,5,133,0,0,991,159,1,0,0,0,992,996,3,278,139,
0,993,994,5,1,0,0,994,995,5,128,0,0,995,997,5,2,0,0,996,993,1,0,0,0,996,
997,1,0,0,0,997,998,1,0,0,0,998,999,5,111,0,0,999,1000,5,106,0,0,1000,1003,
5,32,0,0,1001,1002,5,110,0,0,1002,1004,5,65,0,0,1003,1001,1,0,0,0,1003,1004,
1,0,0,0,1004,1005,1,0,0,0,1005,1006,5,133,0,0,1006,161,1,0,0,0,1007,1011,
3,164,82,0,1008,1010,3,188,94,0,1009,1008,1,0,0,0,1010,1013,1,0,0,0,1011,
1009,1,0,0,0,1011,1012,1,0,0,0,1012,163,1,0,0,0,1013,1011,1,0,0,0,1014,1026,
3,168,84,0,1015,1026,3,170,85,0,1016,1026,3,174,87,0,1017,1026,3,176,88,
0,1018,1026,3,180,90,0,1019,1026,3,166,83,0,1020,1026,3,182,91,0,1021,1026,
3,178,89,0,1022,1026,3,184,92,0,1023,1026,3,172,86,0,1024,1026,3,186,93,
0,1025,1014,1,0,0,0,1025,1015,1,0,0,0,1025,1016,1,0,0,0,1025,1017,1,0,0,
0,1025,1018,1,0,0,0,1025,1019,1,0,0,0,1025,1020,1,0,0,0,1025,1021,1,0,0,
0,1025,1022,1,0,0,0,1025,1023,1,0,0,0,1025,1024,1,0,0,0,1026,165,1,0,0,0,
1027,1028,5,66,0,0,1028,1030,5,14,0,0,1029,1031,3,282,141,0,1030,1029,1,
0,0,0,1031,1032,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,
0,0,0,1034,1035,5,65,0,0,1035,1036,5,113,0,0,1036,1037,5,104,0,0,1037,1038,
5,90,0,0,1038,1039,5,8,0,0,1039,1040,5,133,0,0,1040,167,1,0,0,0,1041,1042,
5,66,0,0,1042,1043,5,27,0,0,1043,1044,5,103,0,0,1044,1045,5,47,0,0,1045,
1046,5,117,0,0,1046,1047,5,115,0,0,1047,1048,5,128,0,0,1048,1049,5,83,0,
0,1049,1050,5,3,0,0,1050,1051,5,133,0,0,1051,169,1,0,0,0,1052,1053,5,66,
0,0,1053,1054,5,105,0,0,1054,1055,5,128,0,0,1055,1056,3,282,141,0,1056,1057,
5,133,0,0,1057,171,1,0,0,0,1058,1059,5,66,0,0,1059,1060,5,30,0,0,1060,1061,
5,83,0,0,1061,1062,5,115,0,0,1062,1063,5,100,0,0,1063,1064,5,116,0,0,1064,
1065,5,80,0,0,1065,1066,5,133,0,0,1066,173,1,0,0,0,1067,1068,5,66,0,0,1068,
1069,5,23,0,0,1069,1070,5,129,0,0,1070,1071,5,83,0,0,1071,1072,5,85,0,0,
1072,1073,5,86,0,0,1073,1074,5,27,0,0,1074,1075,5,75,0,0,1075,1076,5,133,
0,0,1076,175,1,0,0,0,1077,1078,5,66,0,0,1078,1079,5,27,0,0,1079,1080,5,117,
0,0,1080,1081,5,115,0,0,1081,1082,5,128,0,0,1082,1083,5,65,0,0,1083,1084,
5,46,0,0,1084,1085,5,128,0,0,1085,1086,3,282,141,0,1086,1087,5,101,0,0,1087,
1088,5,76,0,0,1088,1089,5,133,0,0,1089,177,1,0,0,0,1090,1091,5,66,0,0,1091,
1092,5,61,0,0,1092,1093,5,129,0,0,1093,1094,5,83,0,0,1094,1095,5,101,0,0,
1095,1096,5,62,0,0,1096,1097,5,63,0,0,1097,1098,5,83,0,0,1098,1099,5,56,
0,0,1099,1100,5,93,0,0,1100,1101,5,67,0,0,1101,1102,5,133,0,0,1102,179,1,
0,0,0,1103,1104,5,66,0,0,1104,1105,5,61,0,0,1105,1106,5,128,0,0,1106,1107,
5,65,0,0,1107,1108,5,27,0,0,1108,1109,5,128,0,0,1109,1110,5,65,0,0,1110,
1111,5,133,0,0,1111,181,1,0,0,0,1112,1113,5,66,0,0,1113,1115,5,55,0,0,1114,
1116,3,282,141,0,1115,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1115,1,0,0,0,1117,
1118,1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,57,0,0,1120,1121,5,58,0,0,1121,
1122,5,133,0,0,1122,183,1,0,0,0,1123,1124,5,66,0,0,1124,1125,5,105,0,0,1125,
1126,5,128,0,0,1126,1127,3,282,141,0,1127,1128,5,27,0,0,1128,1129,5,110,
0,0,1129,1130,5,69,0,0,1130,1131,5,116,0,0,1131,1132,5,65,0,0,1132,1133,
5,46,0,0,1133,1134,5,128,0,0,1134,1135,3,282,141,0,1135,1136,5,101,0,0,1136,
1137,5,76,0,0,1137,1138,5,133,0,0,1138,185,1,0,0,0,1139,1140,5,66,0,0,1140,
1141,5,105,0,0,1141,1142,5,128,0,0,1142,1143,3,282,141,0,1143,1144,5,21,
0,0,1144,1145,5,22,0,0,1145,1146,5,128,0,0,1146,1147,5,65,0,0,1147,1148,
5,133,0,0,1148,187,1,0,0,0,1149,1161,3,254,127,0,1150,1161,3,256,128,0,1151,
1161,3,258,129,0,1152,1161,3,260,130,0,1153,1161,3,252,126,0,1154,1161,3,
58,29,0,1155,1161,3,268,134,0,1156,1161,3,190,95,0,1157,1161,3,192,96,0,
1158,1161,3,250,125,0,1159,1161,3,200,100,0,1160,1149,1,0,0,0,1160,1150,
1,0,0,0,1160,1151,1,0,0,0,1160,1152,1,0,0,0,1160,1153,1,0,0,0,1160,1154,
1,0,0,0,1160,1155,1,0,0,0,1160,1156,1,0,0,0,1160,1157,1,0,0,0,1160,1158,
1,0,0,0,1160,1159,1,0,0,0,1161,189,1,0,0,0,1162,1163,5,29,0,0,1163,1164,
5,8,0,0,1164,1165,5,98,0,0,1165,1166,5,28,0,0,1166,1167,5,133,0,0,1167,191,
1,0,0,0,1168,1169,5,39,0,0,1169,1170,5,57,0,0,1170,1171,5,58,0,0,1171,1173,
5,115,0,0,1172,1174,3,282,141,0,1173,1172,1,0,0,0,1174,1175,1,0,0,0,1175,
1173,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,5,133,0,0,1178,
193,1,0,0,0,1179,1183,3,196,98,0,1180,1182,3,198,99,0,1181,1180,1,0,0,0,
1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1187,1,0,0,0,
1185,1183,1,0,0,0,1186,1188,3,78,39,0,1187,1186,1,0,0,0,1187,1188,1,0,0,
0,1188,195,1,0,0,0,1189,1190,5,17,0,0,1190,1191,3,280,140,0,1191,1192,5,
133,0,0,1192,197,1,0,0,0,1193,1214,3,202,101,0,1194,1214,3,260,130,0,1195,
1214,3,224,112,0,1196,1214,3,252,126,0,1197,1214,3,204,102,0,1198,1214,3,
274,137,0,1199,1214,3,226,113,0,1200,1214,3,212,106,0,1201,1214,3,214,107,
0,1202,1214,3,216,108,0,1203,1214,3,206,103,0,1204,1214,3,234,117,0,1205,
1214,3,268,134,0,1206,1214,3,270,135,0,1207,1214,3,230,115,0,1208,1214,3,
232,116,0,1209,1214,3,248,124,0,1210,1214,3,258,129,0,1211,1214,3,158,79,
0,1212,1214,3,160,80,0,1213,1193,1,0,0,0,1213,1194,1,0,0,0,1213,1195,1,0,
0,0,1213,1196,1,0,0,0,1213,1197,1,0,0,0,1213,1198,1,0,0,0,1213,1199,1,0,
0,0,1213,1200,1,0,0,0,1213,1201,1,0,0,0,1213,1202,1,0,0,0,1213,1203,1,0,
0,0,1213,1204,1,0,0,0,1213,1205,1,0,0,0,1213,1206,1,0,0,0,1213,1207,1,0,
0,0,1213,1208,1,0,0,0,1213,1209,1,0,0,0,1213,1210,1,0,0,0,1213,1211,1,0,
0,0,1213,1212,1,0,0,0,1214,199,1,0,0,0,1215,1217,3,224,112,0,1216,1215,1,
0,0,0,1217,1218,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,
0,0,0,1220,1222,3,226,113,0,1221,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1221,
1,0,0,0,1223,1224,1,0,0,0,1224,201,1,0,0,0,1225,1226,3,228,114,0,1226,1227,
3,226,113,0,1227,203,1,0,0,0,1228,1229,5,15,0,0,1229,1230,3,280,140,0,1230,
1231,5,133,0,0,1231,1232,3,222,111,0,1232,205,1,0,0,0,1233,1234,3,208,104,
0,1234,1235,3,210,105,0,1235,207,1,0,0,0,1236,1237,3,278,139,0,1237,1238,
5,44,0,0,1238,1239,5,73,0,0,1239,1240,3,278,139,0,1240,1241,5,133,0,0,1241,
209,1,0,0,0,1242,1246,3,220,110,0,1243,1245,3,264,132,0,1244,1243,1,0,0,
0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,211,1,0,0,0,
1248,1246,1,0,0,0,1249,1250,3,278,139,0,1250,1251,5,111,0,0,1251,1252,5,
106,0,0,1252,1253,5,43,0,0,1253,1254,5,110,0,0,1254,1255,5,72,0,0,1255,1256,
5,133,0,0,1256,213,1,0,0,0,1257,1258,3,278,139,0,1258,1259,5,102,0,0,1259,
1260,5,106,0,0,1260,1261,5,64,0,0,1261,1262,5,110,0,0,1262,1263,5,74,0,0,
1263,1264,5,133,0,0,1264,215,1,0,0,0,1265,1266,3,218,109,0,1266,1267,3,220,
110,0,1267,217,1,0,0,0,1268,1269,3,278,139,0,1269,1270,5,24,0,0,1270,1271,
5,71,0,0,1271,1272,3,280,140,0,1272,1273,5,133,0,0,1273,219,1,0,0,0,1274,
1275,5,39,0,0,1275,1276,3,280,140,0,1276,1277,5,115,0,0,1277,1278,3,280,
140,0,1278,1279,5,133,0,0,1279,221,1,0,0,0,1280,1281,5,15,0,0,1281,1282,
3,280,140,0,1282,1283,5,115,0,0,1283,1284,5,99,0,0,1284,1285,5,100,0,0,1285,
1286,5,116,0,0,1286,1287,5,99,0,0,1287,1288,5,80,0,0,1288,1289,5,133,0,0,
1289,223,1,0,0,0,1290,1291,3,278,139,0,1291,1292,5,111,0,0,1292,1294,5,19,
0,0,1293,1295,5,4,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,
0,0,1296,1297,3,280,140,0,1297,1298,5,133,0,0,1298,225,1,0,0,0,1299,1300,
5,20,0,0,1300,1301,3,280,140,0,1301,1302,5,133,0,0,1302,227,1,0,0,0,1303,
1304,5,34,0,0,1304,1305,5,23,0,0,1305,1306,5,129,0,0,1306,1307,5,83,0,0,
1307,1308,5,85,0,0,1308,1309,5,86,0,0,1309,1310,5,88,0,0,1310,1311,5,133,
0,0,1311,229,1,0,0,0,1312,1313,5,34,0,0,1313,1314,5,9,0,0,1314,1315,5,118,
0,0,1315,1316,5,10,0,0,1316,1317,5,11,0,0,1317,1318,5,118,0,0,1318,1319,
5,12,0,0,1319,1320,5,13,0,0,1320,1321,5,118,0,0,1321,1322,5,63,0,0,1322,
1323,5,133,0,0,1323,231,1,0,0,0,1324,1325,5,39,0,0,1325,1326,3,280,140,0,
1326,1328,5,115,0,0,1327,1329,3,282,141,0,1328,1327,1,0,0,0,1329,1330,1,
0,0,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,1333,5,
133,0,0,1333,233,1,0,0,0,1334,1336,3,254,127,0,1335,1334,1,0,0,0,1336,1337,
1,0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1340,1,0,0,0,1339,1341,
3,258,129,0,1340,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1340,1,0,0,0,1342,1343,
1,0,0,0,1343,1344,1,0,0,0,1344,1345,3,260,130,0,1345,235,1,0,0,0,1346,1350,
3,238,119,0,1347,1349,3,240,120,0,1348,1347,1,0,0,0,1349,1352,1,0,0,0,1350,
1348,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1350,1,0,0,0,1353,
1354,3,246,123,0,1354,237,1,0,0,0,1355,1356,3,278,139,0,1356,1357,5,82,0,
0,1357,1358,5,67,0,0,1358,1359,5,128,0,0,1359,1360,5,133,0,0,1360,239,1,
0,0,0,1361,1366,3,242,121,0,1362,1366,3,260,130,0,1363,1366,3,244,122,0,
1364,1366,3,160,80,0,1365,1361,1,0,0,0,1365,1362,1,0,0,0,1365,1363,1,0,0,
0,1365,1364,1,0,0,0,1366,241,1,0,0,0,1367,1368,5,39,0,0,1368,1369,3,280,
140,0,1369,1370,5,115,0,0,1370,1371,5,16,0,0,1371,1372,5,133,0,0,1372,243,
1,0,0,0,1373,1374,5,29,0,0,1374,1375,5,87,0,0,1375,1376,5,35,0,0,1376,1377,
5,133,0,0,1377,245,1,0,0,0,1378,1379,5,112,0,0,1379,1380,5,111,0,0,1380,
1381,5,97,0,0,1381,1382,3,278,139,0,1382,1383,5,5,0,0,1383,1384,5,67,0,0,
1384,1385,5,128,0,0,1385,1386,5,133,0,0,1386,247,1,0,0,0,1387,1388,3,278,
139,0,1388,1389,5,111,0,0,1389,1390,5,24,0,0,1390,1391,3,280,140,0,1391,
1392,5,133,0,0,1392,249,1,0,0,0,1393,1394,5,42,0,0,1394,1395,3,280,140,0,
1395,1396,5,133,0,0,1396,251,1,0,0,0,1397,1398,3,278,139,0,1398,1399,5,111,
0,0,1399,1400,5,106,0,0,1400,1401,5,19,0,0,1401,1402,5,110,0,0,1402,1403,
5,65,0,0,1403,1404,5,133,0,0,1404,253,1,0,0,0,1405,1406,3,278,139,0,1406,
1407,5,111,0,0,1407,1408,5,24,0,0,1408,1409,3,280,140,0,1409,1410,5,133,
0,0,1410,255,1,0,0,0,1411,1412,3,278,139,0,1412,1413,5,111,0,0,1413,1414,
5,32,0,0,1414,1415,5,101,0,0,1415,1416,3,282,141,0,1416,1417,5,133,0,0,1417,
257,1,0,0,0,1418,1419,5,26,0,0,1419,1420,3,280,140,0,1420,1421,5,133,0,0,
1421,259,1,0,0,0,1422,1424,3,262,131,0,1423,1422,1,0,0,0,1424,1425,1,0,0,
0,1425,1423,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1429,3,276,
138,0,1428,1430,3,262,131,0,1429,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1429,
1,0,0,0,1431,1432,1,0,0,0,1432,1442,1,0,0,0,1433,1435,3,276,138,0,1434,1433,
1,0,0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,0,1436,1438,3,262,131,0,1437,1436,
1,0,0,0,1438,1439,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,1442,
1,0,0,0,1441,1423,1,0,0,0,1441,1434,1,0,0,0,1442,261,1,0,0,0,1443,1444,5,
81,0,0,1444,1445,5,128,0,0,1445,1446,5,65,0,0,1446,1447,5,133,0,0,1447,263,
1,0,0,0,1448,1449,3,278,139,0,1449,1451,5,130,0,0,1450,1452,3,280,140,0,
1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,1454,3,266,133,
0,1454,1455,3,272,136,0,1455,1456,5,133,0,0,1456,265,1,0,0,0,1457,1458,7,
1,0,0,1458,1459,3,282,141,0,1459,267,1,0,0,0,1460,1461,3,278,139,0,1461,
1463,5,130,0,0,1462,1464,3,280,140,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,
1464,1465,1,0,0,0,1465,1466,7,2,0,0,1466,1467,3,282,141,0,1467,1468,3,272,
136,0,1468,1469,5,133,0,0,1469,269,1,0,0,0,1470,1471,3,278,139,0,1471,1473,
5,130,0,0,1472,1474,3,280,140,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,
1475,1,0,0,0,1475,1476,5,132,0,0,1476,1477,3,282,141,0,1477,1478,3,272,136,
0,1478,1479,5,133,0,0,1479,271,1,0,0,0,1480,1481,5,1,0,0,1481,1482,3,282,
141,0,1482,1483,5,4,0,0,1483,1484,7,0,0,0,1484,1485,5,2,0,0,1485,273,1,0,
0,0,1486,1487,5,33,0,0,1487,1488,3,280,140,0,1488,1489,5,133,0,0,1489,275,
1,0,0,0,1490,1491,5,25,0,0,1491,1492,5,27,0,0,1492,1493,5,75,0,0,1493,1494,
5,115,0,0,1494,1495,5,78,0,0,1495,1496,5,95,0,0,1496,1497,5,80,0,0,1497,
1498,5,133,0,0,1498,277,1,0,0,0,1499,1501,3,282,141,0,1500,1499,1,0,0,0,
1501,1502,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,279,1,0,0,0,1504,
1506,3,282,141,0,1505,1507,5,5,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,
1510,1,0,0,0,1508,1510,5,128,0,0,1509,1504,1,0,0,0,1509,1508,1,0,0,0,1510,
1511,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,281,1,0,0,0,1513,1514,
7,3,0,0,1514,283,1,0,0,0,68,287,292,297,313,321,339,346,373,383,434,445,
467,471,477,499,528,533,539,559,571,586,605,611,628,700,713,834,839,868,
888,898,910,924,950,962,977,996,1003,1011,1025,1032,1117,1160,1175,1183,
1187,1213,1218,1223,1246,1294,1330,1337,1342,1350,1365,1425,1431,1434,1439,
1441,1451,1463,1473,1502,1506,1509,1511];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class StarRealmsParser extends antlr4.Parser {

    static grammarFileName = "StarRealms.g4";
    static literalNames = [ null, "'('", "')'", "'(s)'", "':'", "''s'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'</color>'", 
                            "'==='", "'.'", "';'", "','" ];
    static symbolicNames = [ null, null, null, null, null, null, "COMBAT", 
                             "AUTHORITY", "TRADE", "FEDERATION", "STAR", 
                             "EMPIRE", "MACHINE", "CULT", "ACQUIRE", "ACQUIRED", 
                             "UNALIGNED", "ACTIVATING", "ATTACKED", "SCRAPPING", 
                             "SCRAPPED", "OPPONENT", "DISCARDS", "SCRAP", 
                             "SELECTING", "SHUFFLED", "DISCARDED", "DISCARD", 
                             "DISCOUNTS", "REFRESH", "NEXT", "CONCEDED", 
                             "DISCARDING", "DESTROYED", "RESOLVING", "INDICATORS", 
                             "AVAILABLE", "RETURNING", "ABILITY", "CHANGED", 
                             "REVEALED", "COMPLETE", "REPLACED", "COPYING", 
                             "COPIED", "IMAGE", "RECEIVE", "REDRAW", "TABLE", 
                             "ALLIES", "EXPLORER", "SELECT", "SELECTED", 
                             "MISSION", "PUT", "CREATE", "PLAYED", "SECRET", 
                             "OUTPOST", "RETURN", "TARGET", "DRAW", "EVERY", 
                             "BLOB", "COPY", "CARDS", "CHOSE", "TURN", "DESTROY", 
                             "NUMBER", "LOSE", "SHIP", "SHIPS", "BASE", 
                             "BASES", "PILE", "EACH", "PLAY", "FORM", "COST", 
                             "DECK", "DREW", "ENDS", "CARD", "MORE2", "FROM", 
                             "YOUR", "ALLY", "HAND", "GAME", "LESS", "MOVING", 
                             "INTO", "THIS", "EVENT", "NEW", "ALL", "NOW", 
                             "ROW", "THE", "TOP", "FOR", "DID", "AND", "ONE", 
                             "ADD", "NOT", "HAS", "WON", "WINS", "ANY", 
                             "IS", "IT", "AT", "IN", "TO", "OF", "UP", "OR", 
                             "NO", "ON", "WHITESPACE", "COLOR_START_TAG", 
                             "COLOR_END_TAG", "END_GAME_TAG", "DOT", "SEMICOLUM", 
                             "COMMA", "INT", "WORD", "SEPARATOR", "INCREMENT", 
                             "DECREASE", "NEWLINE" ];
    static ruleNames = [ "battle", "turn", "action", "winStatus", "concede", 
                         "timeout", "startTurnEffect", "purchaseHero", "purchaseHeroDetail", 
                         "acquireHeroToTable", "playHero", "tradeRowScrap", 
                         "resolveFreeAcquire", "resolveSelfScrap", "resolveDiscardAndDraw", 
                         "purchase", "purchaseSummary", "purchaseDetail", 
                         "acquireToHand", "acquireToDeck", "play", "playSummary", 
                         "playSingle", "playDetail", "newAbility", "multiScrap", 
                         "multiScrapSummary", "multiScrapDetail", "scrapCardEffect", 
                         "simpleScrap", "moveBaseToDeck", "freeAcquire", 
                         "refreshCost", "triggeredEvent", "triggeredEventSummary", 
                         "triggeredEventDetail", "selectMission", "resolveSelectMission", 
                         "actionSelectMission", "completeMission", "completeMissionSummary", 
                         "completeMissionsDetail", "selectMissionsReward", 
                         "resolveAllyReward", "resolveRuleReward", "resolveDefendReward", 
                         "resolveConvertReward", "resolveEvent", "resolveEventSummary", 
                         "resolveSimple", "resolveBombardment", "resolveComet", 
                         "resolveSupplyRun", "resolvingTacticalMan1", "resolvingTacticalMan2", 
                         "resolveWormhole", "resolveSplinterGambit", "resolveEventDetail", 
                         "discardFromEvent", "resolveMobilization", "moveCardToHand", 
                         "resolveCard", "attackPlayer", "attackPlayerSummary", 
                         "newAuthority", "attackBase", "attackBaseSummary", 
                         "attackBaseDetail", "scrapCard", "scrappingSummary", 
                         "scrappingDetail", "scrapEffect", "scrapAction", 
                         "freePurchase", "moveDiscardToDeck", "discard", 
                         "discardSummary", "discardDetail", "discardAction", 
                         "discardEnd", "eventRefuseDiscard", "choseEffect", 
                         "choseEffectSummary", "discountFactionGambit", 
                         "discardAndDrawSummary", "choseIncreasePool", "choseAddToDeck", 
                         "choseScrapFromDiscard", "choseDiscardAndIncreasePool", 
                         "choseBlobDraw", "choseIngenuityGambit", "hiddenBaseGambit", 
                         "midGateEffect", "alignBotEffect", "choseEffectDetail", 
                         "refreshTradeRow", "changeHiddenBaseToFaction", 
                         "activatingEffect", "activatingSummary", "activatingDetail", 
                         "scrap", "resolveHandScrap", "freeAcquireToTop", 
                         "copyBase", "copyBaseSummary", "copyBaseDetail", 
                         "noCopy", "noCopyBases", "copyCard", "copyCardSummary", 
                         "copyCardEffect", "purchaseToTop", "scrapSummary", 
                         "scrapDetail", "resolveHandScrapSummary", "resolveStealth", 
                         "copyStealth", "discardAndDraw", "endPhase", "endTurn", 
                         "drawPhaseDetail", "resetCopiedCards", "refreshIndicators", 
                         "newTurn", "selectCard", "replaceGambit", "noScrap", 
                         "selectDiscard", "discardForPool", "discarding", 
                         "drawCardsWithShuffle", "drawCards", "newBalanceDetail", 
                         "effect", "positiveBalance", "negativeBalance", 
                         "balance", "destroyBase", "shuffleCards", "name", 
                         "card", "wordPlus" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = StarRealmsParser.ruleNames;
        this.literalNames = StarRealmsParser.literalNames;
        this.symbolicNames = StarRealmsParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	battle() {
	    let localctx = new BattleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, StarRealmsParser.RULE_battle);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 284;
	            this.turn();
	            this.state = 287; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (StarRealmsParser.COMBAT - 6)) | (1 << (StarRealmsParser.AUTHORITY - 6)) | (1 << (StarRealmsParser.TRADE - 6)) | (1 << (StarRealmsParser.FEDERATION - 6)) | (1 << (StarRealmsParser.STAR - 6)) | (1 << (StarRealmsParser.EMPIRE - 6)) | (1 << (StarRealmsParser.MACHINE - 6)) | (1 << (StarRealmsParser.CULT - 6)) | (1 << (StarRealmsParser.ACQUIRE - 6)) | (1 << (StarRealmsParser.ACQUIRED - 6)) | (1 << (StarRealmsParser.UNALIGNED - 6)) | (1 << (StarRealmsParser.ACTIVATING - 6)) | (1 << (StarRealmsParser.ATTACKED - 6)) | (1 << (StarRealmsParser.SCRAPPING - 6)) | (1 << (StarRealmsParser.SCRAPPED - 6)) | (1 << (StarRealmsParser.OPPONENT - 6)) | (1 << (StarRealmsParser.DISCARDS - 6)) | (1 << (StarRealmsParser.SCRAP - 6)) | (1 << (StarRealmsParser.SELECTING - 6)) | (1 << (StarRealmsParser.SHUFFLED - 6)) | (1 << (StarRealmsParser.DISCARDED - 6)) | (1 << (StarRealmsParser.DISCARD - 6)) | (1 << (StarRealmsParser.DISCOUNTS - 6)) | (1 << (StarRealmsParser.REFRESH - 6)) | (1 << (StarRealmsParser.NEXT - 6)) | (1 << (StarRealmsParser.CONCEDED - 6)) | (1 << (StarRealmsParser.DISCARDING - 6)) | (1 << (StarRealmsParser.DESTROYED - 6)) | (1 << (StarRealmsParser.RESOLVING - 6)) | (1 << (StarRealmsParser.INDICATORS - 6)) | (1 << (StarRealmsParser.AVAILABLE - 6)) | (1 << (StarRealmsParser.RETURNING - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (StarRealmsParser.ABILITY - 38)) | (1 << (StarRealmsParser.CHANGED - 38)) | (1 << (StarRealmsParser.REVEALED - 38)) | (1 << (StarRealmsParser.COMPLETE - 38)) | (1 << (StarRealmsParser.REPLACED - 38)) | (1 << (StarRealmsParser.COPYING - 38)) | (1 << (StarRealmsParser.COPIED - 38)) | (1 << (StarRealmsParser.IMAGE - 38)) | (1 << (StarRealmsParser.RECEIVE - 38)) | (1 << (StarRealmsParser.REDRAW - 38)) | (1 << (StarRealmsParser.TABLE - 38)) | (1 << (StarRealmsParser.ALLIES - 38)) | (1 << (StarRealmsParser.EXPLORER - 38)) | (1 << (StarRealmsParser.SELECT - 38)) | (1 << (StarRealmsParser.SELECTED - 38)) | (1 << (StarRealmsParser.MISSION - 38)) | (1 << (StarRealmsParser.PUT - 38)) | (1 << (StarRealmsParser.CREATE - 38)) | (1 << (StarRealmsParser.PLAYED - 38)) | (1 << (StarRealmsParser.SECRET - 38)) | (1 << (StarRealmsParser.OUTPOST - 38)) | (1 << (StarRealmsParser.RETURN - 38)) | (1 << (StarRealmsParser.TARGET - 38)) | (1 << (StarRealmsParser.DRAW - 38)) | (1 << (StarRealmsParser.EVERY - 38)) | (1 << (StarRealmsParser.BLOB - 38)) | (1 << (StarRealmsParser.COPY - 38)) | (1 << (StarRealmsParser.CARDS - 38)) | (1 << (StarRealmsParser.CHOSE - 38)) | (1 << (StarRealmsParser.TURN - 38)) | (1 << (StarRealmsParser.DESTROY - 38)) | (1 << (StarRealmsParser.NUMBER - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (StarRealmsParser.LOSE - 70)) | (1 << (StarRealmsParser.SHIP - 70)) | (1 << (StarRealmsParser.SHIPS - 70)) | (1 << (StarRealmsParser.BASE - 70)) | (1 << (StarRealmsParser.BASES - 70)) | (1 << (StarRealmsParser.PILE - 70)) | (1 << (StarRealmsParser.EACH - 70)) | (1 << (StarRealmsParser.PLAY - 70)) | (1 << (StarRealmsParser.FORM - 70)) | (1 << (StarRealmsParser.COST - 70)) | (1 << (StarRealmsParser.DECK - 70)) | (1 << (StarRealmsParser.DREW - 70)) | (1 << (StarRealmsParser.ENDS - 70)) | (1 << (StarRealmsParser.CARD - 70)) | (1 << (StarRealmsParser.MORE2 - 70)) | (1 << (StarRealmsParser.FROM - 70)) | (1 << (StarRealmsParser.YOUR - 70)) | (1 << (StarRealmsParser.ALLY - 70)) | (1 << (StarRealmsParser.HAND - 70)) | (1 << (StarRealmsParser.GAME - 70)) | (1 << (StarRealmsParser.LESS - 70)) | (1 << (StarRealmsParser.MOVING - 70)) | (1 << (StarRealmsParser.INTO - 70)) | (1 << (StarRealmsParser.THIS - 70)) | (1 << (StarRealmsParser.EVENT - 70)) | (1 << (StarRealmsParser.NEW - 70)) | (1 << (StarRealmsParser.ALL - 70)) | (1 << (StarRealmsParser.NOW - 70)) | (1 << (StarRealmsParser.ROW - 70)) | (1 << (StarRealmsParser.THE - 70)) | (1 << (StarRealmsParser.TOP - 70)) | (1 << (StarRealmsParser.FOR - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (StarRealmsParser.DID - 102)) | (1 << (StarRealmsParser.AND - 102)) | (1 << (StarRealmsParser.ONE - 102)) | (1 << (StarRealmsParser.ADD - 102)) | (1 << (StarRealmsParser.NOT - 102)) | (1 << (StarRealmsParser.HAS - 102)) | (1 << (StarRealmsParser.WON - 102)) | (1 << (StarRealmsParser.WINS - 102)) | (1 << (StarRealmsParser.ANY - 102)) | (1 << (StarRealmsParser.IS - 102)) | (1 << (StarRealmsParser.IT - 102)) | (1 << (StarRealmsParser.IN - 102)) | (1 << (StarRealmsParser.TO - 102)) | (1 << (StarRealmsParser.OF - 102)) | (1 << (StarRealmsParser.UP - 102)) | (1 << (StarRealmsParser.OR - 102)) | (1 << (StarRealmsParser.NO - 102)) | (1 << (StarRealmsParser.ON - 102)) | (1 << (StarRealmsParser.WORD - 102)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	turn() {
	    let localctx = new TurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, StarRealmsParser.RULE_turn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 290; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 289;
	        		this.action();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 292; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 294;
	            this.endPhase();
	            break;

	        case 2:
	            this.state = 295;
	            this.winStatus();
	            break;

	        case 3:
	            this.state = 296;
	            this.match(StarRealmsParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	action() {
	    let localctx = new ActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, StarRealmsParser.RULE_action);
	    try {
	        this.state = 313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 299;
	            this.startTurnEffect();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 300;
	            this.triggeredEvent();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 301;
	            this.resolveEvent();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 302;
	            this.purchase();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 303;
	            this.purchaseHero();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 304;
	            this.play();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 305;
	            this.attackPlayer();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 306;
	            this.attackBase();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 307;
	            this.scrapCard();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 308;
	            this.discard();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 309;
	            this.choseEffect();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 310;
	            this.activatingEffect();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 311;
	            this.concede();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 312;
	            this.timeout();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winStatus() {
	    let localctx = new WinStatusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, StarRealmsParser.RULE_winStatus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.name();
	        this.state = 316;
	        this.match(StarRealmsParser.HAS);
	        this.state = 317;
	        this.match(StarRealmsParser.WON);
	        this.state = 318;
	        this.match(StarRealmsParser.THE);
	        this.state = 319;
	        this.match(StarRealmsParser.GAME);
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.NEWLINE) {
	            this.state = 320;
	            this.match(StarRealmsParser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concede() {
	    let localctx = new ConcedeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, StarRealmsParser.RULE_concede);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        this.name();
	        this.state = 324;
	        this.match(StarRealmsParser.T__0);
	        this.state = 325;
	        this.match(StarRealmsParser.INT);
	        this.state = 326;
	        this.match(StarRealmsParser.T__1);
	        this.state = 327;
	        this.match(StarRealmsParser.CONCEDED);
	        this.state = 328;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 329;
	        this.negativeBalance();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeout() {
	    let localctx = new TimeoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, StarRealmsParser.RULE_timeout);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 331;
	        this.name();
	        this.state = 332;
	        this.match(StarRealmsParser.WINS);
	        this.state = 333;
	        this.match(StarRealmsParser.THE);
	        this.state = 334;
	        this.match(StarRealmsParser.GAME);
	        this.state = 335;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTurnEffect() {
	    let localctx = new StartTurnEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, StarRealmsParser.RULE_startTurnEffect);
	    try {
	        this.state = 339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 337;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 338;
	            this.drawCardsWithShuffle();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseHero() {
	    let localctx = new PurchaseHeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, StarRealmsParser.RULE_purchaseHero);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        this.purchaseSummary();
	        this.state = 342;
	        this.purchaseHeroDetail();
	        this.state = 346;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 343;
	                this.playHero(); 
	            }
	            this.state = 348;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseHeroDetail() {
	    let localctx = new PurchaseHeroDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, StarRealmsParser.RULE_purchaseHeroDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 349;
	        this.negativeBalance();
	        this.state = 350;
	        this.acquireHeroToTable();
	        this.state = 351;
	        this.refreshIndicators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireHeroToTable() {
	    let localctx = new AcquireHeroToTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, StarRealmsParser.RULE_acquireHeroToTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 353;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 354;
	        this.card();
	        this.state = 355;
	        this.match(StarRealmsParser.TO);
	        this.state = 356;
	        this.match(StarRealmsParser.ON);
	        this.state = 357;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 358;
	        this.match(StarRealmsParser.TABLE);
	        this.state = 359;
	        this.match(StarRealmsParser.IMAGE);
	        this.state = 360;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playHero() {
	    let localctx = new PlayHeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, StarRealmsParser.RULE_playHero);
	    try {
	        this.state = 373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 362;
	            this.triggeredEvent();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 363;
	            this.tradeRowScrap();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 364;
	            this.resolveFreeAcquire();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 365;
	            this.resolveSelfScrap();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 366;
	            this.resolveDiscardAndDraw();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 367;
	            this.multiScrapSummary();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 368;
	            this.positiveBalance();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 369;
	            this.drawCardsWithShuffle();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 370;
	            this.multiScrapDetail();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 371;
	            this.simpleScrap();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 372;
	            this.discarding();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tradeRowScrap() {
	    let localctx = new TradeRowScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, StarRealmsParser.RULE_tradeRowScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 376;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 383;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case StarRealmsParser.UP:
	            this.state = 377;
	            this.match(StarRealmsParser.UP);
	            this.state = 378;
	            this.match(StarRealmsParser.TO);
	            this.state = 379;
	            this.match(StarRealmsParser.INT);
	            this.state = 380;
	            this.match(StarRealmsParser.CARDS);
	            break;
	        case StarRealmsParser.WORD:
	            this.state = 381;
	            this.match(StarRealmsParser.WORD);
	            this.state = 382;
	            this.match(StarRealmsParser.CARD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 385;
	        this.match(StarRealmsParser.IN);
	        this.state = 386;
	        this.match(StarRealmsParser.THE);
	        this.state = 387;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 388;
	        this.match(StarRealmsParser.ROW);
	        this.state = 389;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveFreeAcquire() {
	    let localctx = new ResolveFreeAcquireContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, StarRealmsParser.RULE_resolveFreeAcquire);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 392;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 393;
	        this.match(StarRealmsParser.ANY);
	        this.state = 394;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 395;
	        this.match(StarRealmsParser.OR);
	        this.state = 396;
	        this.match(StarRealmsParser.BASE);
	        this.state = 397;
	        this.match(StarRealmsParser.OF);
	        this.state = 398;
	        this.match(StarRealmsParser.COST);
	        this.state = 399;
	        this.match(StarRealmsParser.INT);
	        this.state = 400;
	        this.match(StarRealmsParser.OR);
	        this.state = 401;
	        this.match(StarRealmsParser.LESS);
	        this.state = 402;
	        this.match(StarRealmsParser.TO);
	        this.state = 403;
	        this.match(StarRealmsParser.DECK);
	        this.state = 404;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSelfScrap() {
	    let localctx = new ResolveSelfScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, StarRealmsParser.RULE_resolveSelfScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 407;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 408;
	        this.match(StarRealmsParser.WORD);
	        this.state = 409;
	        this.match(StarRealmsParser.CARD);
	        this.state = 410;
	        this.match(StarRealmsParser.FROM);
	        this.state = 411;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 412;
	        this.match(StarRealmsParser.HAND);
	        this.state = 413;
	        this.match(StarRealmsParser.OR);
	        this.state = 414;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 415;
	        this.match(StarRealmsParser.PILE);
	        this.state = 416;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveDiscardAndDraw() {
	    let localctx = new ResolveDiscardAndDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, StarRealmsParser.RULE_resolveDiscardAndDraw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 419;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 420;
	        this.match(StarRealmsParser.AND);
	        this.state = 421;
	        this.match(StarRealmsParser.REDRAW);
	        this.state = 422;
	        this.match(StarRealmsParser.UP);
	        this.state = 423;
	        this.match(StarRealmsParser.TO);
	        this.state = 424;
	        this.match(StarRealmsParser.INT);
	        this.state = 425;
	        this.match(StarRealmsParser.CARD);
	        this.state = 426;
	        this.match(StarRealmsParser.T__2);
	        this.state = 427;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 428;
	        this.selectCard();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchase() {
	    let localctx = new PurchaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, StarRealmsParser.RULE_purchase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this.purchaseSummary();
	        this.state = 434;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 431;
	                this.purchaseDetail(); 
	            }
	            this.state = 436;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseSummary() {
	    let localctx = new PurchaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, StarRealmsParser.RULE_purchaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 438;
	        this.card();
	        this.state = 439;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseDetail() {
	    let localctx = new PurchaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, StarRealmsParser.RULE_purchaseDetail);
	    try {
	        this.state = 445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 441;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 442;
	            this.acquireToHand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 443;
	            this.acquireToDeck();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 444;
	            this.eventRefuseDiscard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireToHand() {
	    let localctx = new AcquireToHandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, StarRealmsParser.RULE_acquireToHand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 448;
	        this.card();
	        this.state = 449;
	        this.match(StarRealmsParser.TO);
	        this.state = 450;
	        this.match(StarRealmsParser.HAND);
	        this.state = 451;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acquireToDeck() {
	    let localctx = new AcquireToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, StarRealmsParser.RULE_acquireToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 454;
	        this.card();
	        this.state = 455;
	        this.match(StarRealmsParser.TO);
	        this.state = 456;
	        this.match(StarRealmsParser.THE);
	        this.state = 457;
	        this.match(StarRealmsParser.TOP);
	        this.state = 458;
	        this.match(StarRealmsParser.OF);
	        this.state = 459;
	        this.match(StarRealmsParser.THE);
	        this.state = 460;
	        this.match(StarRealmsParser.DECK);
	        this.state = 461;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	play() {
	    let localctx = new PlayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, StarRealmsParser.RULE_play);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.playSummary();
	        this.state = 467;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 464;
	                this.playDetail(); 
	            }
	            this.state = 469;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	        this.state = 471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 470;
	            this.completeMission();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playSummary() {
	    let localctx = new PlaySummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, StarRealmsParser.RULE_playSummary);
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case StarRealmsParser.PLAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 473;
	            this.match(StarRealmsParser.PLAY);
	            this.state = 474;
	            this.match(StarRealmsParser.ALL);
	            this.state = 475;
	            this.match(StarRealmsParser.NEWLINE);
	            break;
	        case StarRealmsParser.PLAYED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 476;
	            this.playSingle();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playSingle() {
	    let localctx = new PlaySingleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, StarRealmsParser.RULE_playSingle);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(StarRealmsParser.PLAYED);
	        this.state = 480;
	        this.card();
	        this.state = 481;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playDetail() {
	    let localctx = new PlayDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, StarRealmsParser.RULE_playDetail);
	    try {
	        this.state = 499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 484;
	            this.newAbility();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 485;
	            this.drawCardsWithShuffle();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 486;
	            this.scrapCardEffect();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 487;
	            this.discardForPool();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 488;
	            this.discarding();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 489;
	            this.multiScrap();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 490;
	            this.noScrap();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 491;
	            this.simpleScrap();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 492;
	            this.destroyBase();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 493;
	            this.moveBaseToDeck();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 494;
	            this.freeAcquire();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 495;
	            this.copyCardSummary();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 496;
	            this.copyCardEffect();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 497;
	            this.refreshCost();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 498;
	            this.triggeredEvent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newAbility() {
	    let localctx = new NewAbilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, StarRealmsParser.RULE_newAbility);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.name();
	        this.state = 502;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 503;
	        this.card();
	        this.state = 504;
	        this.match(StarRealmsParser.ABILITY);
	        this.state = 505;
	        this.match(StarRealmsParser.AVAILABLE);
	        this.state = 506;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrap() {
	    let localctx = new MultiScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, StarRealmsParser.RULE_multiScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.multiScrapSummary();
	        this.state = 509;
	        this.multiScrapDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrapSummary() {
	    let localctx = new MultiScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, StarRealmsParser.RULE_multiScrapSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 512;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 513;
	        this.match(StarRealmsParser.UP);
	        this.state = 514;
	        this.match(StarRealmsParser.TO);
	        this.state = 515;
	        this.match(StarRealmsParser.INT);
	        this.state = 516;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 517;
	        this.match(StarRealmsParser.FROM);
	        this.state = 518;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 519;
	        this.match(StarRealmsParser.HAND);
	        this.state = 520;
	        this.match(StarRealmsParser.OR);
	        this.state = 521;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 522;
	        this.match(StarRealmsParser.PILE);
	        this.state = 523;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiScrapDetail() {
	    let localctx = new MultiScrapDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, StarRealmsParser.RULE_multiScrapDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 525;
	        		this.scrapCardEffect();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 528; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,15, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 531; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 530;
	        		this.simpleScrap();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 533; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,16, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapCardEffect() {
	    let localctx = new ScrapCardEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, StarRealmsParser.RULE_scrapCardEffect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.name();
	        this.state = 536;
	        this.match(StarRealmsParser.IS);
	        this.state = 537;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__3) {
	            this.state = 538;
	            this.match(StarRealmsParser.T__3);
	        }

	        this.state = 541;
	        this.card();
	        this.state = 542;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleScrap() {
	    let localctx = new SimpleScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, StarRealmsParser.RULE_simpleScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 545;
	        this.card();
	        this.state = 546;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveBaseToDeck() {
	    let localctx = new MoveBaseToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, StarRealmsParser.RULE_moveBaseToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.name();
	        this.state = 549;
	        this.match(StarRealmsParser.IS);
	        this.state = 550;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 551;
	        this.card();
	        this.state = 552;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freeAcquire() {
	    let localctx = new FreeAcquireContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, StarRealmsParser.RULE_freeAcquire);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 555;
	        this.card();
	        this.state = 556;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 557;
	            this.acquireToHand();
	            break;

	        case 2:
	            this.state = 558;
	            this.acquireToDeck();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshCost() {
	    let localctx = new RefreshCostContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, StarRealmsParser.RULE_refreshCost);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.match(StarRealmsParser.REFRESH);
	        this.state = 562;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 563;
	        this.match(StarRealmsParser.ROW);
	        this.state = 564;
	        this.match(StarRealmsParser.DISCOUNTS);
	        this.state = 565;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEvent() {
	    let localctx = new TriggeredEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, StarRealmsParser.RULE_triggeredEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.triggeredEventSummary();
	        this.state = 571;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 568;
	                this.triggeredEventDetail(); 
	            }
	            this.state = 573;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEventSummary() {
	    let localctx = new TriggeredEventSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, StarRealmsParser.RULE_triggeredEventSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(StarRealmsParser.REVEALED);
	        this.state = 575;
	        this.match(StarRealmsParser.EVENT);
	        this.state = 576;
	        this.card();
	        this.state = 577;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggeredEventDetail() {
	    let localctx = new TriggeredEventDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, StarRealmsParser.RULE_triggeredEventDetail);
	    try {
	        this.state = 586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 580;
	            this.acquireToHand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 581;
	            this.negativeBalance();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 582;
	            this.scrapAction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 583;
	            this.drawCardsWithShuffle();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 584;
	            this.resolveEvent();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 585;
	            this.refreshIndicators();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectMission() {
	    let localctx = new SelectMissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, StarRealmsParser.RULE_selectMission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.resolveSelectMission();
	        this.state = 589;
	        this.actionSelectMission();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSelectMission() {
	    let localctx = new ResolveSelectMissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, StarRealmsParser.RULE_resolveSelectMission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 592;
	        this.match(StarRealmsParser.SELECT);
	        this.state = 593;
	        this.match(StarRealmsParser.MISSION);
	        this.state = 594;
	        this.match(StarRealmsParser.TO);
	        this.state = 595;
	        this.match(StarRealmsParser.COMPLETE);
	        this.state = 596;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionSelectMission() {
	    let localctx = new ActionSelectMissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, StarRealmsParser.RULE_actionSelectMission);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(StarRealmsParser.SELECTED);
	        this.state = 599;
	        this.match(StarRealmsParser.MISSION);
	        this.state = 600;
	        this.match(StarRealmsParser.T__3);
	        this.state = 601;
	        this.card();
	        this.state = 602;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMission() {
	    let localctx = new CompleteMissionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, StarRealmsParser.RULE_completeMission);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.RESOLVING) {
	            this.state = 604;
	            this.selectMission();
	        }

	        this.state = 607;
	        this.completeMissionSummary();
	        this.state = 611;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 608;
	                this.completeMissionsDetail(); 
	            }
	            this.state = 613;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMissionSummary() {
	    let localctx = new CompleteMissionSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, StarRealmsParser.RULE_completeMissionSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(StarRealmsParser.REVEALED);
	        this.state = 615;
	        this.card();
	        this.state = 616;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	completeMissionsDetail() {
	    let localctx = new CompleteMissionsDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, StarRealmsParser.RULE_completeMissionsDetail);
	    try {
	        this.state = 628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 618;
	            this.positiveBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 619;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 620;
	            this.acquireToHand();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 621;
	            this.selectMissionsReward();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 622;
	            this.winStatus();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 623;
	            this.freeAcquire();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 624;
	            this.resolveAllyReward();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 625;
	            this.resolveRuleReward();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 626;
	            this.resolveDefendReward();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 627;
	            this.resolveConvertReward();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectMissionsReward() {
	    let localctx = new SelectMissionsRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, StarRealmsParser.RULE_selectMissionsReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 631;
	        this.match(StarRealmsParser.ADD);
	        this.state = 632;
	        this.match(StarRealmsParser.INT);
	        this.state = 633;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 634;
	        this.match(StarRealmsParser.OR);
	        this.state = 635;
	        this.match(StarRealmsParser.ADD);
	        this.state = 636;
	        this.match(StarRealmsParser.INT);
	        this.state = 637;
	        this.match(StarRealmsParser.COMBAT);
	        this.state = 638;
	        this.match(StarRealmsParser.OR);
	        this.state = 639;
	        this.match(StarRealmsParser.ADD);
	        this.state = 640;
	        this.match(StarRealmsParser.INT);
	        this.state = 641;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 642;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveAllyReward() {
	    let localctx = new ResolveAllyRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, StarRealmsParser.RULE_resolveAllyReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 645;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 646;
	        this.match(StarRealmsParser.ANY);
	        this.state = 647;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 648;
	        this.match(StarRealmsParser.OR);
	        this.state = 649;
	        this.match(StarRealmsParser.BASE);
	        this.state = 650;
	        this.match(StarRealmsParser.OF);
	        this.state = 651;
	        this.match(StarRealmsParser.COST);
	        this.state = 652;
	        this.match(StarRealmsParser.INT);
	        this.state = 653;
	        this.match(StarRealmsParser.OR);
	        this.state = 654;
	        this.match(StarRealmsParser.LESS);
	        this.state = 655;
	        this.match(StarRealmsParser.TO);
	        this.state = 656;
	        this.match(StarRealmsParser.DECK);
	        this.state = 657;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveRuleReward() {
	    let localctx = new ResolveRuleRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, StarRealmsParser.RULE_resolveRuleReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 660;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 661;
	        this.match(StarRealmsParser.ANY);
	        this.state = 662;
	        this.match(StarRealmsParser.CARD);
	        this.state = 663;
	        this.match(StarRealmsParser.OF);
	        this.state = 664;
	        this.match(StarRealmsParser.COST);
	        this.state = 665;
	        this.match(StarRealmsParser.INT);
	        this.state = 666;
	        this.match(StarRealmsParser.OR);
	        this.state = 667;
	        this.match(StarRealmsParser.LESS);
	        this.state = 668;
	        this.match(StarRealmsParser.TO);
	        this.state = 669;
	        this.match(StarRealmsParser.HAND);
	        this.state = 670;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveDefendReward() {
	    let localctx = new ResolveDefendRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, StarRealmsParser.RULE_resolveDefendReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 673;
	        this.match(StarRealmsParser.RETURN);
	        this.state = 674;
	        this.match(StarRealmsParser.TARGET);
	        this.state = 675;
	        this.match(StarRealmsParser.BASE);
	        this.state = 676;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveConvertReward() {
	    let localctx = new ResolveConvertRewardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, StarRealmsParser.RULE_resolveConvertReward);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 679;
	        this.match(StarRealmsParser.RETURN);
	        this.state = 680;
	        this.match(StarRealmsParser.INT);
	        this.state = 681;
	        this.match(StarRealmsParser.CARD);
	        this.state = 682;
	        this.match(StarRealmsParser.TO);
	        this.state = 683;
	        this.match(StarRealmsParser.THE);
	        this.state = 684;
	        this.match(StarRealmsParser.TOP);
	        this.state = 685;
	        this.match(StarRealmsParser.OF);
	        this.state = 686;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 687;
	        this.match(StarRealmsParser.DECK);
	        this.state = 688;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 689;
	        this.name();
	        this.state = 690;
	        this.match(StarRealmsParser.IS);
	        this.state = 691;
	        this.match(StarRealmsParser.RETURNING);
	        this.state = 692;
	        this.card();
	        this.state = 693;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 694;
	        this.discard();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEvent() {
	    let localctx = new ResolveEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, StarRealmsParser.RULE_resolveEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.resolveEventSummary();
	        this.state = 700;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 697;
	                this.resolveEventDetail(); 
	            }
	            this.state = 702;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEventSummary() {
	    let localctx = new ResolveEventSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, StarRealmsParser.RULE_resolveEventSummary);
	    try {
	        this.state = 713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 703;
	            this.resolveSimple();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 704;
	            this.resolveBombardment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 705;
	            this.resolveComet();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 706;
	            this.negativeBalance();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 707;
	            this.resolveSupplyRun();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 708;
	            this.resolvingTacticalMan1();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 709;
	            this.resolvingTacticalMan2();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 710;
	            this.resolveWormhole();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 711;
	            this.resolveSplinterGambit();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 712;
	            this.resolveCard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSimple() {
	    let localctx = new ResolveSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, StarRealmsParser.RULE_resolveSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 716;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveBombardment() {
	    let localctx = new ResolveBombardmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, StarRealmsParser.RULE_resolveBombardment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 719;
	        this.card();
	        this.state = 720;
	        this.match(StarRealmsParser.T__3);
	        this.state = 721;
	        this.match(StarRealmsParser.DESTROY);
	        this.state = 722;
	        this.match(StarRealmsParser.WORD);
	        this.state = 723;
	        this.match(StarRealmsParser.BASE);
	        this.state = 724;
	        this.match(StarRealmsParser.OR);
	        this.state = 725;
	        this.match(StarRealmsParser.LOSE);
	        this.state = 726;
	        this.match(StarRealmsParser.INT);
	        this.state = 727;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 728;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveComet() {
	    let localctx = new ResolveCometContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, StarRealmsParser.RULE_resolveComet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 731;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 732;
	        this.match(StarRealmsParser.UP);
	        this.state = 733;
	        this.match(StarRealmsParser.TO);
	        this.state = 734;
	        this.match(StarRealmsParser.INT);
	        this.state = 735;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 736;
	        this.match(StarRealmsParser.FROM);
	        this.state = 737;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 738;
	        this.match(StarRealmsParser.HAND);
	        this.state = 739;
	        this.match(StarRealmsParser.OR);
	        this.state = 740;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 741;
	        this.match(StarRealmsParser.PILE);
	        this.state = 742;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSupplyRun() {
	    let localctx = new ResolveSupplyRunContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, StarRealmsParser.RULE_resolveSupplyRun);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 745;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 746;
	        this.match(StarRealmsParser.INT);
	        this.state = 747;
	        this.match(StarRealmsParser.EXPLORER);
	        this.state = 748;
	        this.match(StarRealmsParser.TO);
	        this.state = 749;
	        this.match(StarRealmsParser.DECK);
	        this.state = 750;
	        this.match(StarRealmsParser.OR);
	        this.state = 751;
	        this.match(StarRealmsParser.PUT);
	        this.state = 752;
	        this.match(StarRealmsParser.TARGET);
	        this.state = 753;
	        this.match(StarRealmsParser.CARD);
	        this.state = 754;
	        this.match(StarRealmsParser.FROM);
	        this.state = 755;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 756;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 757;
	        this.match(StarRealmsParser.PILE);
	        this.state = 758;
	        this.match(StarRealmsParser.ON);
	        this.state = 759;
	        this.match(StarRealmsParser.TOP);
	        this.state = 760;
	        this.match(StarRealmsParser.OF);
	        this.state = 761;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 762;
	        this.match(StarRealmsParser.DECK);
	        this.state = 763;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolvingTacticalMan1() {
	    let localctx = new ResolvingTacticalMan1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, StarRealmsParser.RULE_resolvingTacticalMan1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 766;
	        this.match(StarRealmsParser.ADD);
	        this.state = 767;
	        this.match(StarRealmsParser.INT);
	        this.state = 768;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 769;
	        this.match(StarRealmsParser.OR);
	        this.state = 770;
	        this.match(StarRealmsParser.ADD);
	        this.state = 771;
	        this.match(StarRealmsParser.INT);
	        this.state = 772;
	        this.match(StarRealmsParser.COMBAT);
	        this.state = 773;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolvingTacticalMan2() {
	    let localctx = new ResolvingTacticalMan2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, StarRealmsParser.RULE_resolvingTacticalMan2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 776;
	        this.match(StarRealmsParser.ADD);
	        this.state = 777;
	        this.match(StarRealmsParser.INT);
	        this.state = 778;
	        this.match(StarRealmsParser.AUTHORITY);
	        this.state = 779;
	        this.match(StarRealmsParser.OR);
	        this.state = 780;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 781;
	        this.match(StarRealmsParser.INT);
	        this.state = 782;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 783;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveWormhole() {
	    let localctx = new ResolveWormholeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, StarRealmsParser.RULE_resolveWormhole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 785;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 786;
	        this.match(StarRealmsParser.PUT);
	        this.state = 787;
	        this.wordPlus();
	        this.state = 788;
	        this.match(StarRealmsParser.CARD);
	        this.state = 789;
	        this.match(StarRealmsParser.FROM);
	        this.state = 790;
	        this.match(StarRealmsParser.THE);
	        this.state = 791;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 792;
	        this.match(StarRealmsParser.PILE);
	        this.state = 793;
	        this.match(StarRealmsParser.INTO);
	        this.state = 794;
	        this.match(StarRealmsParser.THE);
	        this.state = 795;
	        this.match(StarRealmsParser.HAND);
	        this.state = 796;
	        this.match(StarRealmsParser.OR);
	        this.state = 797;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 798;
	        this.match(StarRealmsParser.INT);
	        this.state = 799;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 800;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveSplinterGambit() {
	    let localctx = new ResolveSplinterGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, StarRealmsParser.RULE_resolveSplinterGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 803;
	        this.match(StarRealmsParser.ADD);
	        this.state = 804;
	        this.match(StarRealmsParser.FEDERATION);
	        this.state = 805;
	        this.match(StarRealmsParser.ALLIES);
	        this.state = 806;
	        this.match(StarRealmsParser.OR);
	        this.state = 807;
	        this.match(StarRealmsParser.ADD);
	        this.state = 808;
	        this.match(StarRealmsParser.STAR);
	        this.state = 809;
	        this.match(StarRealmsParser.EMPIRE);
	        this.state = 810;
	        this.match(StarRealmsParser.ALLIES);
	        this.state = 811;
	        this.match(StarRealmsParser.OR);
	        this.state = 812;
	        this.match(StarRealmsParser.ADD);
	        this.state = 813;
	        this.match(StarRealmsParser.MACHINE);
	        this.state = 814;
	        this.match(StarRealmsParser.CULT);
	        this.state = 815;
	        this.match(StarRealmsParser.ALLIES);
	        this.state = 816;
	        this.match(StarRealmsParser.OR);
	        this.state = 817;
	        this.match(StarRealmsParser.ADD);
	        this.state = 818;
	        this.match(StarRealmsParser.BLOB);
	        this.state = 819;
	        this.match(StarRealmsParser.ALLIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveEventDetail() {
	    let localctx = new ResolveEventDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, StarRealmsParser.RULE_resolveEventDetail);
	    try {
	        this.state = 834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 821;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 822;
	            this.positiveBalance();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 823;
	            this.discardFromEvent();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 824;
	            this.discarding();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 825;
	            this.scrapSummary();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 826;
	            this.scrapDetail();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 827;
	            this.resolveMobilization();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 828;
	            this.acquireToDeck();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 829;
	            this.selectCard();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 830;
	            this.drawCardsWithShuffle();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 831;
	            this.moveCardToHand();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 832;
	            this.acquireToHand();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 833;
	            this.refreshIndicators();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardFromEvent() {
	    let localctx = new DiscardFromEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, StarRealmsParser.RULE_discardFromEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.name();
	        this.state = 837;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__3) {
	            this.state = 838;
	            this.match(StarRealmsParser.T__3);
	        }

	        this.state = 841;
	        this.card();
	        this.state = 842;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveMobilization() {
	    let localctx = new ResolveMobilizationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, StarRealmsParser.RULE_resolveMobilization);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844;
	        this.name();
	        this.state = 845;
	        this.match(StarRealmsParser.IS);
	        this.state = 846;
	        this.match(StarRealmsParser.NOT);
	        this.state = 847;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 848;
	        this.match(StarRealmsParser.ANY);
	        this.state = 849;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 850;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveCardToHand() {
	    let localctx = new MoveCardToHandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, StarRealmsParser.RULE_moveCardToHand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852;
	        this.name();
	        this.state = 853;
	        this.match(StarRealmsParser.IS);
	        this.state = 854;
	        this.match(StarRealmsParser.MOVING);
	        this.state = 855;
	        this.card();
	        this.state = 856;
	        this.match(StarRealmsParser.TO);
	        this.state = 857;
	        this.match(StarRealmsParser.HAND);
	        this.state = 858;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveCard() {
	    let localctx = new ResolveCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, StarRealmsParser.RULE_resolveCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 861;
	        this.card();
	        this.state = 862;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackPlayer() {
	    let localctx = new AttackPlayerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, StarRealmsParser.RULE_attackPlayer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.attackPlayerSummary();
	        this.state = 866; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 865;
	        		this.negativeBalance();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 868; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,28, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackPlayerSummary() {
	    let localctx = new AttackPlayerSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, StarRealmsParser.RULE_attackPlayerSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 870;
	        this.match(StarRealmsParser.ATTACKED);
	        this.state = 871;
	        this.name();
	        this.state = 872;
	        this.match(StarRealmsParser.FOR);
	        this.state = 873;
	        this.match(StarRealmsParser.INT);
	        this.state = 874;
	        this.newAuthority();
	        this.state = 875;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newAuthority() {
	    let localctx = new NewAuthorityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, StarRealmsParser.RULE_newAuthority);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.match(StarRealmsParser.T__0);
	        this.state = 878;
	        this.match(StarRealmsParser.NEW);
	        this.state = 879;
	        this.wordPlus();
	        this.state = 880;
	        this.match(StarRealmsParser.T__3);
	        this.state = 881;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.DECREASE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 882;
	        this.match(StarRealmsParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBase() {
	    let localctx = new AttackBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, StarRealmsParser.RULE_attackBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.attackBaseSummary();
	        this.state = 888;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 885;
	                this.attackBaseDetail(); 
	            }
	            this.state = 890;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBaseSummary() {
	    let localctx = new AttackBaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, StarRealmsParser.RULE_attackBaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(StarRealmsParser.ATTACKED);
	        this.state = 892;
	        this.card();
	        this.state = 893;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attackBaseDetail() {
	    let localctx = new AttackBaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, StarRealmsParser.RULE_attackBaseDetail);
	    try {
	        this.state = 898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.negativeBalance();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 896;
	            this.destroyBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 897;
	            this.scrapAction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapCard() {
	    let localctx = new ScrapCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, StarRealmsParser.RULE_scrapCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this.scrappingSummary();
	        this.state = 901;
	        this.scrappingDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrappingSummary() {
	    let localctx = new ScrappingSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, StarRealmsParser.RULE_scrappingSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 904;
	        this.card();
	        this.state = 905;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrappingDetail() {
	    let localctx = new ScrappingDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, StarRealmsParser.RULE_scrappingDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 907;
	        		this.scrapEffect();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 910; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapEffect() {
	    let localctx = new ScrapEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, StarRealmsParser.RULE_scrapEffect);
	    try {
	        this.state = 924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 912;
	            this.scrapAction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 913;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 914;
	            this.freePurchase();
	            this.state = 915;
	            this.scrapAction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 917;
	            this.destroyBase();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 918;
	            this.newBalanceDetail();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 919;
	            this.replaceGambit();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 920;
	            this.scrapSummary();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 921;
	            this.moveDiscardToDeck();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 922;
	            this.refreshIndicators();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 923;
	            this.discarding();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapAction() {
	    let localctx = new ScrapActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, StarRealmsParser.RULE_scrapAction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 927;
	        this.card();
	        this.state = 928;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freePurchase() {
	    let localctx = new FreePurchaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, StarRealmsParser.RULE_freePurchase);
	    try {
	        this.state = 950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 930;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 931;
	            this.card();
	            this.state = 932;
	            this.match(StarRealmsParser.TO);
	            this.state = 933;
	            this.match(StarRealmsParser.HAND);
	            this.state = 934;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 936;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 937;
	            this.card();
	            this.state = 938;
	            this.match(StarRealmsParser.TO);
	            this.state = 939;
	            this.match(StarRealmsParser.THE);
	            this.state = 940;
	            this.match(StarRealmsParser.TOP);
	            this.state = 941;
	            this.match(StarRealmsParser.OF);
	            this.state = 942;
	            this.match(StarRealmsParser.THE);
	            this.state = 943;
	            this.match(StarRealmsParser.DECK);
	            this.state = 944;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 946;
	            this.match(StarRealmsParser.ACQUIRED);
	            this.state = 947;
	            this.card();
	            this.state = 948;
	            this.match(StarRealmsParser.NEWLINE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveDiscardToDeck() {
	    let localctx = new MoveDiscardToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, StarRealmsParser.RULE_moveDiscardToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.name();
	        this.state = 953;
	        this.match(StarRealmsParser.IS);
	        this.state = 954;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 955;
	        this.card();
	        this.state = 956;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discard() {
	    let localctx = new DiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, StarRealmsParser.RULE_discard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this.discardSummary();
	        this.state = 962;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 959;
	                this.discardDetail(); 
	            }
	            this.state = 964;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardSummary() {
	    let localctx = new DiscardSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, StarRealmsParser.RULE_discardSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 966;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 967;
	        this.match(StarRealmsParser.INT);
	        this.state = 968;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 969;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardDetail() {
	    let localctx = new DiscardDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, StarRealmsParser.RULE_discardDetail);
	    try {
	        this.state = 977;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 971;
	            this.discardAction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 972;
	            this.discardEnd();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 973;
	            this.discarding();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 974;
	            this.eventRefuseDiscard();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 975;
	            this.negativeBalance();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 976;
	            this.refreshTradeRow();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAction() {
	    let localctx = new DiscardActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, StarRealmsParser.RULE_discardAction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 979;
	        this.name();
	        this.state = 980;
	        this.match(StarRealmsParser.IS);
	        this.state = 981;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 982;
	        this.card();
	        this.state = 983;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardEnd() {
	    let localctx = new DiscardEndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, StarRealmsParser.RULE_discardEnd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 985;
	        this.match(StarRealmsParser.NO);
	        this.state = 986;
	        this.match(StarRealmsParser.MORE2);
	        this.state = 987;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 988;
	        this.match(StarRealmsParser.TO);
	        this.state = 989;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 990;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventRefuseDiscard() {
	    let localctx = new EventRefuseDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, StarRealmsParser.RULE_eventRefuseDiscard);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this.name();
	        this.state = 996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__0) {
	            this.state = 993;
	            this.match(StarRealmsParser.T__0);
	            this.state = 994;
	            this.match(StarRealmsParser.INT);
	            this.state = 995;
	            this.match(StarRealmsParser.T__1);
	        }

	        this.state = 998;
	        this.match(StarRealmsParser.IS);
	        this.state = 999;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1000;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.ANY) {
	            this.state = 1001;
	            this.match(StarRealmsParser.ANY);
	            this.state = 1002;
	            this.match(StarRealmsParser.CARDS);
	        }

	        this.state = 1005;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffect() {
	    let localctx = new ChoseEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, StarRealmsParser.RULE_choseEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1007;
	        this.choseEffectSummary();
	        this.state = 1011;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1008;
	                this.choseEffectDetail(); 
	            }
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffectSummary() {
	    let localctx = new ChoseEffectSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, StarRealmsParser.RULE_choseEffectSummary);
	    try {
	        this.state = 1025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1014;
	            this.discardAndDrawSummary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1015;
	            this.choseIncreasePool();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1016;
	            this.choseScrapFromDiscard();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1017;
	            this.choseDiscardAndIncreasePool();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1018;
	            this.choseIngenuityGambit();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1019;
	            this.discountFactionGambit();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1020;
	            this.hiddenBaseGambit();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1021;
	            this.choseBlobDraw();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1022;
	            this.midGateEffect();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1023;
	            this.choseAddToDeck();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1024;
	            this.alignBotEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discountFactionGambit() {
	    let localctx = new DiscountFactionGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, StarRealmsParser.RULE_discountFactionGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1027;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1028;
	        this.match(StarRealmsParser.ACQUIRE);
	        this.state = 1030; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1029;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1032; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,40, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1034;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1035;
	        this.match(StarRealmsParser.AT);
	        this.state = 1036;
	        this.match(StarRealmsParser.ONE);
	        this.state = 1037;
	        this.match(StarRealmsParser.LESS);
	        this.state = 1038;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 1039;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAndDrawSummary() {
	    let localctx = new DiscardAndDrawSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, StarRealmsParser.RULE_discardAndDrawSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1041;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1042;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1043;
	        this.match(StarRealmsParser.AND);
	        this.state = 1044;
	        this.match(StarRealmsParser.REDRAW);
	        this.state = 1045;
	        this.match(StarRealmsParser.UP);
	        this.state = 1046;
	        this.match(StarRealmsParser.TO);
	        this.state = 1047;
	        this.match(StarRealmsParser.INT);
	        this.state = 1048;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1049;
	        this.match(StarRealmsParser.T__2);
	        this.state = 1050;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseIncreasePool() {
	    let localctx = new ChoseIncreasePoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, StarRealmsParser.RULE_choseIncreasePool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1052;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1053;
	        this.match(StarRealmsParser.ADD);
	        this.state = 1054;
	        this.match(StarRealmsParser.INT);
	        this.state = 1055;
	        this.wordPlus();
	        this.state = 1056;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseAddToDeck() {
	    let localctx = new ChoseAddToDeckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, StarRealmsParser.RULE_choseAddToDeck);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1059;
	        this.match(StarRealmsParser.NEXT);
	        this.state = 1060;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1061;
	        this.match(StarRealmsParser.TO);
	        this.state = 1062;
	        this.match(StarRealmsParser.TOP);
	        this.state = 1063;
	        this.match(StarRealmsParser.OF);
	        this.state = 1064;
	        this.match(StarRealmsParser.DECK);
	        this.state = 1065;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseScrapFromDiscard() {
	    let localctx = new ChoseScrapFromDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, StarRealmsParser.RULE_choseScrapFromDiscard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1068;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 1069;
	        this.match(StarRealmsParser.WORD);
	        this.state = 1070;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1071;
	        this.match(StarRealmsParser.FROM);
	        this.state = 1072;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 1073;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1074;
	        this.match(StarRealmsParser.PILE);
	        this.state = 1075;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseDiscardAndIncreasePool() {
	    let localctx = new ChoseDiscardAndIncreasePoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, StarRealmsParser.RULE_choseDiscardAndIncreasePool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1078;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1079;
	        this.match(StarRealmsParser.UP);
	        this.state = 1080;
	        this.match(StarRealmsParser.TO);
	        this.state = 1081;
	        this.match(StarRealmsParser.INT);
	        this.state = 1082;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1083;
	        this.match(StarRealmsParser.RECEIVE);
	        this.state = 1084;
	        this.match(StarRealmsParser.INT);
	        this.state = 1085;
	        this.wordPlus();
	        this.state = 1086;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1087;
	        this.match(StarRealmsParser.EACH);
	        this.state = 1088;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseBlobDraw() {
	    let localctx = new ChoseBlobDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, StarRealmsParser.RULE_choseBlobDraw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1091;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 1092;
	        this.match(StarRealmsParser.WORD);
	        this.state = 1093;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1094;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1095;
	        this.match(StarRealmsParser.EVERY);
	        this.state = 1096;
	        this.match(StarRealmsParser.BLOB);
	        this.state = 1097;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1098;
	        this.match(StarRealmsParser.PLAYED);
	        this.state = 1099;
	        this.match(StarRealmsParser.THIS);
	        this.state = 1100;
	        this.match(StarRealmsParser.TURN);
	        this.state = 1101;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseIngenuityGambit() {
	    let localctx = new ChoseIngenuityGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, StarRealmsParser.RULE_choseIngenuityGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1104;
	        this.match(StarRealmsParser.DRAW);
	        this.state = 1105;
	        this.match(StarRealmsParser.INT);
	        this.state = 1106;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1107;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1108;
	        this.match(StarRealmsParser.INT);
	        this.state = 1109;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1110;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hiddenBaseGambit() {
	    let localctx = new HiddenBaseGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, StarRealmsParser.RULE_hiddenBaseGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1113;
	        this.match(StarRealmsParser.CREATE);
	        this.state = 1115; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1114;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1117; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,41, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1119;
	        this.match(StarRealmsParser.SECRET);
	        this.state = 1120;
	        this.match(StarRealmsParser.OUTPOST);
	        this.state = 1121;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midGateEffect() {
	    let localctx = new MidGateEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, StarRealmsParser.RULE_midGateEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1123;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1124;
	        this.match(StarRealmsParser.ADD);
	        this.state = 1125;
	        this.match(StarRealmsParser.INT);
	        this.state = 1126;
	        this.wordPlus();
	        this.state = 1127;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1128;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1129;
	        this.match(StarRealmsParser.NUMBER);
	        this.state = 1130;
	        this.match(StarRealmsParser.OF);
	        this.state = 1131;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1132;
	        this.match(StarRealmsParser.RECEIVE);
	        this.state = 1133;
	        this.match(StarRealmsParser.INT);
	        this.state = 1134;
	        this.wordPlus();
	        this.state = 1135;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1136;
	        this.match(StarRealmsParser.EACH);
	        this.state = 1137;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alignBotEffect() {
	    let localctx = new AlignBotEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, StarRealmsParser.RULE_alignBotEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        this.match(StarRealmsParser.CHOSE);
	        this.state = 1140;
	        this.match(StarRealmsParser.ADD);
	        this.state = 1141;
	        this.match(StarRealmsParser.INT);
	        this.state = 1142;
	        this.wordPlus();
	        this.state = 1143;
	        this.match(StarRealmsParser.OPPONENT);
	        this.state = 1144;
	        this.match(StarRealmsParser.DISCARDS);
	        this.state = 1145;
	        this.match(StarRealmsParser.INT);
	        this.state = 1146;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1147;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choseEffectDetail() {
	    let localctx = new ChoseEffectDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, StarRealmsParser.RULE_choseEffectDetail);
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1149;
	            this.selectDiscard();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1150;
	            this.discardForPool();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1151;
	            this.discarding();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1152;
	            this.drawCardsWithShuffle();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1153;
	            this.noScrap();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1154;
	            this.simpleScrap();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1155;
	            this.positiveBalance();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1156;
	            this.refreshTradeRow();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1157;
	            this.changeHiddenBaseToFaction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1158;
	            this.replaceGambit();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1159;
	            this.scrap();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshTradeRow() {
	    let localctx = new RefreshTradeRowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, StarRealmsParser.RULE_refreshTradeRow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.match(StarRealmsParser.REFRESH);
	        this.state = 1163;
	        this.match(StarRealmsParser.TRADE);
	        this.state = 1164;
	        this.match(StarRealmsParser.ROW);
	        this.state = 1165;
	        this.match(StarRealmsParser.DISCOUNTS);
	        this.state = 1166;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeHiddenBaseToFaction() {
	    let localctx = new ChangeHiddenBaseToFactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, StarRealmsParser.RULE_changeHiddenBaseToFaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1169;
	        this.match(StarRealmsParser.SECRET);
	        this.state = 1170;
	        this.match(StarRealmsParser.OUTPOST);
	        this.state = 1171;
	        this.match(StarRealmsParser.TO);
	        this.state = 1173; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1172;
	            this.wordPlus();
	            this.state = 1175; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (StarRealmsParser.COMBAT - 6)) | (1 << (StarRealmsParser.AUTHORITY - 6)) | (1 << (StarRealmsParser.TRADE - 6)) | (1 << (StarRealmsParser.FEDERATION - 6)) | (1 << (StarRealmsParser.STAR - 6)) | (1 << (StarRealmsParser.EMPIRE - 6)) | (1 << (StarRealmsParser.MACHINE - 6)) | (1 << (StarRealmsParser.CULT - 6)) | (1 << (StarRealmsParser.ACQUIRE - 6)) | (1 << (StarRealmsParser.ACQUIRED - 6)) | (1 << (StarRealmsParser.UNALIGNED - 6)) | (1 << (StarRealmsParser.ACTIVATING - 6)) | (1 << (StarRealmsParser.ATTACKED - 6)) | (1 << (StarRealmsParser.SCRAPPING - 6)) | (1 << (StarRealmsParser.SCRAPPED - 6)) | (1 << (StarRealmsParser.OPPONENT - 6)) | (1 << (StarRealmsParser.DISCARDS - 6)) | (1 << (StarRealmsParser.SCRAP - 6)) | (1 << (StarRealmsParser.SELECTING - 6)) | (1 << (StarRealmsParser.SHUFFLED - 6)) | (1 << (StarRealmsParser.DISCARDED - 6)) | (1 << (StarRealmsParser.DISCARD - 6)) | (1 << (StarRealmsParser.DISCOUNTS - 6)) | (1 << (StarRealmsParser.REFRESH - 6)) | (1 << (StarRealmsParser.NEXT - 6)) | (1 << (StarRealmsParser.CONCEDED - 6)) | (1 << (StarRealmsParser.DISCARDING - 6)) | (1 << (StarRealmsParser.DESTROYED - 6)) | (1 << (StarRealmsParser.RESOLVING - 6)) | (1 << (StarRealmsParser.INDICATORS - 6)) | (1 << (StarRealmsParser.AVAILABLE - 6)) | (1 << (StarRealmsParser.RETURNING - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (StarRealmsParser.ABILITY - 38)) | (1 << (StarRealmsParser.CHANGED - 38)) | (1 << (StarRealmsParser.REVEALED - 38)) | (1 << (StarRealmsParser.COMPLETE - 38)) | (1 << (StarRealmsParser.REPLACED - 38)) | (1 << (StarRealmsParser.COPYING - 38)) | (1 << (StarRealmsParser.COPIED - 38)) | (1 << (StarRealmsParser.IMAGE - 38)) | (1 << (StarRealmsParser.RECEIVE - 38)) | (1 << (StarRealmsParser.REDRAW - 38)) | (1 << (StarRealmsParser.TABLE - 38)) | (1 << (StarRealmsParser.ALLIES - 38)) | (1 << (StarRealmsParser.EXPLORER - 38)) | (1 << (StarRealmsParser.SELECT - 38)) | (1 << (StarRealmsParser.SELECTED - 38)) | (1 << (StarRealmsParser.MISSION - 38)) | (1 << (StarRealmsParser.PUT - 38)) | (1 << (StarRealmsParser.CREATE - 38)) | (1 << (StarRealmsParser.PLAYED - 38)) | (1 << (StarRealmsParser.SECRET - 38)) | (1 << (StarRealmsParser.OUTPOST - 38)) | (1 << (StarRealmsParser.RETURN - 38)) | (1 << (StarRealmsParser.TARGET - 38)) | (1 << (StarRealmsParser.DRAW - 38)) | (1 << (StarRealmsParser.EVERY - 38)) | (1 << (StarRealmsParser.BLOB - 38)) | (1 << (StarRealmsParser.COPY - 38)) | (1 << (StarRealmsParser.CARDS - 38)) | (1 << (StarRealmsParser.CHOSE - 38)) | (1 << (StarRealmsParser.TURN - 38)) | (1 << (StarRealmsParser.DESTROY - 38)) | (1 << (StarRealmsParser.NUMBER - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (StarRealmsParser.LOSE - 70)) | (1 << (StarRealmsParser.SHIP - 70)) | (1 << (StarRealmsParser.SHIPS - 70)) | (1 << (StarRealmsParser.BASE - 70)) | (1 << (StarRealmsParser.BASES - 70)) | (1 << (StarRealmsParser.PILE - 70)) | (1 << (StarRealmsParser.EACH - 70)) | (1 << (StarRealmsParser.PLAY - 70)) | (1 << (StarRealmsParser.FORM - 70)) | (1 << (StarRealmsParser.COST - 70)) | (1 << (StarRealmsParser.DECK - 70)) | (1 << (StarRealmsParser.DREW - 70)) | (1 << (StarRealmsParser.ENDS - 70)) | (1 << (StarRealmsParser.CARD - 70)) | (1 << (StarRealmsParser.MORE2 - 70)) | (1 << (StarRealmsParser.FROM - 70)) | (1 << (StarRealmsParser.YOUR - 70)) | (1 << (StarRealmsParser.ALLY - 70)) | (1 << (StarRealmsParser.HAND - 70)) | (1 << (StarRealmsParser.GAME - 70)) | (1 << (StarRealmsParser.LESS - 70)) | (1 << (StarRealmsParser.MOVING - 70)) | (1 << (StarRealmsParser.INTO - 70)) | (1 << (StarRealmsParser.THIS - 70)) | (1 << (StarRealmsParser.EVENT - 70)) | (1 << (StarRealmsParser.NEW - 70)) | (1 << (StarRealmsParser.ALL - 70)) | (1 << (StarRealmsParser.NOW - 70)) | (1 << (StarRealmsParser.ROW - 70)) | (1 << (StarRealmsParser.THE - 70)) | (1 << (StarRealmsParser.TOP - 70)) | (1 << (StarRealmsParser.FOR - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (StarRealmsParser.DID - 102)) | (1 << (StarRealmsParser.AND - 102)) | (1 << (StarRealmsParser.ONE - 102)) | (1 << (StarRealmsParser.ADD - 102)) | (1 << (StarRealmsParser.NOT - 102)) | (1 << (StarRealmsParser.HAS - 102)) | (1 << (StarRealmsParser.WON - 102)) | (1 << (StarRealmsParser.WINS - 102)) | (1 << (StarRealmsParser.ANY - 102)) | (1 << (StarRealmsParser.IS - 102)) | (1 << (StarRealmsParser.IT - 102)) | (1 << (StarRealmsParser.IN - 102)) | (1 << (StarRealmsParser.TO - 102)) | (1 << (StarRealmsParser.OF - 102)) | (1 << (StarRealmsParser.UP - 102)) | (1 << (StarRealmsParser.OR - 102)) | (1 << (StarRealmsParser.NO - 102)) | (1 << (StarRealmsParser.ON - 102)) | (1 << (StarRealmsParser.WORD - 102)))) !== 0));
	        this.state = 1177;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingEffect() {
	    let localctx = new ActivatingEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, StarRealmsParser.RULE_activatingEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1179;
	        this.activatingSummary();
	        this.state = 1183;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1180;
	                this.activatingDetail(); 
	            }
	            this.state = 1185;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
	        }

	        this.state = 1187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 1186;
	            this.completeMission();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingSummary() {
	    let localctx = new ActivatingSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, StarRealmsParser.RULE_activatingSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.match(StarRealmsParser.ACTIVATING);
	        this.state = 1190;
	        this.card();
	        this.state = 1191;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activatingDetail() {
	    let localctx = new ActivatingDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, StarRealmsParser.RULE_activatingDetail);
	    try {
	        this.state = 1213;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1193;
	            this.resolveHandScrap();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1194;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1195;
	            this.scrapSummary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1196;
	            this.noScrap();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1197;
	            this.freeAcquireToTop();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1198;
	            this.destroyBase();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1199;
	            this.scrapDetail();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1200;
	            this.noCopy();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1201;
	            this.noCopyBases();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1202;
	            this.copyCard();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1203;
	            this.copyBase();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1204;
	            this.discardAndDraw();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1205;
	            this.positiveBalance();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1206;
	            this.negativeBalance();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1207;
	            this.resolveStealth();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1208;
	            this.copyStealth();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1209;
	            this.selectCard();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1210;
	            this.discarding();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1211;
	            this.discardEnd();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1212;
	            this.eventRefuseDiscard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrap() {
	    let localctx = new ScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, StarRealmsParser.RULE_scrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1216; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1215;
	        		this.scrapSummary();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1218; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1221; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1220;
	        		this.scrapDetail();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1223; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,48, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveHandScrap() {
	    let localctx = new ResolveHandScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, StarRealmsParser.RULE_resolveHandScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this.resolveHandScrapSummary();
	        this.state = 1226;
	        this.scrapDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freeAcquireToTop() {
	    let localctx = new FreeAcquireToTopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, StarRealmsParser.RULE_freeAcquireToTop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1228;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 1229;
	        this.card();
	        this.state = 1230;
	        this.match(StarRealmsParser.NEWLINE);
	        this.state = 1231;
	        this.purchaseToTop();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBase() {
	    let localctx = new CopyBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, StarRealmsParser.RULE_copyBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this.copyBaseSummary();
	        this.state = 1234;
	        this.copyBaseDetail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBaseSummary() {
	    let localctx = new CopyBaseSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, StarRealmsParser.RULE_copyBaseSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1236;
	        this.name();
	        this.state = 1237;
	        this.match(StarRealmsParser.COPIED);
	        this.state = 1238;
	        this.match(StarRealmsParser.BASE);
	        this.state = 1239;
	        this.name();
	        this.state = 1240;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyBaseDetail() {
	    let localctx = new CopyBaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, StarRealmsParser.RULE_copyBaseDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1242;
	        this.copyCardEffect();
	        this.state = 1246;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1243;
	                this.newBalanceDetail(); 
	            }
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noCopy() {
	    let localctx = new NoCopyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, StarRealmsParser.RULE_noCopy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        this.name();
	        this.state = 1250;
	        this.match(StarRealmsParser.IS);
	        this.state = 1251;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1252;
	        this.match(StarRealmsParser.COPYING);
	        this.state = 1253;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1254;
	        this.match(StarRealmsParser.SHIPS);
	        this.state = 1255;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noCopyBases() {
	    let localctx = new NoCopyBasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, StarRealmsParser.RULE_noCopyBases);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1257;
	        this.name();
	        this.state = 1258;
	        this.match(StarRealmsParser.DID);
	        this.state = 1259;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1260;
	        this.match(StarRealmsParser.COPY);
	        this.state = 1261;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1262;
	        this.match(StarRealmsParser.BASES);
	        this.state = 1263;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCard() {
	    let localctx = new CopyCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, StarRealmsParser.RULE_copyCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        this.copyCardSummary();
	        this.state = 1266;
	        this.copyCardEffect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCardSummary() {
	    let localctx = new CopyCardSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, StarRealmsParser.RULE_copyCardSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.name();
	        this.state = 1269;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1270;
	        this.match(StarRealmsParser.SHIP);
	        this.state = 1271;
	        this.card();
	        this.state = 1272;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyCardEffect() {
	    let localctx = new CopyCardEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, StarRealmsParser.RULE_copyCardEffect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1275;
	        this.card();
	        this.state = 1276;
	        this.match(StarRealmsParser.TO);
	        this.state = 1277;
	        this.card();
	        this.state = 1278;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purchaseToTop() {
	    let localctx = new PurchaseToTopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, StarRealmsParser.RULE_purchaseToTop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this.match(StarRealmsParser.ACQUIRED);
	        this.state = 1281;
	        this.card();
	        this.state = 1282;
	        this.match(StarRealmsParser.TO);
	        this.state = 1283;
	        this.match(StarRealmsParser.THE);
	        this.state = 1284;
	        this.match(StarRealmsParser.TOP);
	        this.state = 1285;
	        this.match(StarRealmsParser.OF);
	        this.state = 1286;
	        this.match(StarRealmsParser.THE);
	        this.state = 1287;
	        this.match(StarRealmsParser.DECK);
	        this.state = 1288;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapSummary() {
	    let localctx = new ScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, StarRealmsParser.RULE_scrapSummary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1290;
	        this.name();
	        this.state = 1291;
	        this.match(StarRealmsParser.IS);
	        this.state = 1292;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 1294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===StarRealmsParser.T__3) {
	            this.state = 1293;
	            this.match(StarRealmsParser.T__3);
	        }

	        this.state = 1296;
	        this.card();
	        this.state = 1297;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrapDetail() {
	    let localctx = new ScrapDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, StarRealmsParser.RULE_scrapDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(StarRealmsParser.SCRAPPED);
	        this.state = 1300;
	        this.card();
	        this.state = 1301;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveHandScrapSummary() {
	    let localctx = new ResolveHandScrapSummaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, StarRealmsParser.RULE_resolveHandScrapSummary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 1304;
	        this.match(StarRealmsParser.SCRAP);
	        this.state = 1305;
	        this.match(StarRealmsParser.WORD);
	        this.state = 1306;
	        this.match(StarRealmsParser.CARD);
	        this.state = 1307;
	        this.match(StarRealmsParser.FROM);
	        this.state = 1308;
	        this.match(StarRealmsParser.YOUR);
	        this.state = 1309;
	        this.match(StarRealmsParser.HAND);
	        this.state = 1310;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resolveStealth() {
	    let localctx = new ResolveStealthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, StarRealmsParser.RULE_resolveStealth);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.match(StarRealmsParser.RESOLVING);
	        this.state = 1313;
	        this.match(StarRealmsParser.FEDERATION);
	        this.state = 1314;
	        this.match(StarRealmsParser.OR);
	        this.state = 1315;
	        this.match(StarRealmsParser.STAR);
	        this.state = 1316;
	        this.match(StarRealmsParser.EMPIRE);
	        this.state = 1317;
	        this.match(StarRealmsParser.OR);
	        this.state = 1318;
	        this.match(StarRealmsParser.MACHINE);
	        this.state = 1319;
	        this.match(StarRealmsParser.CULT);
	        this.state = 1320;
	        this.match(StarRealmsParser.OR);
	        this.state = 1321;
	        this.match(StarRealmsParser.BLOB);
	        this.state = 1322;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyStealth() {
	    let localctx = new CopyStealthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, StarRealmsParser.RULE_copyStealth);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1325;
	        this.card();
	        this.state = 1326;
	        this.match(StarRealmsParser.TO);
	        this.state = 1328; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1327;
	            this.wordPlus();
	            this.state = 1330; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (StarRealmsParser.COMBAT - 6)) | (1 << (StarRealmsParser.AUTHORITY - 6)) | (1 << (StarRealmsParser.TRADE - 6)) | (1 << (StarRealmsParser.FEDERATION - 6)) | (1 << (StarRealmsParser.STAR - 6)) | (1 << (StarRealmsParser.EMPIRE - 6)) | (1 << (StarRealmsParser.MACHINE - 6)) | (1 << (StarRealmsParser.CULT - 6)) | (1 << (StarRealmsParser.ACQUIRE - 6)) | (1 << (StarRealmsParser.ACQUIRED - 6)) | (1 << (StarRealmsParser.UNALIGNED - 6)) | (1 << (StarRealmsParser.ACTIVATING - 6)) | (1 << (StarRealmsParser.ATTACKED - 6)) | (1 << (StarRealmsParser.SCRAPPING - 6)) | (1 << (StarRealmsParser.SCRAPPED - 6)) | (1 << (StarRealmsParser.OPPONENT - 6)) | (1 << (StarRealmsParser.DISCARDS - 6)) | (1 << (StarRealmsParser.SCRAP - 6)) | (1 << (StarRealmsParser.SELECTING - 6)) | (1 << (StarRealmsParser.SHUFFLED - 6)) | (1 << (StarRealmsParser.DISCARDED - 6)) | (1 << (StarRealmsParser.DISCARD - 6)) | (1 << (StarRealmsParser.DISCOUNTS - 6)) | (1 << (StarRealmsParser.REFRESH - 6)) | (1 << (StarRealmsParser.NEXT - 6)) | (1 << (StarRealmsParser.CONCEDED - 6)) | (1 << (StarRealmsParser.DISCARDING - 6)) | (1 << (StarRealmsParser.DESTROYED - 6)) | (1 << (StarRealmsParser.RESOLVING - 6)) | (1 << (StarRealmsParser.INDICATORS - 6)) | (1 << (StarRealmsParser.AVAILABLE - 6)) | (1 << (StarRealmsParser.RETURNING - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (StarRealmsParser.ABILITY - 38)) | (1 << (StarRealmsParser.CHANGED - 38)) | (1 << (StarRealmsParser.REVEALED - 38)) | (1 << (StarRealmsParser.COMPLETE - 38)) | (1 << (StarRealmsParser.REPLACED - 38)) | (1 << (StarRealmsParser.COPYING - 38)) | (1 << (StarRealmsParser.COPIED - 38)) | (1 << (StarRealmsParser.IMAGE - 38)) | (1 << (StarRealmsParser.RECEIVE - 38)) | (1 << (StarRealmsParser.REDRAW - 38)) | (1 << (StarRealmsParser.TABLE - 38)) | (1 << (StarRealmsParser.ALLIES - 38)) | (1 << (StarRealmsParser.EXPLORER - 38)) | (1 << (StarRealmsParser.SELECT - 38)) | (1 << (StarRealmsParser.SELECTED - 38)) | (1 << (StarRealmsParser.MISSION - 38)) | (1 << (StarRealmsParser.PUT - 38)) | (1 << (StarRealmsParser.CREATE - 38)) | (1 << (StarRealmsParser.PLAYED - 38)) | (1 << (StarRealmsParser.SECRET - 38)) | (1 << (StarRealmsParser.OUTPOST - 38)) | (1 << (StarRealmsParser.RETURN - 38)) | (1 << (StarRealmsParser.TARGET - 38)) | (1 << (StarRealmsParser.DRAW - 38)) | (1 << (StarRealmsParser.EVERY - 38)) | (1 << (StarRealmsParser.BLOB - 38)) | (1 << (StarRealmsParser.COPY - 38)) | (1 << (StarRealmsParser.CARDS - 38)) | (1 << (StarRealmsParser.CHOSE - 38)) | (1 << (StarRealmsParser.TURN - 38)) | (1 << (StarRealmsParser.DESTROY - 38)) | (1 << (StarRealmsParser.NUMBER - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (StarRealmsParser.LOSE - 70)) | (1 << (StarRealmsParser.SHIP - 70)) | (1 << (StarRealmsParser.SHIPS - 70)) | (1 << (StarRealmsParser.BASE - 70)) | (1 << (StarRealmsParser.BASES - 70)) | (1 << (StarRealmsParser.PILE - 70)) | (1 << (StarRealmsParser.EACH - 70)) | (1 << (StarRealmsParser.PLAY - 70)) | (1 << (StarRealmsParser.FORM - 70)) | (1 << (StarRealmsParser.COST - 70)) | (1 << (StarRealmsParser.DECK - 70)) | (1 << (StarRealmsParser.DREW - 70)) | (1 << (StarRealmsParser.ENDS - 70)) | (1 << (StarRealmsParser.CARD - 70)) | (1 << (StarRealmsParser.MORE2 - 70)) | (1 << (StarRealmsParser.FROM - 70)) | (1 << (StarRealmsParser.YOUR - 70)) | (1 << (StarRealmsParser.ALLY - 70)) | (1 << (StarRealmsParser.HAND - 70)) | (1 << (StarRealmsParser.GAME - 70)) | (1 << (StarRealmsParser.LESS - 70)) | (1 << (StarRealmsParser.MOVING - 70)) | (1 << (StarRealmsParser.INTO - 70)) | (1 << (StarRealmsParser.THIS - 70)) | (1 << (StarRealmsParser.EVENT - 70)) | (1 << (StarRealmsParser.NEW - 70)) | (1 << (StarRealmsParser.ALL - 70)) | (1 << (StarRealmsParser.NOW - 70)) | (1 << (StarRealmsParser.ROW - 70)) | (1 << (StarRealmsParser.THE - 70)) | (1 << (StarRealmsParser.TOP - 70)) | (1 << (StarRealmsParser.FOR - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (StarRealmsParser.DID - 102)) | (1 << (StarRealmsParser.AND - 102)) | (1 << (StarRealmsParser.ONE - 102)) | (1 << (StarRealmsParser.ADD - 102)) | (1 << (StarRealmsParser.NOT - 102)) | (1 << (StarRealmsParser.HAS - 102)) | (1 << (StarRealmsParser.WON - 102)) | (1 << (StarRealmsParser.WINS - 102)) | (1 << (StarRealmsParser.ANY - 102)) | (1 << (StarRealmsParser.IS - 102)) | (1 << (StarRealmsParser.IT - 102)) | (1 << (StarRealmsParser.IN - 102)) | (1 << (StarRealmsParser.TO - 102)) | (1 << (StarRealmsParser.OF - 102)) | (1 << (StarRealmsParser.UP - 102)) | (1 << (StarRealmsParser.OR - 102)) | (1 << (StarRealmsParser.NO - 102)) | (1 << (StarRealmsParser.ON - 102)) | (1 << (StarRealmsParser.WORD - 102)))) !== 0));
	        this.state = 1332;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardAndDraw() {
	    let localctx = new DiscardAndDrawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, StarRealmsParser.RULE_discardAndDraw);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1335; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1334;
	        		this.selectDiscard();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1337; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,52, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1340; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1339;
	            this.discarding();
	            this.state = 1342; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===StarRealmsParser.DISCARDED);
	        this.state = 1344;
	        this.drawCardsWithShuffle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endPhase() {
	    let localctx = new EndPhaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, StarRealmsParser.RULE_endPhase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.endTurn();
	        this.state = 1350;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1347;
	                this.drawPhaseDetail(); 
	            }
	            this.state = 1352;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	        this.state = 1353;
	        this.newTurn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endTurn() {
	    let localctx = new EndTurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, StarRealmsParser.RULE_endTurn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1355;
	        this.name();
	        this.state = 1356;
	        this.match(StarRealmsParser.ENDS);
	        this.state = 1357;
	        this.match(StarRealmsParser.TURN);
	        this.state = 1358;
	        this.match(StarRealmsParser.INT);
	        this.state = 1359;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawPhaseDetail() {
	    let localctx = new DrawPhaseDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, StarRealmsParser.RULE_drawPhaseDetail);
	    try {
	        this.state = 1365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1361;
	            this.resetCopiedCards();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1362;
	            this.drawCardsWithShuffle();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1363;
	            this.refreshIndicators();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1364;
	            this.eventRefuseDiscard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetCopiedCards() {
	    let localctx = new ResetCopiedCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, StarRealmsParser.RULE_resetCopiedCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this.match(StarRealmsParser.CHANGED);
	        this.state = 1368;
	        this.card();
	        this.state = 1369;
	        this.match(StarRealmsParser.TO);
	        this.state = 1370;
	        this.match(StarRealmsParser.UNALIGNED);
	        this.state = 1371;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshIndicators() {
	    let localctx = new RefreshIndicatorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, StarRealmsParser.RULE_refreshIndicators);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.match(StarRealmsParser.REFRESH);
	        this.state = 1374;
	        this.match(StarRealmsParser.ALLY);
	        this.state = 1375;
	        this.match(StarRealmsParser.INDICATORS);
	        this.state = 1376;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newTurn() {
	    let localctx = new NewTurnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, StarRealmsParser.RULE_newTurn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1378;
	        this.match(StarRealmsParser.IT);
	        this.state = 1379;
	        this.match(StarRealmsParser.IS);
	        this.state = 1380;
	        this.match(StarRealmsParser.NOW);
	        this.state = 1381;
	        this.name();
	        this.state = 1382;
	        this.match(StarRealmsParser.T__4);
	        this.state = 1383;
	        this.match(StarRealmsParser.TURN);
	        this.state = 1384;
	        this.match(StarRealmsParser.INT);
	        this.state = 1385;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectCard() {
	    let localctx = new SelectCardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, StarRealmsParser.RULE_selectCard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this.name();
	        this.state = 1388;
	        this.match(StarRealmsParser.IS);
	        this.state = 1389;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1390;
	        this.card();
	        this.state = 1391;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceGambit() {
	    let localctx = new ReplaceGambitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, StarRealmsParser.RULE_replaceGambit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this.match(StarRealmsParser.REPLACED);
	        this.state = 1394;
	        this.card();
	        this.state = 1395;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noScrap() {
	    let localctx = new NoScrapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, StarRealmsParser.RULE_noScrap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this.name();
	        this.state = 1398;
	        this.match(StarRealmsParser.IS);
	        this.state = 1399;
	        this.match(StarRealmsParser.NOT);
	        this.state = 1400;
	        this.match(StarRealmsParser.SCRAPPING);
	        this.state = 1401;
	        this.match(StarRealmsParser.ANY);
	        this.state = 1402;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1403;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectDiscard() {
	    let localctx = new SelectDiscardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, StarRealmsParser.RULE_selectDiscard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1405;
	        this.name();
	        this.state = 1406;
	        this.match(StarRealmsParser.IS);
	        this.state = 1407;
	        this.match(StarRealmsParser.SELECTING);
	        this.state = 1408;
	        this.card();
	        this.state = 1409;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardForPool() {
	    let localctx = new DiscardForPoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, StarRealmsParser.RULE_discardForPool);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1411;
	        this.name();
	        this.state = 1412;
	        this.match(StarRealmsParser.IS);
	        this.state = 1413;
	        this.match(StarRealmsParser.DISCARDING);
	        this.state = 1414;
	        this.match(StarRealmsParser.FOR);
	        this.state = 1415;
	        this.wordPlus();
	        this.state = 1416;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discarding() {
	    let localctx = new DiscardingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, StarRealmsParser.RULE_discarding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1418;
	        this.match(StarRealmsParser.DISCARDED);
	        this.state = 1419;
	        this.card();
	        this.state = 1420;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawCardsWithShuffle() {
	    let localctx = new DrawCardsWithShuffleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, StarRealmsParser.RULE_drawCardsWithShuffle);
	    var _la = 0; // Token type
	    try {
	        this.state = 1441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1423; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1422;
	                this.drawCards();
	                this.state = 1425; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===StarRealmsParser.DREW);
	            this.state = 1427;
	            this.shuffleCards();
	            this.state = 1429; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1428;
	            		this.drawCards();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1431; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,57, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===StarRealmsParser.SHUFFLED) {
	                this.state = 1433;
	                this.shuffleCards();
	            }

	            this.state = 1437; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1436;
	            		this.drawCards();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1439; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,59, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawCards() {
	    let localctx = new DrawCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, StarRealmsParser.RULE_drawCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(StarRealmsParser.DREW);
	        this.state = 1444;
	        this.match(StarRealmsParser.INT);
	        this.state = 1445;
	        this.match(StarRealmsParser.CARDS);
	        this.state = 1446;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newBalanceDetail() {
	    let localctx = new NewBalanceDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, StarRealmsParser.RULE_newBalanceDetail);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1448;
	        this.name();
	        this.state = 1449;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 1450;
	            this.card();

	        }
	        this.state = 1453;
	        this.effect();
	        this.state = 1454;
	        this.balance();
	        this.state = 1455;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	effect() {
	    let localctx = new EffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, StarRealmsParser.RULE_effect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1457;
	        _la = this._input.LA(1);
	        if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (StarRealmsParser.INT - 128)) | (1 << (StarRealmsParser.INCREMENT - 128)) | (1 << (StarRealmsParser.DECREASE - 128)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1458;
	        this.wordPlus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positiveBalance() {
	    let localctx = new PositiveBalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, StarRealmsParser.RULE_positiveBalance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1460;
	        this.name();
	        this.state = 1461;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 1462;
	            this.card();

	        }
	        this.state = 1465;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.INCREMENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1466;
	        this.wordPlus();
	        this.state = 1467;
	        this.balance();
	        this.state = 1468;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negativeBalance() {
	    let localctx = new NegativeBalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, StarRealmsParser.RULE_negativeBalance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1470;
	        this.name();
	        this.state = 1471;
	        this.match(StarRealmsParser.SEPARATOR);
	        this.state = 1473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (StarRealmsParser.COMBAT - 6)) | (1 << (StarRealmsParser.AUTHORITY - 6)) | (1 << (StarRealmsParser.TRADE - 6)) | (1 << (StarRealmsParser.FEDERATION - 6)) | (1 << (StarRealmsParser.STAR - 6)) | (1 << (StarRealmsParser.EMPIRE - 6)) | (1 << (StarRealmsParser.MACHINE - 6)) | (1 << (StarRealmsParser.CULT - 6)) | (1 << (StarRealmsParser.ACQUIRE - 6)) | (1 << (StarRealmsParser.ACQUIRED - 6)) | (1 << (StarRealmsParser.UNALIGNED - 6)) | (1 << (StarRealmsParser.ACTIVATING - 6)) | (1 << (StarRealmsParser.ATTACKED - 6)) | (1 << (StarRealmsParser.SCRAPPING - 6)) | (1 << (StarRealmsParser.SCRAPPED - 6)) | (1 << (StarRealmsParser.OPPONENT - 6)) | (1 << (StarRealmsParser.DISCARDS - 6)) | (1 << (StarRealmsParser.SCRAP - 6)) | (1 << (StarRealmsParser.SELECTING - 6)) | (1 << (StarRealmsParser.SHUFFLED - 6)) | (1 << (StarRealmsParser.DISCARDED - 6)) | (1 << (StarRealmsParser.DISCARD - 6)) | (1 << (StarRealmsParser.DISCOUNTS - 6)) | (1 << (StarRealmsParser.REFRESH - 6)) | (1 << (StarRealmsParser.NEXT - 6)) | (1 << (StarRealmsParser.CONCEDED - 6)) | (1 << (StarRealmsParser.DISCARDING - 6)) | (1 << (StarRealmsParser.DESTROYED - 6)) | (1 << (StarRealmsParser.RESOLVING - 6)) | (1 << (StarRealmsParser.INDICATORS - 6)) | (1 << (StarRealmsParser.AVAILABLE - 6)) | (1 << (StarRealmsParser.RETURNING - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (StarRealmsParser.ABILITY - 38)) | (1 << (StarRealmsParser.CHANGED - 38)) | (1 << (StarRealmsParser.REVEALED - 38)) | (1 << (StarRealmsParser.COMPLETE - 38)) | (1 << (StarRealmsParser.REPLACED - 38)) | (1 << (StarRealmsParser.COPYING - 38)) | (1 << (StarRealmsParser.COPIED - 38)) | (1 << (StarRealmsParser.IMAGE - 38)) | (1 << (StarRealmsParser.RECEIVE - 38)) | (1 << (StarRealmsParser.REDRAW - 38)) | (1 << (StarRealmsParser.TABLE - 38)) | (1 << (StarRealmsParser.ALLIES - 38)) | (1 << (StarRealmsParser.EXPLORER - 38)) | (1 << (StarRealmsParser.SELECT - 38)) | (1 << (StarRealmsParser.SELECTED - 38)) | (1 << (StarRealmsParser.MISSION - 38)) | (1 << (StarRealmsParser.PUT - 38)) | (1 << (StarRealmsParser.CREATE - 38)) | (1 << (StarRealmsParser.PLAYED - 38)) | (1 << (StarRealmsParser.SECRET - 38)) | (1 << (StarRealmsParser.OUTPOST - 38)) | (1 << (StarRealmsParser.RETURN - 38)) | (1 << (StarRealmsParser.TARGET - 38)) | (1 << (StarRealmsParser.DRAW - 38)) | (1 << (StarRealmsParser.EVERY - 38)) | (1 << (StarRealmsParser.BLOB - 38)) | (1 << (StarRealmsParser.COPY - 38)) | (1 << (StarRealmsParser.CARDS - 38)) | (1 << (StarRealmsParser.CHOSE - 38)) | (1 << (StarRealmsParser.TURN - 38)) | (1 << (StarRealmsParser.DESTROY - 38)) | (1 << (StarRealmsParser.NUMBER - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (StarRealmsParser.LOSE - 70)) | (1 << (StarRealmsParser.SHIP - 70)) | (1 << (StarRealmsParser.SHIPS - 70)) | (1 << (StarRealmsParser.BASE - 70)) | (1 << (StarRealmsParser.BASES - 70)) | (1 << (StarRealmsParser.PILE - 70)) | (1 << (StarRealmsParser.EACH - 70)) | (1 << (StarRealmsParser.PLAY - 70)) | (1 << (StarRealmsParser.FORM - 70)) | (1 << (StarRealmsParser.COST - 70)) | (1 << (StarRealmsParser.DECK - 70)) | (1 << (StarRealmsParser.DREW - 70)) | (1 << (StarRealmsParser.ENDS - 70)) | (1 << (StarRealmsParser.CARD - 70)) | (1 << (StarRealmsParser.MORE2 - 70)) | (1 << (StarRealmsParser.FROM - 70)) | (1 << (StarRealmsParser.YOUR - 70)) | (1 << (StarRealmsParser.ALLY - 70)) | (1 << (StarRealmsParser.HAND - 70)) | (1 << (StarRealmsParser.GAME - 70)) | (1 << (StarRealmsParser.LESS - 70)) | (1 << (StarRealmsParser.MOVING - 70)) | (1 << (StarRealmsParser.INTO - 70)) | (1 << (StarRealmsParser.THIS - 70)) | (1 << (StarRealmsParser.EVENT - 70)) | (1 << (StarRealmsParser.NEW - 70)) | (1 << (StarRealmsParser.ALL - 70)) | (1 << (StarRealmsParser.NOW - 70)) | (1 << (StarRealmsParser.ROW - 70)) | (1 << (StarRealmsParser.THE - 70)) | (1 << (StarRealmsParser.TOP - 70)) | (1 << (StarRealmsParser.FOR - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (StarRealmsParser.DID - 102)) | (1 << (StarRealmsParser.AND - 102)) | (1 << (StarRealmsParser.ONE - 102)) | (1 << (StarRealmsParser.ADD - 102)) | (1 << (StarRealmsParser.NOT - 102)) | (1 << (StarRealmsParser.HAS - 102)) | (1 << (StarRealmsParser.WON - 102)) | (1 << (StarRealmsParser.WINS - 102)) | (1 << (StarRealmsParser.ANY - 102)) | (1 << (StarRealmsParser.IS - 102)) | (1 << (StarRealmsParser.IT - 102)) | (1 << (StarRealmsParser.IN - 102)) | (1 << (StarRealmsParser.TO - 102)) | (1 << (StarRealmsParser.OF - 102)) | (1 << (StarRealmsParser.UP - 102)) | (1 << (StarRealmsParser.OR - 102)) | (1 << (StarRealmsParser.NO - 102)) | (1 << (StarRealmsParser.ON - 102)) | (1 << (StarRealmsParser.INT - 102)) | (1 << (StarRealmsParser.WORD - 102)))) !== 0)) {
	            this.state = 1472;
	            this.card();
	        }

	        this.state = 1475;
	        this.match(StarRealmsParser.DECREASE);

	        this.state = 1476;
	        this.wordPlus();
	        this.state = 1477;
	        this.balance();
	        this.state = 1478;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balance() {
	    let localctx = new BalanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, StarRealmsParser.RULE_balance);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.match(StarRealmsParser.T__0);
	        this.state = 1481;
	        this.wordPlus();
	        this.state = 1482;
	        this.match(StarRealmsParser.T__3);
	        this.state = 1483;
	        _la = this._input.LA(1);
	        if(!(_la===StarRealmsParser.INT || _la===StarRealmsParser.DECREASE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1484;
	        this.match(StarRealmsParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destroyBase() {
	    let localctx = new DestroyBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, StarRealmsParser.RULE_destroyBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        this.match(StarRealmsParser.DESTROYED);
	        this.state = 1487;
	        this.card();
	        this.state = 1488;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shuffleCards() {
	    let localctx = new ShuffleCardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, StarRealmsParser.RULE_shuffleCards);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        this.match(StarRealmsParser.SHUFFLED);
	        this.state = 1491;
	        this.match(StarRealmsParser.DISCARD);
	        this.state = 1492;
	        this.match(StarRealmsParser.PILE);
	        this.state = 1493;
	        this.match(StarRealmsParser.TO);
	        this.state = 1494;
	        this.match(StarRealmsParser.FORM);
	        this.state = 1495;
	        this.match(StarRealmsParser.NEW);
	        this.state = 1496;
	        this.match(StarRealmsParser.DECK);
	        this.state = 1497;
	        this.match(StarRealmsParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, StarRealmsParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1500; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1499;
	        		this.wordPlus();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1502; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,64, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	card() {
	    let localctx = new CardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, StarRealmsParser.RULE_card);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1509;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case StarRealmsParser.COMBAT:
	        		case StarRealmsParser.AUTHORITY:
	        		case StarRealmsParser.TRADE:
	        		case StarRealmsParser.FEDERATION:
	        		case StarRealmsParser.STAR:
	        		case StarRealmsParser.EMPIRE:
	        		case StarRealmsParser.MACHINE:
	        		case StarRealmsParser.CULT:
	        		case StarRealmsParser.ACQUIRE:
	        		case StarRealmsParser.ACQUIRED:
	        		case StarRealmsParser.UNALIGNED:
	        		case StarRealmsParser.ACTIVATING:
	        		case StarRealmsParser.ATTACKED:
	        		case StarRealmsParser.SCRAPPING:
	        		case StarRealmsParser.SCRAPPED:
	        		case StarRealmsParser.OPPONENT:
	        		case StarRealmsParser.DISCARDS:
	        		case StarRealmsParser.SCRAP:
	        		case StarRealmsParser.SELECTING:
	        		case StarRealmsParser.SHUFFLED:
	        		case StarRealmsParser.DISCARDED:
	        		case StarRealmsParser.DISCARD:
	        		case StarRealmsParser.DISCOUNTS:
	        		case StarRealmsParser.REFRESH:
	        		case StarRealmsParser.NEXT:
	        		case StarRealmsParser.CONCEDED:
	        		case StarRealmsParser.DISCARDING:
	        		case StarRealmsParser.DESTROYED:
	        		case StarRealmsParser.RESOLVING:
	        		case StarRealmsParser.INDICATORS:
	        		case StarRealmsParser.AVAILABLE:
	        		case StarRealmsParser.RETURNING:
	        		case StarRealmsParser.ABILITY:
	        		case StarRealmsParser.CHANGED:
	        		case StarRealmsParser.REVEALED:
	        		case StarRealmsParser.COMPLETE:
	        		case StarRealmsParser.REPLACED:
	        		case StarRealmsParser.COPYING:
	        		case StarRealmsParser.COPIED:
	        		case StarRealmsParser.IMAGE:
	        		case StarRealmsParser.RECEIVE:
	        		case StarRealmsParser.REDRAW:
	        		case StarRealmsParser.TABLE:
	        		case StarRealmsParser.ALLIES:
	        		case StarRealmsParser.EXPLORER:
	        		case StarRealmsParser.SELECT:
	        		case StarRealmsParser.SELECTED:
	        		case StarRealmsParser.MISSION:
	        		case StarRealmsParser.PUT:
	        		case StarRealmsParser.CREATE:
	        		case StarRealmsParser.PLAYED:
	        		case StarRealmsParser.SECRET:
	        		case StarRealmsParser.OUTPOST:
	        		case StarRealmsParser.RETURN:
	        		case StarRealmsParser.TARGET:
	        		case StarRealmsParser.DRAW:
	        		case StarRealmsParser.EVERY:
	        		case StarRealmsParser.BLOB:
	        		case StarRealmsParser.COPY:
	        		case StarRealmsParser.CARDS:
	        		case StarRealmsParser.CHOSE:
	        		case StarRealmsParser.TURN:
	        		case StarRealmsParser.DESTROY:
	        		case StarRealmsParser.NUMBER:
	        		case StarRealmsParser.LOSE:
	        		case StarRealmsParser.SHIP:
	        		case StarRealmsParser.SHIPS:
	        		case StarRealmsParser.BASE:
	        		case StarRealmsParser.BASES:
	        		case StarRealmsParser.PILE:
	        		case StarRealmsParser.EACH:
	        		case StarRealmsParser.PLAY:
	        		case StarRealmsParser.FORM:
	        		case StarRealmsParser.COST:
	        		case StarRealmsParser.DECK:
	        		case StarRealmsParser.DREW:
	        		case StarRealmsParser.ENDS:
	        		case StarRealmsParser.CARD:
	        		case StarRealmsParser.MORE2:
	        		case StarRealmsParser.FROM:
	        		case StarRealmsParser.YOUR:
	        		case StarRealmsParser.ALLY:
	        		case StarRealmsParser.HAND:
	        		case StarRealmsParser.GAME:
	        		case StarRealmsParser.LESS:
	        		case StarRealmsParser.MOVING:
	        		case StarRealmsParser.INTO:
	        		case StarRealmsParser.THIS:
	        		case StarRealmsParser.EVENT:
	        		case StarRealmsParser.NEW:
	        		case StarRealmsParser.ALL:
	        		case StarRealmsParser.NOW:
	        		case StarRealmsParser.ROW:
	        		case StarRealmsParser.THE:
	        		case StarRealmsParser.TOP:
	        		case StarRealmsParser.FOR:
	        		case StarRealmsParser.DID:
	        		case StarRealmsParser.AND:
	        		case StarRealmsParser.ONE:
	        		case StarRealmsParser.ADD:
	        		case StarRealmsParser.NOT:
	        		case StarRealmsParser.HAS:
	        		case StarRealmsParser.WON:
	        		case StarRealmsParser.WINS:
	        		case StarRealmsParser.ANY:
	        		case StarRealmsParser.IS:
	        		case StarRealmsParser.IT:
	        		case StarRealmsParser.IN:
	        		case StarRealmsParser.TO:
	        		case StarRealmsParser.OF:
	        		case StarRealmsParser.UP:
	        		case StarRealmsParser.OR:
	        		case StarRealmsParser.NO:
	        		case StarRealmsParser.ON:
	        		case StarRealmsParser.WORD:
	        		    this.state = 1504;
	        		    this.wordPlus();
	        		    this.state = 1506;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===StarRealmsParser.T__4) {
	        		        this.state = 1505;
	        		        this.match(StarRealmsParser.T__4);
	        		    }

	        		    break;
	        		case StarRealmsParser.INT:
	        		    this.state = 1508;
	        		    this.match(StarRealmsParser.INT);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1511; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wordPlus() {
	    let localctx = new WordPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, StarRealmsParser.RULE_wordPlus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513;
	        _la = this._input.LA(1);
	        if(!(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (StarRealmsParser.COMBAT - 6)) | (1 << (StarRealmsParser.AUTHORITY - 6)) | (1 << (StarRealmsParser.TRADE - 6)) | (1 << (StarRealmsParser.FEDERATION - 6)) | (1 << (StarRealmsParser.STAR - 6)) | (1 << (StarRealmsParser.EMPIRE - 6)) | (1 << (StarRealmsParser.MACHINE - 6)) | (1 << (StarRealmsParser.CULT - 6)) | (1 << (StarRealmsParser.ACQUIRE - 6)) | (1 << (StarRealmsParser.ACQUIRED - 6)) | (1 << (StarRealmsParser.UNALIGNED - 6)) | (1 << (StarRealmsParser.ACTIVATING - 6)) | (1 << (StarRealmsParser.ATTACKED - 6)) | (1 << (StarRealmsParser.SCRAPPING - 6)) | (1 << (StarRealmsParser.SCRAPPED - 6)) | (1 << (StarRealmsParser.OPPONENT - 6)) | (1 << (StarRealmsParser.DISCARDS - 6)) | (1 << (StarRealmsParser.SCRAP - 6)) | (1 << (StarRealmsParser.SELECTING - 6)) | (1 << (StarRealmsParser.SHUFFLED - 6)) | (1 << (StarRealmsParser.DISCARDED - 6)) | (1 << (StarRealmsParser.DISCARD - 6)) | (1 << (StarRealmsParser.DISCOUNTS - 6)) | (1 << (StarRealmsParser.REFRESH - 6)) | (1 << (StarRealmsParser.NEXT - 6)) | (1 << (StarRealmsParser.CONCEDED - 6)) | (1 << (StarRealmsParser.DISCARDING - 6)) | (1 << (StarRealmsParser.DESTROYED - 6)) | (1 << (StarRealmsParser.RESOLVING - 6)) | (1 << (StarRealmsParser.INDICATORS - 6)) | (1 << (StarRealmsParser.AVAILABLE - 6)) | (1 << (StarRealmsParser.RETURNING - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (StarRealmsParser.ABILITY - 38)) | (1 << (StarRealmsParser.CHANGED - 38)) | (1 << (StarRealmsParser.REVEALED - 38)) | (1 << (StarRealmsParser.COMPLETE - 38)) | (1 << (StarRealmsParser.REPLACED - 38)) | (1 << (StarRealmsParser.COPYING - 38)) | (1 << (StarRealmsParser.COPIED - 38)) | (1 << (StarRealmsParser.IMAGE - 38)) | (1 << (StarRealmsParser.RECEIVE - 38)) | (1 << (StarRealmsParser.REDRAW - 38)) | (1 << (StarRealmsParser.TABLE - 38)) | (1 << (StarRealmsParser.ALLIES - 38)) | (1 << (StarRealmsParser.EXPLORER - 38)) | (1 << (StarRealmsParser.SELECT - 38)) | (1 << (StarRealmsParser.SELECTED - 38)) | (1 << (StarRealmsParser.MISSION - 38)) | (1 << (StarRealmsParser.PUT - 38)) | (1 << (StarRealmsParser.CREATE - 38)) | (1 << (StarRealmsParser.PLAYED - 38)) | (1 << (StarRealmsParser.SECRET - 38)) | (1 << (StarRealmsParser.OUTPOST - 38)) | (1 << (StarRealmsParser.RETURN - 38)) | (1 << (StarRealmsParser.TARGET - 38)) | (1 << (StarRealmsParser.DRAW - 38)) | (1 << (StarRealmsParser.EVERY - 38)) | (1 << (StarRealmsParser.BLOB - 38)) | (1 << (StarRealmsParser.COPY - 38)) | (1 << (StarRealmsParser.CARDS - 38)) | (1 << (StarRealmsParser.CHOSE - 38)) | (1 << (StarRealmsParser.TURN - 38)) | (1 << (StarRealmsParser.DESTROY - 38)) | (1 << (StarRealmsParser.NUMBER - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (StarRealmsParser.LOSE - 70)) | (1 << (StarRealmsParser.SHIP - 70)) | (1 << (StarRealmsParser.SHIPS - 70)) | (1 << (StarRealmsParser.BASE - 70)) | (1 << (StarRealmsParser.BASES - 70)) | (1 << (StarRealmsParser.PILE - 70)) | (1 << (StarRealmsParser.EACH - 70)) | (1 << (StarRealmsParser.PLAY - 70)) | (1 << (StarRealmsParser.FORM - 70)) | (1 << (StarRealmsParser.COST - 70)) | (1 << (StarRealmsParser.DECK - 70)) | (1 << (StarRealmsParser.DREW - 70)) | (1 << (StarRealmsParser.ENDS - 70)) | (1 << (StarRealmsParser.CARD - 70)) | (1 << (StarRealmsParser.MORE2 - 70)) | (1 << (StarRealmsParser.FROM - 70)) | (1 << (StarRealmsParser.YOUR - 70)) | (1 << (StarRealmsParser.ALLY - 70)) | (1 << (StarRealmsParser.HAND - 70)) | (1 << (StarRealmsParser.GAME - 70)) | (1 << (StarRealmsParser.LESS - 70)) | (1 << (StarRealmsParser.MOVING - 70)) | (1 << (StarRealmsParser.INTO - 70)) | (1 << (StarRealmsParser.THIS - 70)) | (1 << (StarRealmsParser.EVENT - 70)) | (1 << (StarRealmsParser.NEW - 70)) | (1 << (StarRealmsParser.ALL - 70)) | (1 << (StarRealmsParser.NOW - 70)) | (1 << (StarRealmsParser.ROW - 70)) | (1 << (StarRealmsParser.THE - 70)) | (1 << (StarRealmsParser.TOP - 70)) | (1 << (StarRealmsParser.FOR - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (StarRealmsParser.DID - 102)) | (1 << (StarRealmsParser.AND - 102)) | (1 << (StarRealmsParser.ONE - 102)) | (1 << (StarRealmsParser.ADD - 102)) | (1 << (StarRealmsParser.NOT - 102)) | (1 << (StarRealmsParser.HAS - 102)) | (1 << (StarRealmsParser.WON - 102)) | (1 << (StarRealmsParser.WINS - 102)) | (1 << (StarRealmsParser.ANY - 102)) | (1 << (StarRealmsParser.IS - 102)) | (1 << (StarRealmsParser.IT - 102)) | (1 << (StarRealmsParser.IN - 102)) | (1 << (StarRealmsParser.TO - 102)) | (1 << (StarRealmsParser.OF - 102)) | (1 << (StarRealmsParser.UP - 102)) | (1 << (StarRealmsParser.OR - 102)) | (1 << (StarRealmsParser.NO - 102)) | (1 << (StarRealmsParser.ON - 102)) | (1 << (StarRealmsParser.WORD - 102)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

StarRealmsParser.EOF = antlr4.Token.EOF;
StarRealmsParser.T__0 = 1;
StarRealmsParser.T__1 = 2;
StarRealmsParser.T__2 = 3;
StarRealmsParser.T__3 = 4;
StarRealmsParser.T__4 = 5;
StarRealmsParser.COMBAT = 6;
StarRealmsParser.AUTHORITY = 7;
StarRealmsParser.TRADE = 8;
StarRealmsParser.FEDERATION = 9;
StarRealmsParser.STAR = 10;
StarRealmsParser.EMPIRE = 11;
StarRealmsParser.MACHINE = 12;
StarRealmsParser.CULT = 13;
StarRealmsParser.ACQUIRE = 14;
StarRealmsParser.ACQUIRED = 15;
StarRealmsParser.UNALIGNED = 16;
StarRealmsParser.ACTIVATING = 17;
StarRealmsParser.ATTACKED = 18;
StarRealmsParser.SCRAPPING = 19;
StarRealmsParser.SCRAPPED = 20;
StarRealmsParser.OPPONENT = 21;
StarRealmsParser.DISCARDS = 22;
StarRealmsParser.SCRAP = 23;
StarRealmsParser.SELECTING = 24;
StarRealmsParser.SHUFFLED = 25;
StarRealmsParser.DISCARDED = 26;
StarRealmsParser.DISCARD = 27;
StarRealmsParser.DISCOUNTS = 28;
StarRealmsParser.REFRESH = 29;
StarRealmsParser.NEXT = 30;
StarRealmsParser.CONCEDED = 31;
StarRealmsParser.DISCARDING = 32;
StarRealmsParser.DESTROYED = 33;
StarRealmsParser.RESOLVING = 34;
StarRealmsParser.INDICATORS = 35;
StarRealmsParser.AVAILABLE = 36;
StarRealmsParser.RETURNING = 37;
StarRealmsParser.ABILITY = 38;
StarRealmsParser.CHANGED = 39;
StarRealmsParser.REVEALED = 40;
StarRealmsParser.COMPLETE = 41;
StarRealmsParser.REPLACED = 42;
StarRealmsParser.COPYING = 43;
StarRealmsParser.COPIED = 44;
StarRealmsParser.IMAGE = 45;
StarRealmsParser.RECEIVE = 46;
StarRealmsParser.REDRAW = 47;
StarRealmsParser.TABLE = 48;
StarRealmsParser.ALLIES = 49;
StarRealmsParser.EXPLORER = 50;
StarRealmsParser.SELECT = 51;
StarRealmsParser.SELECTED = 52;
StarRealmsParser.MISSION = 53;
StarRealmsParser.PUT = 54;
StarRealmsParser.CREATE = 55;
StarRealmsParser.PLAYED = 56;
StarRealmsParser.SECRET = 57;
StarRealmsParser.OUTPOST = 58;
StarRealmsParser.RETURN = 59;
StarRealmsParser.TARGET = 60;
StarRealmsParser.DRAW = 61;
StarRealmsParser.EVERY = 62;
StarRealmsParser.BLOB = 63;
StarRealmsParser.COPY = 64;
StarRealmsParser.CARDS = 65;
StarRealmsParser.CHOSE = 66;
StarRealmsParser.TURN = 67;
StarRealmsParser.DESTROY = 68;
StarRealmsParser.NUMBER = 69;
StarRealmsParser.LOSE = 70;
StarRealmsParser.SHIP = 71;
StarRealmsParser.SHIPS = 72;
StarRealmsParser.BASE = 73;
StarRealmsParser.BASES = 74;
StarRealmsParser.PILE = 75;
StarRealmsParser.EACH = 76;
StarRealmsParser.PLAY = 77;
StarRealmsParser.FORM = 78;
StarRealmsParser.COST = 79;
StarRealmsParser.DECK = 80;
StarRealmsParser.DREW = 81;
StarRealmsParser.ENDS = 82;
StarRealmsParser.CARD = 83;
StarRealmsParser.MORE2 = 84;
StarRealmsParser.FROM = 85;
StarRealmsParser.YOUR = 86;
StarRealmsParser.ALLY = 87;
StarRealmsParser.HAND = 88;
StarRealmsParser.GAME = 89;
StarRealmsParser.LESS = 90;
StarRealmsParser.MOVING = 91;
StarRealmsParser.INTO = 92;
StarRealmsParser.THIS = 93;
StarRealmsParser.EVENT = 94;
StarRealmsParser.NEW = 95;
StarRealmsParser.ALL = 96;
StarRealmsParser.NOW = 97;
StarRealmsParser.ROW = 98;
StarRealmsParser.THE = 99;
StarRealmsParser.TOP = 100;
StarRealmsParser.FOR = 101;
StarRealmsParser.DID = 102;
StarRealmsParser.AND = 103;
StarRealmsParser.ONE = 104;
StarRealmsParser.ADD = 105;
StarRealmsParser.NOT = 106;
StarRealmsParser.HAS = 107;
StarRealmsParser.WON = 108;
StarRealmsParser.WINS = 109;
StarRealmsParser.ANY = 110;
StarRealmsParser.IS = 111;
StarRealmsParser.IT = 112;
StarRealmsParser.AT = 113;
StarRealmsParser.IN = 114;
StarRealmsParser.TO = 115;
StarRealmsParser.OF = 116;
StarRealmsParser.UP = 117;
StarRealmsParser.OR = 118;
StarRealmsParser.NO = 119;
StarRealmsParser.ON = 120;
StarRealmsParser.WHITESPACE = 121;
StarRealmsParser.COLOR_START_TAG = 122;
StarRealmsParser.COLOR_END_TAG = 123;
StarRealmsParser.END_GAME_TAG = 124;
StarRealmsParser.DOT = 125;
StarRealmsParser.SEMICOLUM = 126;
StarRealmsParser.COMMA = 127;
StarRealmsParser.INT = 128;
StarRealmsParser.WORD = 129;
StarRealmsParser.SEPARATOR = 130;
StarRealmsParser.INCREMENT = 131;
StarRealmsParser.DECREASE = 132;
StarRealmsParser.NEWLINE = 133;

StarRealmsParser.RULE_battle = 0;
StarRealmsParser.RULE_turn = 1;
StarRealmsParser.RULE_action = 2;
StarRealmsParser.RULE_winStatus = 3;
StarRealmsParser.RULE_concede = 4;
StarRealmsParser.RULE_timeout = 5;
StarRealmsParser.RULE_startTurnEffect = 6;
StarRealmsParser.RULE_purchaseHero = 7;
StarRealmsParser.RULE_purchaseHeroDetail = 8;
StarRealmsParser.RULE_acquireHeroToTable = 9;
StarRealmsParser.RULE_playHero = 10;
StarRealmsParser.RULE_tradeRowScrap = 11;
StarRealmsParser.RULE_resolveFreeAcquire = 12;
StarRealmsParser.RULE_resolveSelfScrap = 13;
StarRealmsParser.RULE_resolveDiscardAndDraw = 14;
StarRealmsParser.RULE_purchase = 15;
StarRealmsParser.RULE_purchaseSummary = 16;
StarRealmsParser.RULE_purchaseDetail = 17;
StarRealmsParser.RULE_acquireToHand = 18;
StarRealmsParser.RULE_acquireToDeck = 19;
StarRealmsParser.RULE_play = 20;
StarRealmsParser.RULE_playSummary = 21;
StarRealmsParser.RULE_playSingle = 22;
StarRealmsParser.RULE_playDetail = 23;
StarRealmsParser.RULE_newAbility = 24;
StarRealmsParser.RULE_multiScrap = 25;
StarRealmsParser.RULE_multiScrapSummary = 26;
StarRealmsParser.RULE_multiScrapDetail = 27;
StarRealmsParser.RULE_scrapCardEffect = 28;
StarRealmsParser.RULE_simpleScrap = 29;
StarRealmsParser.RULE_moveBaseToDeck = 30;
StarRealmsParser.RULE_freeAcquire = 31;
StarRealmsParser.RULE_refreshCost = 32;
StarRealmsParser.RULE_triggeredEvent = 33;
StarRealmsParser.RULE_triggeredEventSummary = 34;
StarRealmsParser.RULE_triggeredEventDetail = 35;
StarRealmsParser.RULE_selectMission = 36;
StarRealmsParser.RULE_resolveSelectMission = 37;
StarRealmsParser.RULE_actionSelectMission = 38;
StarRealmsParser.RULE_completeMission = 39;
StarRealmsParser.RULE_completeMissionSummary = 40;
StarRealmsParser.RULE_completeMissionsDetail = 41;
StarRealmsParser.RULE_selectMissionsReward = 42;
StarRealmsParser.RULE_resolveAllyReward = 43;
StarRealmsParser.RULE_resolveRuleReward = 44;
StarRealmsParser.RULE_resolveDefendReward = 45;
StarRealmsParser.RULE_resolveConvertReward = 46;
StarRealmsParser.RULE_resolveEvent = 47;
StarRealmsParser.RULE_resolveEventSummary = 48;
StarRealmsParser.RULE_resolveSimple = 49;
StarRealmsParser.RULE_resolveBombardment = 50;
StarRealmsParser.RULE_resolveComet = 51;
StarRealmsParser.RULE_resolveSupplyRun = 52;
StarRealmsParser.RULE_resolvingTacticalMan1 = 53;
StarRealmsParser.RULE_resolvingTacticalMan2 = 54;
StarRealmsParser.RULE_resolveWormhole = 55;
StarRealmsParser.RULE_resolveSplinterGambit = 56;
StarRealmsParser.RULE_resolveEventDetail = 57;
StarRealmsParser.RULE_discardFromEvent = 58;
StarRealmsParser.RULE_resolveMobilization = 59;
StarRealmsParser.RULE_moveCardToHand = 60;
StarRealmsParser.RULE_resolveCard = 61;
StarRealmsParser.RULE_attackPlayer = 62;
StarRealmsParser.RULE_attackPlayerSummary = 63;
StarRealmsParser.RULE_newAuthority = 64;
StarRealmsParser.RULE_attackBase = 65;
StarRealmsParser.RULE_attackBaseSummary = 66;
StarRealmsParser.RULE_attackBaseDetail = 67;
StarRealmsParser.RULE_scrapCard = 68;
StarRealmsParser.RULE_scrappingSummary = 69;
StarRealmsParser.RULE_scrappingDetail = 70;
StarRealmsParser.RULE_scrapEffect = 71;
StarRealmsParser.RULE_scrapAction = 72;
StarRealmsParser.RULE_freePurchase = 73;
StarRealmsParser.RULE_moveDiscardToDeck = 74;
StarRealmsParser.RULE_discard = 75;
StarRealmsParser.RULE_discardSummary = 76;
StarRealmsParser.RULE_discardDetail = 77;
StarRealmsParser.RULE_discardAction = 78;
StarRealmsParser.RULE_discardEnd = 79;
StarRealmsParser.RULE_eventRefuseDiscard = 80;
StarRealmsParser.RULE_choseEffect = 81;
StarRealmsParser.RULE_choseEffectSummary = 82;
StarRealmsParser.RULE_discountFactionGambit = 83;
StarRealmsParser.RULE_discardAndDrawSummary = 84;
StarRealmsParser.RULE_choseIncreasePool = 85;
StarRealmsParser.RULE_choseAddToDeck = 86;
StarRealmsParser.RULE_choseScrapFromDiscard = 87;
StarRealmsParser.RULE_choseDiscardAndIncreasePool = 88;
StarRealmsParser.RULE_choseBlobDraw = 89;
StarRealmsParser.RULE_choseIngenuityGambit = 90;
StarRealmsParser.RULE_hiddenBaseGambit = 91;
StarRealmsParser.RULE_midGateEffect = 92;
StarRealmsParser.RULE_alignBotEffect = 93;
StarRealmsParser.RULE_choseEffectDetail = 94;
StarRealmsParser.RULE_refreshTradeRow = 95;
StarRealmsParser.RULE_changeHiddenBaseToFaction = 96;
StarRealmsParser.RULE_activatingEffect = 97;
StarRealmsParser.RULE_activatingSummary = 98;
StarRealmsParser.RULE_activatingDetail = 99;
StarRealmsParser.RULE_scrap = 100;
StarRealmsParser.RULE_resolveHandScrap = 101;
StarRealmsParser.RULE_freeAcquireToTop = 102;
StarRealmsParser.RULE_copyBase = 103;
StarRealmsParser.RULE_copyBaseSummary = 104;
StarRealmsParser.RULE_copyBaseDetail = 105;
StarRealmsParser.RULE_noCopy = 106;
StarRealmsParser.RULE_noCopyBases = 107;
StarRealmsParser.RULE_copyCard = 108;
StarRealmsParser.RULE_copyCardSummary = 109;
StarRealmsParser.RULE_copyCardEffect = 110;
StarRealmsParser.RULE_purchaseToTop = 111;
StarRealmsParser.RULE_scrapSummary = 112;
StarRealmsParser.RULE_scrapDetail = 113;
StarRealmsParser.RULE_resolveHandScrapSummary = 114;
StarRealmsParser.RULE_resolveStealth = 115;
StarRealmsParser.RULE_copyStealth = 116;
StarRealmsParser.RULE_discardAndDraw = 117;
StarRealmsParser.RULE_endPhase = 118;
StarRealmsParser.RULE_endTurn = 119;
StarRealmsParser.RULE_drawPhaseDetail = 120;
StarRealmsParser.RULE_resetCopiedCards = 121;
StarRealmsParser.RULE_refreshIndicators = 122;
StarRealmsParser.RULE_newTurn = 123;
StarRealmsParser.RULE_selectCard = 124;
StarRealmsParser.RULE_replaceGambit = 125;
StarRealmsParser.RULE_noScrap = 126;
StarRealmsParser.RULE_selectDiscard = 127;
StarRealmsParser.RULE_discardForPool = 128;
StarRealmsParser.RULE_discarding = 129;
StarRealmsParser.RULE_drawCardsWithShuffle = 130;
StarRealmsParser.RULE_drawCards = 131;
StarRealmsParser.RULE_newBalanceDetail = 132;
StarRealmsParser.RULE_effect = 133;
StarRealmsParser.RULE_positiveBalance = 134;
StarRealmsParser.RULE_negativeBalance = 135;
StarRealmsParser.RULE_balance = 136;
StarRealmsParser.RULE_destroyBase = 137;
StarRealmsParser.RULE_shuffleCards = 138;
StarRealmsParser.RULE_name = 139;
StarRealmsParser.RULE_card = 140;
StarRealmsParser.RULE_wordPlus = 141;

class BattleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_battle;
    }

	turn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TurnContext);
	    } else {
	        return this.getTypedRuleContext(TurnContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterBattle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitBattle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitBattle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_turn;
    }

	endPhase() {
	    return this.getTypedRuleContext(EndPhaseContext,0);
	};

	winStatus() {
	    return this.getTypedRuleContext(WinStatusContext,0);
	};

	EOF() {
	    return this.getToken(StarRealmsParser.EOF, 0);
	};

	action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionContext);
	    } else {
	        return this.getTypedRuleContext(ActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_action;
    }

	startTurnEffect() {
	    return this.getTypedRuleContext(StartTurnEffectContext,0);
	};

	triggeredEvent() {
	    return this.getTypedRuleContext(TriggeredEventContext,0);
	};

	resolveEvent() {
	    return this.getTypedRuleContext(ResolveEventContext,0);
	};

	purchase() {
	    return this.getTypedRuleContext(PurchaseContext,0);
	};

	purchaseHero() {
	    return this.getTypedRuleContext(PurchaseHeroContext,0);
	};

	play() {
	    return this.getTypedRuleContext(PlayContext,0);
	};

	attackPlayer() {
	    return this.getTypedRuleContext(AttackPlayerContext,0);
	};

	attackBase() {
	    return this.getTypedRuleContext(AttackBaseContext,0);
	};

	scrapCard() {
	    return this.getTypedRuleContext(ScrapCardContext,0);
	};

	discard() {
	    return this.getTypedRuleContext(DiscardContext,0);
	};

	choseEffect() {
	    return this.getTypedRuleContext(ChoseEffectContext,0);
	};

	activatingEffect() {
	    return this.getTypedRuleContext(ActivatingEffectContext,0);
	};

	concede() {
	    return this.getTypedRuleContext(ConcedeContext,0);
	};

	timeout() {
	    return this.getTypedRuleContext(TimeoutContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinStatusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_winStatus;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	HAS() {
	    return this.getToken(StarRealmsParser.HAS, 0);
	};

	WON() {
	    return this.getToken(StarRealmsParser.WON, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	GAME() {
	    return this.getToken(StarRealmsParser.GAME, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterWinStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitWinStatus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitWinStatus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConcedeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_concede;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CONCEDED() {
	    return this.getToken(StarRealmsParser.CONCEDED, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterConcede(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitConcede(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitConcede(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_timeout;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	WINS() {
	    return this.getToken(StarRealmsParser.WINS, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	GAME() {
	    return this.getToken(StarRealmsParser.GAME, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTimeout(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTimeout(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTimeout(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartTurnEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_startTurnEffect;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterStartTurnEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitStartTurnEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitStartTurnEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseHeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseHero;
    }

	purchaseSummary() {
	    return this.getTypedRuleContext(PurchaseSummaryContext,0);
	};

	purchaseHeroDetail() {
	    return this.getTypedRuleContext(PurchaseHeroDetailContext,0);
	};

	playHero = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlayHeroContext);
	    } else {
	        return this.getTypedRuleContext(PlayHeroContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseHero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseHero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseHero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseHeroDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseHeroDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	acquireHeroToTable() {
	    return this.getTypedRuleContext(AcquireHeroToTableContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseHeroDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseHeroDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseHeroDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireHeroToTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireHeroToTable;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	TABLE() {
	    return this.getToken(StarRealmsParser.TABLE, 0);
	};

	IMAGE() {
	    return this.getToken(StarRealmsParser.IMAGE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireHeroToTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireHeroToTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireHeroToTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayHeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playHero;
    }

	triggeredEvent() {
	    return this.getTypedRuleContext(TriggeredEventContext,0);
	};

	tradeRowScrap() {
	    return this.getTypedRuleContext(TradeRowScrapContext,0);
	};

	resolveFreeAcquire() {
	    return this.getTypedRuleContext(ResolveFreeAcquireContext,0);
	};

	resolveSelfScrap() {
	    return this.getTypedRuleContext(ResolveSelfScrapContext,0);
	};

	resolveDiscardAndDraw() {
	    return this.getTypedRuleContext(ResolveDiscardAndDrawContext,0);
	};

	multiScrapSummary() {
	    return this.getTypedRuleContext(MultiScrapSummaryContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	multiScrapDetail() {
	    return this.getTypedRuleContext(MultiScrapDetailContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlayHero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlayHero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlayHero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TradeRowScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_tradeRowScrap;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	IN() {
	    return this.getToken(StarRealmsParser.IN, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTradeRowScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTradeRowScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTradeRowScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveFreeAcquireContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveFreeAcquire;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveFreeAcquire(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveFreeAcquire(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveFreeAcquire(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSelfScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSelfScrap;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSelfScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSelfScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSelfScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveDiscardAndDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveDiscardAndDraw;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	AND() {
	    return this.getToken(StarRealmsParser.AND, 0);
	};

	REDRAW() {
	    return this.getToken(StarRealmsParser.REDRAW, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	selectCard() {
	    return this.getTypedRuleContext(SelectCardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveDiscardAndDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveDiscardAndDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveDiscardAndDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchase;
    }

	purchaseSummary() {
	    return this.getTypedRuleContext(PurchaseSummaryContext,0);
	};

	purchaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PurchaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(PurchaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseSummary;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireToHandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireToHand;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireToHand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireToHand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireToHand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AcquireToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_acquireToDeck;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAcquireToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAcquireToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAcquireToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_play;
    }

	playSummary() {
	    return this.getTypedRuleContext(PlaySummaryContext,0);
	};

	playDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlayDetailContext);
	    } else {
	        return this.getTypedRuleContext(PlayDetailContext,i);
	    }
	};

	completeMission() {
	    return this.getTypedRuleContext(CompleteMissionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlay(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlay(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlay(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaySummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playSummary;
    }

	PLAY() {
	    return this.getToken(StarRealmsParser.PLAY, 0);
	};

	ALL() {
	    return this.getToken(StarRealmsParser.ALL, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	playSingle() {
	    return this.getTypedRuleContext(PlaySingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlaySummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlaySummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlaySummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaySingleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playSingle;
    }

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlaySingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlaySingle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlaySingle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlayDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_playDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	newAbility() {
	    return this.getTypedRuleContext(NewAbilityContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	scrapCardEffect() {
	    return this.getTypedRuleContext(ScrapCardEffectContext,0);
	};

	discardForPool() {
	    return this.getTypedRuleContext(DiscardForPoolContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	multiScrap() {
	    return this.getTypedRuleContext(MultiScrapContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	moveBaseToDeck() {
	    return this.getTypedRuleContext(MoveBaseToDeckContext,0);
	};

	freeAcquire() {
	    return this.getTypedRuleContext(FreeAcquireContext,0);
	};

	copyCardSummary() {
	    return this.getTypedRuleContext(CopyCardSummaryContext,0);
	};

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	refreshCost() {
	    return this.getTypedRuleContext(RefreshCostContext,0);
	};

	triggeredEvent() {
	    return this.getTypedRuleContext(TriggeredEventContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPlayDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPlayDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPlayDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewAbilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newAbility;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	ABILITY() {
	    return this.getToken(StarRealmsParser.ABILITY, 0);
	};

	AVAILABLE() {
	    return this.getToken(StarRealmsParser.AVAILABLE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewAbility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewAbility(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewAbility(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrap;
    }

	multiScrapSummary() {
	    return this.getTypedRuleContext(MultiScrapSummaryContext,0);
	};

	multiScrapDetail() {
	    return this.getTypedRuleContext(MultiScrapDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrapSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiScrapDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_multiScrapDetail;
    }

	scrapCardEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapCardEffectContext);
	    } else {
	        return this.getTypedRuleContext(ScrapCardEffectContext,i);
	    }
	};

	simpleScrap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleScrapContext);
	    } else {
	        return this.getTypedRuleContext(SimpleScrapContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMultiScrapDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMultiScrapDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMultiScrapDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapCardEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapCardEffect;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapCardEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapCardEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapCardEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_simpleScrap;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSimpleScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSimpleScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSimpleScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveBaseToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveBaseToDeck;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveBaseToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveBaseToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveBaseToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreeAcquireContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freeAcquire;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreeAcquire(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreeAcquire(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreeAcquire(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshCostContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_refreshCost;
    }

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	DISCOUNTS() {
	    return this.getToken(StarRealmsParser.DISCOUNTS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterRefreshCost(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitRefreshCost(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitRefreshCost(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEvent;
    }

	triggeredEventSummary() {
	    return this.getTypedRuleContext(TriggeredEventSummaryContext,0);
	};

	triggeredEventDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggeredEventDetailContext);
	    } else {
	        return this.getTypedRuleContext(TriggeredEventDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEventSummary;
    }

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	EVENT() {
	    return this.getToken(StarRealmsParser.EVENT, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEventSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEventSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEventSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggeredEventDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_triggeredEventDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	resolveEvent() {
	    return this.getTypedRuleContext(ResolveEventContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterTriggeredEventDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitTriggeredEventDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitTriggeredEventDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectMissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectMission;
    }

	resolveSelectMission() {
	    return this.getTypedRuleContext(ResolveSelectMissionContext,0);
	};

	actionSelectMission() {
	    return this.getTypedRuleContext(ActionSelectMissionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectMission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectMission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectMission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSelectMissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSelectMission;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SELECT() {
	    return this.getToken(StarRealmsParser.SELECT, 0);
	};

	MISSION() {
	    return this.getToken(StarRealmsParser.MISSION, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	COMPLETE() {
	    return this.getToken(StarRealmsParser.COMPLETE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSelectMission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSelectMission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSelectMission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActionSelectMissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_actionSelectMission;
    }

	SELECTED() {
	    return this.getToken(StarRealmsParser.SELECTED, 0);
	};

	MISSION() {
	    return this.getToken(StarRealmsParser.MISSION, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActionSelectMission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActionSelectMission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActionSelectMission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMission;
    }

	completeMissionSummary() {
	    return this.getTypedRuleContext(CompleteMissionSummaryContext,0);
	};

	selectMission() {
	    return this.getTypedRuleContext(SelectMissionContext,0);
	};

	completeMissionsDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompleteMissionsDetailContext);
	    } else {
	        return this.getTypedRuleContext(CompleteMissionsDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMission(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMission(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMission(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMissionSummary;
    }

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMissionSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMissionSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMissionSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompleteMissionsDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_completeMissionsDetail;
    }

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	selectMissionsReward() {
	    return this.getTypedRuleContext(SelectMissionsRewardContext,0);
	};

	winStatus() {
	    return this.getTypedRuleContext(WinStatusContext,0);
	};

	freeAcquire() {
	    return this.getTypedRuleContext(FreeAcquireContext,0);
	};

	resolveAllyReward() {
	    return this.getTypedRuleContext(ResolveAllyRewardContext,0);
	};

	resolveRuleReward() {
	    return this.getTypedRuleContext(ResolveRuleRewardContext,0);
	};

	resolveDefendReward() {
	    return this.getTypedRuleContext(ResolveDefendRewardContext,0);
	};

	resolveConvertReward() {
	    return this.getTypedRuleContext(ResolveConvertRewardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCompleteMissionsDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCompleteMissionsDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCompleteMissionsDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectMissionsRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectMissionsReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ADD);
	    } else {
	        return this.getToken(StarRealmsParser.ADD, i);
	    }
	};


	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectMissionsReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectMissionsReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectMissionsReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveAllyRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveAllyReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveAllyReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveAllyReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveAllyReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveRuleRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveRuleReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveRuleReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveRuleReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveRuleReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveDefendRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveDefendReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveDefendReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveDefendReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveDefendReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveConvertRewardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveConvertReward;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.NEWLINE);
	    } else {
	        return this.getToken(StarRealmsParser.NEWLINE, i);
	    }
	};


	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	RETURNING() {
	    return this.getToken(StarRealmsParser.RETURNING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	discard() {
	    return this.getTypedRuleContext(DiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveConvertReward(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveConvertReward(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveConvertReward(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEvent;
    }

	resolveEventSummary() {
	    return this.getTypedRuleContext(ResolveEventSummaryContext,0);
	};

	resolveEventDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResolveEventDetailContext);
	    } else {
	        return this.getTypedRuleContext(ResolveEventDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEventSummary;
    }

	resolveSimple() {
	    return this.getTypedRuleContext(ResolveSimpleContext,0);
	};

	resolveBombardment() {
	    return this.getTypedRuleContext(ResolveBombardmentContext,0);
	};

	resolveComet() {
	    return this.getTypedRuleContext(ResolveCometContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	resolveSupplyRun() {
	    return this.getTypedRuleContext(ResolveSupplyRunContext,0);
	};

	resolvingTacticalMan1() {
	    return this.getTypedRuleContext(ResolvingTacticalMan1Context,0);
	};

	resolvingTacticalMan2() {
	    return this.getTypedRuleContext(ResolvingTacticalMan2Context,0);
	};

	resolveWormhole() {
	    return this.getTypedRuleContext(ResolveWormholeContext,0);
	};

	resolveSplinterGambit() {
	    return this.getTypedRuleContext(ResolveSplinterGambitContext,0);
	};

	resolveCard() {
	    return this.getTypedRuleContext(ResolveCardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEventSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEventSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEventSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSimple;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSimple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSimple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveBombardmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveBombardment;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	DESTROY() {
	    return this.getToken(StarRealmsParser.DESTROY, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	LOSE() {
	    return this.getToken(StarRealmsParser.LOSE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveBombardment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveBombardment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveBombardment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveCometContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveComet;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveComet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveComet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveComet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSupplyRunContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSupplyRun;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	EXPLORER() {
	    return this.getToken(StarRealmsParser.EXPLORER, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DECK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.DECK);
	    } else {
	        return this.getToken(StarRealmsParser.DECK, i);
	    }
	};


	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.YOUR);
	    } else {
	        return this.getToken(StarRealmsParser.YOUR, i);
	    }
	};


	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSupplyRun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSupplyRun(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSupplyRun(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolvingTacticalMan1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolvingTacticalMan1;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ADD);
	    } else {
	        return this.getToken(StarRealmsParser.ADD, i);
	    }
	};


	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolvingTacticalMan1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolvingTacticalMan1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolvingTacticalMan1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolvingTacticalMan2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolvingTacticalMan2;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolvingTacticalMan2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolvingTacticalMan2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolvingTacticalMan2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveWormholeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveWormhole;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	INTO() {
	    return this.getToken(StarRealmsParser.INTO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveWormhole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveWormhole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveWormhole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveSplinterGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveSplinterGambit;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ADD);
	    } else {
	        return this.getToken(StarRealmsParser.ADD, i);
	    }
	};


	FEDERATION() {
	    return this.getToken(StarRealmsParser.FEDERATION, 0);
	};

	ALLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.ALLIES);
	    } else {
	        return this.getToken(StarRealmsParser.ALLIES, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	STAR() {
	    return this.getToken(StarRealmsParser.STAR, 0);
	};

	EMPIRE() {
	    return this.getToken(StarRealmsParser.EMPIRE, 0);
	};

	MACHINE() {
	    return this.getToken(StarRealmsParser.MACHINE, 0);
	};

	CULT() {
	    return this.getToken(StarRealmsParser.CULT, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveSplinterGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveSplinterGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveSplinterGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveEventDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveEventDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	discardFromEvent() {
	    return this.getTypedRuleContext(DiscardFromEventContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	scrapSummary() {
	    return this.getTypedRuleContext(ScrapSummaryContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	resolveMobilization() {
	    return this.getTypedRuleContext(ResolveMobilizationContext,0);
	};

	acquireToDeck() {
	    return this.getTypedRuleContext(AcquireToDeckContext,0);
	};

	selectCard() {
	    return this.getTypedRuleContext(SelectCardContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	moveCardToHand() {
	    return this.getTypedRuleContext(MoveCardToHandContext,0);
	};

	acquireToHand() {
	    return this.getTypedRuleContext(AcquireToHandContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveEventDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveEventDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveEventDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardFromEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardFromEvent;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardFromEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardFromEvent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardFromEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveMobilizationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveMobilization;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveMobilization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveMobilization(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveMobilization(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveCardToHandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveCardToHand;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	MOVING() {
	    return this.getToken(StarRealmsParser.MOVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveCardToHand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveCardToHand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveCardToHand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveCard;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackPlayerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackPlayer;
    }

	attackPlayerSummary() {
	    return this.getTypedRuleContext(AttackPlayerSummaryContext,0);
	};

	negativeBalance = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NegativeBalanceContext);
	    } else {
	        return this.getTypedRuleContext(NegativeBalanceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackPlayer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackPlayer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackPlayer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackPlayerSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackPlayerSummary;
    }

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	newAuthority() {
	    return this.getTypedRuleContext(NewAuthorityContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackPlayerSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackPlayerSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackPlayerSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewAuthorityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newAuthority;
    }

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewAuthority(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewAuthority(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewAuthority(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBase;
    }

	attackBaseSummary() {
	    return this.getTypedRuleContext(AttackBaseSummaryContext,0);
	};

	attackBaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttackBaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(AttackBaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBaseSummary;
    }

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttackBaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_attackBaseDetail;
    }

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAttackBaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAttackBaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAttackBaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapCard;
    }

	scrappingSummary() {
	    return this.getTypedRuleContext(ScrappingSummaryContext,0);
	};

	scrappingDetail() {
	    return this.getTypedRuleContext(ScrappingDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrappingSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrappingSummary;
    }

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrappingSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrappingSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrappingSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrappingDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrappingDetail;
    }

	scrapEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapEffectContext);
	    } else {
	        return this.getTypedRuleContext(ScrapEffectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrappingDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrappingDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrappingDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapEffect;
    }

	scrapAction() {
	    return this.getTypedRuleContext(ScrapActionContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	freePurchase() {
	    return this.getTypedRuleContext(FreePurchaseContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	newBalanceDetail() {
	    return this.getTypedRuleContext(NewBalanceDetailContext,0);
	};

	replaceGambit() {
	    return this.getTypedRuleContext(ReplaceGambitContext,0);
	};

	scrapSummary() {
	    return this.getTypedRuleContext(ScrapSummaryContext,0);
	};

	moveDiscardToDeck() {
	    return this.getTypedRuleContext(MoveDiscardToDeckContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapAction;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreePurchaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freePurchase;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreePurchase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreePurchase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreePurchase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MoveDiscardToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_moveDiscardToDeck;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMoveDiscardToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMoveDiscardToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMoveDiscardToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discard;
    }

	discardSummary() {
	    return this.getTypedRuleContext(DiscardSummaryContext,0);
	};

	discardDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiscardDetailContext);
	    } else {
	        return this.getTypedRuleContext(DiscardDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardDetail;
    }

	discardAction() {
	    return this.getTypedRuleContext(DiscardActionContext,0);
	};

	discardEnd() {
	    return this.getTypedRuleContext(DiscardEndContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	refreshTradeRow() {
	    return this.getTypedRuleContext(RefreshTradeRowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAction;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardEndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardEnd;
    }

	NO() {
	    return this.getToken(StarRealmsParser.NO, 0);
	};

	MORE2() {
	    return this.getToken(StarRealmsParser.MORE2, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardEnd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardEnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventRefuseDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_eventRefuseDiscard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEventRefuseDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEventRefuseDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEventRefuseDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffect;
    }

	choseEffectSummary() {
	    return this.getTypedRuleContext(ChoseEffectSummaryContext,0);
	};

	choseEffectDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoseEffectDetailContext);
	    } else {
	        return this.getTypedRuleContext(ChoseEffectDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffectSummary;
    }

	discardAndDrawSummary() {
	    return this.getTypedRuleContext(DiscardAndDrawSummaryContext,0);
	};

	choseIncreasePool() {
	    return this.getTypedRuleContext(ChoseIncreasePoolContext,0);
	};

	choseScrapFromDiscard() {
	    return this.getTypedRuleContext(ChoseScrapFromDiscardContext,0);
	};

	choseDiscardAndIncreasePool() {
	    return this.getTypedRuleContext(ChoseDiscardAndIncreasePoolContext,0);
	};

	choseIngenuityGambit() {
	    return this.getTypedRuleContext(ChoseIngenuityGambitContext,0);
	};

	discountFactionGambit() {
	    return this.getTypedRuleContext(DiscountFactionGambitContext,0);
	};

	hiddenBaseGambit() {
	    return this.getTypedRuleContext(HiddenBaseGambitContext,0);
	};

	choseBlobDraw() {
	    return this.getTypedRuleContext(ChoseBlobDrawContext,0);
	};

	midGateEffect() {
	    return this.getTypedRuleContext(MidGateEffectContext,0);
	};

	choseAddToDeck() {
	    return this.getTypedRuleContext(ChoseAddToDeckContext,0);
	};

	alignBotEffect() {
	    return this.getTypedRuleContext(AlignBotEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffectSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffectSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffectSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscountFactionGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discountFactionGambit;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	AT() {
	    return this.getToken(StarRealmsParser.AT, 0);
	};

	ONE() {
	    return this.getToken(StarRealmsParser.ONE, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscountFactionGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscountFactionGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscountFactionGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardAndDrawSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAndDrawSummary;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	AND() {
	    return this.getToken(StarRealmsParser.AND, 0);
	};

	REDRAW() {
	    return this.getToken(StarRealmsParser.REDRAW, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAndDrawSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAndDrawSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAndDrawSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseIncreasePoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseIncreasePool;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseIncreasePool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseIncreasePool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseIncreasePool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseAddToDeckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseAddToDeck;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	NEXT() {
	    return this.getToken(StarRealmsParser.NEXT, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseAddToDeck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseAddToDeck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseAddToDeck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseScrapFromDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseScrapFromDiscard;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseScrapFromDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseScrapFromDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseScrapFromDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseDiscardAndIncreasePoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseDiscardAndIncreasePool;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseDiscardAndIncreasePool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseDiscardAndIncreasePool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseDiscardAndIncreasePool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseBlobDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseBlobDraw;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.CARD);
	    } else {
	        return this.getToken(StarRealmsParser.CARD, i);
	    }
	};


	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EVERY() {
	    return this.getToken(StarRealmsParser.EVERY, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	THIS() {
	    return this.getToken(StarRealmsParser.THIS, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseBlobDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseBlobDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseBlobDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseIngenuityGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseIngenuityGambit;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	CARDS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.CARDS);
	    } else {
	        return this.getToken(StarRealmsParser.CARDS, i);
	    }
	};


	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseIngenuityGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseIngenuityGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseIngenuityGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HiddenBaseGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_hiddenBaseGambit;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	CREATE() {
	    return this.getToken(StarRealmsParser.CREATE, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterHiddenBaseGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitHiddenBaseGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitHiddenBaseGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MidGateEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_midGateEffect;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	NUMBER() {
	    return this.getToken(StarRealmsParser.NUMBER, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterMidGateEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitMidGateEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitMidGateEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlignBotEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_alignBotEffect;
    }

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	OPPONENT() {
	    return this.getToken(StarRealmsParser.OPPONENT, 0);
	};

	DISCARDS() {
	    return this.getToken(StarRealmsParser.DISCARDS, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterAlignBotEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitAlignBotEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitAlignBotEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChoseEffectDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_choseEffectDetail;
    }

	selectDiscard() {
	    return this.getTypedRuleContext(SelectDiscardContext,0);
	};

	discardForPool() {
	    return this.getTypedRuleContext(DiscardForPoolContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	simpleScrap() {
	    return this.getTypedRuleContext(SimpleScrapContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	refreshTradeRow() {
	    return this.getTypedRuleContext(RefreshTradeRowContext,0);
	};

	changeHiddenBaseToFaction() {
	    return this.getTypedRuleContext(ChangeHiddenBaseToFactionContext,0);
	};

	replaceGambit() {
	    return this.getTypedRuleContext(ReplaceGambitContext,0);
	};

	scrap() {
	    return this.getTypedRuleContext(ScrapContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChoseEffectDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChoseEffectDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChoseEffectDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshTradeRowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_refreshTradeRow;
    }

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	DISCOUNTS() {
	    return this.getToken(StarRealmsParser.DISCOUNTS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterRefreshTradeRow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitRefreshTradeRow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitRefreshTradeRow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeHiddenBaseToFactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_changeHiddenBaseToFaction;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterChangeHiddenBaseToFaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitChangeHiddenBaseToFaction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitChangeHiddenBaseToFaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingEffect;
    }

	activatingSummary() {
	    return this.getTypedRuleContext(ActivatingSummaryContext,0);
	};

	activatingDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActivatingDetailContext);
	    } else {
	        return this.getTypedRuleContext(ActivatingDetailContext,i);
	    }
	};

	completeMission() {
	    return this.getTypedRuleContext(CompleteMissionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingSummary;
    }

	ACTIVATING() {
	    return this.getToken(StarRealmsParser.ACTIVATING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivatingDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_activatingDetail;
    }

	resolveHandScrap() {
	    return this.getTypedRuleContext(ResolveHandScrapContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	scrapSummary() {
	    return this.getTypedRuleContext(ScrapSummaryContext,0);
	};

	noScrap() {
	    return this.getTypedRuleContext(NoScrapContext,0);
	};

	freeAcquireToTop() {
	    return this.getTypedRuleContext(FreeAcquireToTopContext,0);
	};

	destroyBase() {
	    return this.getTypedRuleContext(DestroyBaseContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	noCopy() {
	    return this.getTypedRuleContext(NoCopyContext,0);
	};

	noCopyBases() {
	    return this.getTypedRuleContext(NoCopyBasesContext,0);
	};

	copyCard() {
	    return this.getTypedRuleContext(CopyCardContext,0);
	};

	copyBase() {
	    return this.getTypedRuleContext(CopyBaseContext,0);
	};

	discardAndDraw() {
	    return this.getTypedRuleContext(DiscardAndDrawContext,0);
	};

	positiveBalance() {
	    return this.getTypedRuleContext(PositiveBalanceContext,0);
	};

	negativeBalance() {
	    return this.getTypedRuleContext(NegativeBalanceContext,0);
	};

	resolveStealth() {
	    return this.getTypedRuleContext(ResolveStealthContext,0);
	};

	copyStealth() {
	    return this.getTypedRuleContext(CopyStealthContext,0);
	};

	selectCard() {
	    return this.getTypedRuleContext(SelectCardContext,0);
	};

	discarding() {
	    return this.getTypedRuleContext(DiscardingContext,0);
	};

	discardEnd() {
	    return this.getTypedRuleContext(DiscardEndContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterActivatingDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitActivatingDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitActivatingDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrap;
    }

	scrapSummary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapSummaryContext);
	    } else {
	        return this.getTypedRuleContext(ScrapSummaryContext,i);
	    }
	};

	scrapDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScrapDetailContext);
	    } else {
	        return this.getTypedRuleContext(ScrapDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveHandScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveHandScrap;
    }

	resolveHandScrapSummary() {
	    return this.getTypedRuleContext(ResolveHandScrapSummaryContext,0);
	};

	scrapDetail() {
	    return this.getTypedRuleContext(ScrapDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveHandScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveHandScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveHandScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreeAcquireToTopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_freeAcquireToTop;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	purchaseToTop() {
	    return this.getTypedRuleContext(PurchaseToTopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterFreeAcquireToTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitFreeAcquireToTop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitFreeAcquireToTop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBase;
    }

	copyBaseSummary() {
	    return this.getTypedRuleContext(CopyBaseSummaryContext,0);
	};

	copyBaseDetail() {
	    return this.getTypedRuleContext(CopyBaseDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBaseSummary;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COPIED() {
	    return this.getToken(StarRealmsParser.COPIED, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBaseSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBaseSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBaseSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyBaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyBaseDetail;
    }

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	newBalanceDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NewBalanceDetailContext);
	    } else {
	        return this.getTypedRuleContext(NewBalanceDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyBaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyBaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyBaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoCopyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noCopy;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	COPYING() {
	    return this.getToken(StarRealmsParser.COPYING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	SHIPS() {
	    return this.getToken(StarRealmsParser.SHIPS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoCopy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoCopy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoCopy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoCopyBasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noCopyBases;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	DID() {
	    return this.getToken(StarRealmsParser.DID, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	COPY() {
	    return this.getToken(StarRealmsParser.COPY, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	BASES() {
	    return this.getToken(StarRealmsParser.BASES, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoCopyBases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoCopyBases(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoCopyBases(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCard;
    }

	copyCardSummary() {
	    return this.getTypedRuleContext(CopyCardSummaryContext,0);
	};

	copyCardEffect() {
	    return this.getTypedRuleContext(CopyCardEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCardSummary;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCardSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCardSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCardSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyCardEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyCardEffect;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardContext);
	    } else {
	        return this.getTypedRuleContext(CardContext,i);
	    }
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyCardEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyCardEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyCardEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PurchaseToTopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_purchaseToTop;
    }

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	THE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.THE);
	    } else {
	        return this.getToken(StarRealmsParser.THE, i);
	    }
	};


	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPurchaseToTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPurchaseToTop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPurchaseToTop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapSummary;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScrapDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_scrapDetail;
    }

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterScrapDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitScrapDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitScrapDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveHandScrapSummaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveHandScrapSummary;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveHandScrapSummary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveHandScrapSummary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveHandScrapSummary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResolveStealthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resolveStealth;
    }

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	FEDERATION() {
	    return this.getToken(StarRealmsParser.FEDERATION, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.OR);
	    } else {
	        return this.getToken(StarRealmsParser.OR, i);
	    }
	};


	STAR() {
	    return this.getToken(StarRealmsParser.STAR, 0);
	};

	EMPIRE() {
	    return this.getToken(StarRealmsParser.EMPIRE, 0);
	};

	MACHINE() {
	    return this.getToken(StarRealmsParser.MACHINE, 0);
	};

	CULT() {
	    return this.getToken(StarRealmsParser.CULT, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResolveStealth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResolveStealth(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResolveStealth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyStealthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_copyStealth;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCopyStealth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCopyStealth(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCopyStealth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardAndDrawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardAndDraw;
    }

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	selectDiscard = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectDiscardContext);
	    } else {
	        return this.getTypedRuleContext(SelectDiscardContext,i);
	    }
	};

	discarding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiscardingContext);
	    } else {
	        return this.getTypedRuleContext(DiscardingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardAndDraw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardAndDraw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardAndDraw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndPhaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_endPhase;
    }

	endTurn() {
	    return this.getTypedRuleContext(EndTurnContext,0);
	};

	newTurn() {
	    return this.getTypedRuleContext(NewTurnContext,0);
	};

	drawPhaseDetail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DrawPhaseDetailContext);
	    } else {
	        return this.getTypedRuleContext(DrawPhaseDetailContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEndPhase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEndPhase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEndPhase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndTurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_endTurn;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ENDS() {
	    return this.getToken(StarRealmsParser.ENDS, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEndTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEndTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEndTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawPhaseDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawPhaseDetail;
    }

	resetCopiedCards() {
	    return this.getTypedRuleContext(ResetCopiedCardsContext,0);
	};

	drawCardsWithShuffle() {
	    return this.getTypedRuleContext(DrawCardsWithShuffleContext,0);
	};

	refreshIndicators() {
	    return this.getTypedRuleContext(RefreshIndicatorsContext,0);
	};

	eventRefuseDiscard() {
	    return this.getTypedRuleContext(EventRefuseDiscardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawPhaseDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawPhaseDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawPhaseDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetCopiedCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_resetCopiedCards;
    }

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	UNALIGNED() {
	    return this.getToken(StarRealmsParser.UNALIGNED, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterResetCopiedCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitResetCopiedCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitResetCopiedCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefreshIndicatorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_refreshIndicators;
    }

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	ALLY() {
	    return this.getToken(StarRealmsParser.ALLY, 0);
	};

	INDICATORS() {
	    return this.getToken(StarRealmsParser.INDICATORS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterRefreshIndicators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitRefreshIndicators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitRefreshIndicators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewTurnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newTurn;
    }

	IT() {
	    return this.getToken(StarRealmsParser.IT, 0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOW() {
	    return this.getToken(StarRealmsParser.NOW, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewTurn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewTurn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewTurn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectCardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectCard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplaceGambitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_replaceGambit;
    }

	REPLACED() {
	    return this.getToken(StarRealmsParser.REPLACED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterReplaceGambit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitReplaceGambit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitReplaceGambit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoScrapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_noScrap;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNoScrap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNoScrap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNoScrap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectDiscardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_selectDiscard;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterSelectDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitSelectDiscard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitSelectDiscard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardForPoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discardForPool;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscardForPool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscardForPool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscardForPool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_discarding;
    }

	DISCARDED() {
	    return this.getToken(StarRealmsParser.DISCARDED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDiscarding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDiscarding(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDiscarding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawCardsWithShuffleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawCardsWithShuffle;
    }

	shuffleCards() {
	    return this.getTypedRuleContext(ShuffleCardsContext,0);
	};

	drawCards = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DrawCardsContext);
	    } else {
	        return this.getTypedRuleContext(DrawCardsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawCardsWithShuffle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawCardsWithShuffle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawCardsWithShuffle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DrawCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_drawCards;
    }

	DREW() {
	    return this.getToken(StarRealmsParser.DREW, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDrawCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDrawCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDrawCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewBalanceDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_newBalanceDetail;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	effect() {
	    return this.getTypedRuleContext(EffectContext,0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNewBalanceDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNewBalanceDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNewBalanceDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_effect;
    }

	INCREMENT() {
	    return this.getToken(StarRealmsParser.INCREMENT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitEffect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitEffect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PositiveBalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_positiveBalance;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	INCREMENT() {
	    return this.getToken(StarRealmsParser.INCREMENT, 0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterPositiveBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitPositiveBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitPositiveBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NegativeBalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_negativeBalance;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEPARATOR() {
	    return this.getToken(StarRealmsParser.SEPARATOR, 0);
	};

	balance() {
	    return this.getTypedRuleContext(BalanceContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterNegativeBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitNegativeBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitNegativeBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BalanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_balance;
    }

	wordPlus() {
	    return this.getTypedRuleContext(WordPlusContext,0);
	};

	INT() {
	    return this.getToken(StarRealmsParser.INT, 0);
	};

	DECREASE() {
	    return this.getToken(StarRealmsParser.DECREASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterBalance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitBalance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitBalance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestroyBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_destroyBase;
    }

	DESTROYED() {
	    return this.getToken(StarRealmsParser.DESTROYED, 0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterDestroyBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitDestroyBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitDestroyBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShuffleCardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_shuffleCards;
    }

	SHUFFLED() {
	    return this.getToken(StarRealmsParser.SHUFFLED, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	FORM() {
	    return this.getToken(StarRealmsParser.FORM, 0);
	};

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	NEWLINE() {
	    return this.getToken(StarRealmsParser.NEWLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterShuffleCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitShuffleCards(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitShuffleCards(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_name;
    }

	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_card;
    }

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRealmsParser.INT);
	    } else {
	        return this.getToken(StarRealmsParser.INT, i);
	    }
	};


	wordPlus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WordPlusContext);
	    } else {
	        return this.getTypedRuleContext(WordPlusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitCard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitCard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WordPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRealmsParser.RULE_wordPlus;
    }

	WORD() {
	    return this.getToken(StarRealmsParser.WORD, 0);
	};

	COMBAT() {
	    return this.getToken(StarRealmsParser.COMBAT, 0);
	};

	AUTHORITY() {
	    return this.getToken(StarRealmsParser.AUTHORITY, 0);
	};

	TRADE() {
	    return this.getToken(StarRealmsParser.TRADE, 0);
	};

	ALLIES() {
	    return this.getToken(StarRealmsParser.ALLIES, 0);
	};

	ACQUIRE() {
	    return this.getToken(StarRealmsParser.ACQUIRE, 0);
	};

	CONCEDED() {
	    return this.getToken(StarRealmsParser.CONCEDED, 0);
	};

	OPPONENT() {
	    return this.getToken(StarRealmsParser.OPPONENT, 0);
	};

	DISCARDS() {
	    return this.getToken(StarRealmsParser.DISCARDS, 0);
	};

	FEDERATION() {
	    return this.getToken(StarRealmsParser.FEDERATION, 0);
	};

	COMPLETE() {
	    return this.getToken(StarRealmsParser.COMPLETE, 0);
	};

	SELECT() {
	    return this.getToken(StarRealmsParser.SELECT, 0);
	};

	SELECTED() {
	    return this.getToken(StarRealmsParser.SELECTED, 0);
	};

	MISSION() {
	    return this.getToken(StarRealmsParser.MISSION, 0);
	};

	STAR() {
	    return this.getToken(StarRealmsParser.STAR, 0);
	};

	EXPLORER() {
	    return this.getToken(StarRealmsParser.EXPLORER, 0);
	};

	PUT() {
	    return this.getToken(StarRealmsParser.PUT, 0);
	};

	EMPIRE() {
	    return this.getToken(StarRealmsParser.EMPIRE, 0);
	};

	MACHINE() {
	    return this.getToken(StarRealmsParser.MACHINE, 0);
	};

	CULT() {
	    return this.getToken(StarRealmsParser.CULT, 0);
	};

	ACQUIRED() {
	    return this.getToken(StarRealmsParser.ACQUIRED, 0);
	};

	DISCOUNTS() {
	    return this.getToken(StarRealmsParser.DISCOUNTS, 0);
	};

	CREATE() {
	    return this.getToken(StarRealmsParser.CREATE, 0);
	};

	SECRET() {
	    return this.getToken(StarRealmsParser.SECRET, 0);
	};

	OUTPOST() {
	    return this.getToken(StarRealmsParser.OUTPOST, 0);
	};

	UNALIGNED() {
	    return this.getToken(StarRealmsParser.UNALIGNED, 0);
	};

	ACTIVATING() {
	    return this.getToken(StarRealmsParser.ACTIVATING, 0);
	};

	NEXT() {
	    return this.getToken(StarRealmsParser.NEXT, 0);
	};

	ATTACKED() {
	    return this.getToken(StarRealmsParser.ATTACKED, 0);
	};

	SCRAPPING() {
	    return this.getToken(StarRealmsParser.SCRAPPING, 0);
	};

	SCRAPPED() {
	    return this.getToken(StarRealmsParser.SCRAPPED, 0);
	};

	RETURNING() {
	    return this.getToken(StarRealmsParser.RETURNING, 0);
	};

	SCRAP() {
	    return this.getToken(StarRealmsParser.SCRAP, 0);
	};

	SELECTING() {
	    return this.getToken(StarRealmsParser.SELECTING, 0);
	};

	SHUFFLED() {
	    return this.getToken(StarRealmsParser.SHUFFLED, 0);
	};

	DISCARDED() {
	    return this.getToken(StarRealmsParser.DISCARDED, 0);
	};

	DISCARD() {
	    return this.getToken(StarRealmsParser.DISCARD, 0);
	};

	REFRESH() {
	    return this.getToken(StarRealmsParser.REFRESH, 0);
	};

	REVEALED() {
	    return this.getToken(StarRealmsParser.REVEALED, 0);
	};

	DISCARDING() {
	    return this.getToken(StarRealmsParser.DISCARDING, 0);
	};

	DESTROYED() {
	    return this.getToken(StarRealmsParser.DESTROYED, 0);
	};

	RESOLVING() {
	    return this.getToken(StarRealmsParser.RESOLVING, 0);
	};

	INDICATORS() {
	    return this.getToken(StarRealmsParser.INDICATORS, 0);
	};

	MOVING() {
	    return this.getToken(StarRealmsParser.MOVING, 0);
	};

	AVAILABLE() {
	    return this.getToken(StarRealmsParser.AVAILABLE, 0);
	};

	ABILITY() {
	    return this.getToken(StarRealmsParser.ABILITY, 0);
	};

	CHANGED() {
	    return this.getToken(StarRealmsParser.CHANGED, 0);
	};

	IMAGE() {
	    return this.getToken(StarRealmsParser.IMAGE, 0);
	};

	PLAYED() {
	    return this.getToken(StarRealmsParser.PLAYED, 0);
	};

	COPYING() {
	    return this.getToken(StarRealmsParser.COPYING, 0);
	};

	COPIED() {
	    return this.getToken(StarRealmsParser.COPIED, 0);
	};

	REPLACED() {
	    return this.getToken(StarRealmsParser.REPLACED, 0);
	};

	RECEIVE() {
	    return this.getToken(StarRealmsParser.RECEIVE, 0);
	};

	REDRAW() {
	    return this.getToken(StarRealmsParser.REDRAW, 0);
	};

	COPY() {
	    return this.getToken(StarRealmsParser.COPY, 0);
	};

	RETURN() {
	    return this.getToken(StarRealmsParser.RETURN, 0);
	};

	INTO() {
	    return this.getToken(StarRealmsParser.INTO, 0);
	};

	EVENT() {
	    return this.getToken(StarRealmsParser.EVENT, 0);
	};

	TARGET() {
	    return this.getToken(StarRealmsParser.TARGET, 0);
	};

	DRAW() {
	    return this.getToken(StarRealmsParser.DRAW, 0);
	};

	EVERY() {
	    return this.getToken(StarRealmsParser.EVERY, 0);
	};

	NUMBER() {
	    return this.getToken(StarRealmsParser.NUMBER, 0);
	};

	BLOB() {
	    return this.getToken(StarRealmsParser.BLOB, 0);
	};

	CARDS() {
	    return this.getToken(StarRealmsParser.CARDS, 0);
	};

	CHOSE() {
	    return this.getToken(StarRealmsParser.CHOSE, 0);
	};

	TURN() {
	    return this.getToken(StarRealmsParser.TURN, 0);
	};

	SHIP() {
	    return this.getToken(StarRealmsParser.SHIP, 0);
	};

	SHIPS() {
	    return this.getToken(StarRealmsParser.SHIPS, 0);
	};

	BASE() {
	    return this.getToken(StarRealmsParser.BASE, 0);
	};

	TABLE() {
	    return this.getToken(StarRealmsParser.TABLE, 0);
	};

	BASES() {
	    return this.getToken(StarRealmsParser.BASES, 0);
	};

	PILE() {
	    return this.getToken(StarRealmsParser.PILE, 0);
	};

	EACH() {
	    return this.getToken(StarRealmsParser.EACH, 0);
	};

	PLAY() {
	    return this.getToken(StarRealmsParser.PLAY, 0);
	};

	COST() {
	    return this.getToken(StarRealmsParser.COST, 0);
	};

	FORM() {
	    return this.getToken(StarRealmsParser.FORM, 0);
	};

	DECK() {
	    return this.getToken(StarRealmsParser.DECK, 0);
	};

	DREW() {
	    return this.getToken(StarRealmsParser.DREW, 0);
	};

	DESTROY() {
	    return this.getToken(StarRealmsParser.DESTROY, 0);
	};

	LOSE() {
	    return this.getToken(StarRealmsParser.LOSE, 0);
	};

	ENDS() {
	    return this.getToken(StarRealmsParser.ENDS, 0);
	};

	CARD() {
	    return this.getToken(StarRealmsParser.CARD, 0);
	};

	MORE2() {
	    return this.getToken(StarRealmsParser.MORE2, 0);
	};

	FROM() {
	    return this.getToken(StarRealmsParser.FROM, 0);
	};

	YOUR() {
	    return this.getToken(StarRealmsParser.YOUR, 0);
	};

	ALLY() {
	    return this.getToken(StarRealmsParser.ALLY, 0);
	};

	THIS() {
	    return this.getToken(StarRealmsParser.THIS, 0);
	};

	HAND() {
	    return this.getToken(StarRealmsParser.HAND, 0);
	};

	GAME() {
	    return this.getToken(StarRealmsParser.GAME, 0);
	};

	LESS() {
	    return this.getToken(StarRealmsParser.LESS, 0);
	};

	ONE() {
	    return this.getToken(StarRealmsParser.ONE, 0);
	};

	NEW() {
	    return this.getToken(StarRealmsParser.NEW, 0);
	};

	ALL() {
	    return this.getToken(StarRealmsParser.ALL, 0);
	};

	NOW() {
	    return this.getToken(StarRealmsParser.NOW, 0);
	};

	ROW() {
	    return this.getToken(StarRealmsParser.ROW, 0);
	};

	THE() {
	    return this.getToken(StarRealmsParser.THE, 0);
	};

	TOP() {
	    return this.getToken(StarRealmsParser.TOP, 0);
	};

	FOR() {
	    return this.getToken(StarRealmsParser.FOR, 0);
	};

	DID() {
	    return this.getToken(StarRealmsParser.DID, 0);
	};

	AND() {
	    return this.getToken(StarRealmsParser.AND, 0);
	};

	ADD() {
	    return this.getToken(StarRealmsParser.ADD, 0);
	};

	NOT() {
	    return this.getToken(StarRealmsParser.NOT, 0);
	};

	HAS() {
	    return this.getToken(StarRealmsParser.HAS, 0);
	};

	WON() {
	    return this.getToken(StarRealmsParser.WON, 0);
	};

	WINS() {
	    return this.getToken(StarRealmsParser.WINS, 0);
	};

	ANY() {
	    return this.getToken(StarRealmsParser.ANY, 0);
	};

	IS() {
	    return this.getToken(StarRealmsParser.IS, 0);
	};

	IT() {
	    return this.getToken(StarRealmsParser.IT, 0);
	};

	IN() {
	    return this.getToken(StarRealmsParser.IN, 0);
	};

	TO() {
	    return this.getToken(StarRealmsParser.TO, 0);
	};

	OF() {
	    return this.getToken(StarRealmsParser.OF, 0);
	};

	UP() {
	    return this.getToken(StarRealmsParser.UP, 0);
	};

	OR() {
	    return this.getToken(StarRealmsParser.OR, 0);
	};

	NO() {
	    return this.getToken(StarRealmsParser.NO, 0);
	};

	ON() {
	    return this.getToken(StarRealmsParser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.enterWordPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRealmsListener ) {
	        listener.exitWordPlus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof StarRealmsVisitor ) {
	        return visitor.visitWordPlus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




StarRealmsParser.BattleContext = BattleContext; 
StarRealmsParser.TurnContext = TurnContext; 
StarRealmsParser.ActionContext = ActionContext; 
StarRealmsParser.WinStatusContext = WinStatusContext; 
StarRealmsParser.ConcedeContext = ConcedeContext; 
StarRealmsParser.TimeoutContext = TimeoutContext; 
StarRealmsParser.StartTurnEffectContext = StartTurnEffectContext; 
StarRealmsParser.PurchaseHeroContext = PurchaseHeroContext; 
StarRealmsParser.PurchaseHeroDetailContext = PurchaseHeroDetailContext; 
StarRealmsParser.AcquireHeroToTableContext = AcquireHeroToTableContext; 
StarRealmsParser.PlayHeroContext = PlayHeroContext; 
StarRealmsParser.TradeRowScrapContext = TradeRowScrapContext; 
StarRealmsParser.ResolveFreeAcquireContext = ResolveFreeAcquireContext; 
StarRealmsParser.ResolveSelfScrapContext = ResolveSelfScrapContext; 
StarRealmsParser.ResolveDiscardAndDrawContext = ResolveDiscardAndDrawContext; 
StarRealmsParser.PurchaseContext = PurchaseContext; 
StarRealmsParser.PurchaseSummaryContext = PurchaseSummaryContext; 
StarRealmsParser.PurchaseDetailContext = PurchaseDetailContext; 
StarRealmsParser.AcquireToHandContext = AcquireToHandContext; 
StarRealmsParser.AcquireToDeckContext = AcquireToDeckContext; 
StarRealmsParser.PlayContext = PlayContext; 
StarRealmsParser.PlaySummaryContext = PlaySummaryContext; 
StarRealmsParser.PlaySingleContext = PlaySingleContext; 
StarRealmsParser.PlayDetailContext = PlayDetailContext; 
StarRealmsParser.NewAbilityContext = NewAbilityContext; 
StarRealmsParser.MultiScrapContext = MultiScrapContext; 
StarRealmsParser.MultiScrapSummaryContext = MultiScrapSummaryContext; 
StarRealmsParser.MultiScrapDetailContext = MultiScrapDetailContext; 
StarRealmsParser.ScrapCardEffectContext = ScrapCardEffectContext; 
StarRealmsParser.SimpleScrapContext = SimpleScrapContext; 
StarRealmsParser.MoveBaseToDeckContext = MoveBaseToDeckContext; 
StarRealmsParser.FreeAcquireContext = FreeAcquireContext; 
StarRealmsParser.RefreshCostContext = RefreshCostContext; 
StarRealmsParser.TriggeredEventContext = TriggeredEventContext; 
StarRealmsParser.TriggeredEventSummaryContext = TriggeredEventSummaryContext; 
StarRealmsParser.TriggeredEventDetailContext = TriggeredEventDetailContext; 
StarRealmsParser.SelectMissionContext = SelectMissionContext; 
StarRealmsParser.ResolveSelectMissionContext = ResolveSelectMissionContext; 
StarRealmsParser.ActionSelectMissionContext = ActionSelectMissionContext; 
StarRealmsParser.CompleteMissionContext = CompleteMissionContext; 
StarRealmsParser.CompleteMissionSummaryContext = CompleteMissionSummaryContext; 
StarRealmsParser.CompleteMissionsDetailContext = CompleteMissionsDetailContext; 
StarRealmsParser.SelectMissionsRewardContext = SelectMissionsRewardContext; 
StarRealmsParser.ResolveAllyRewardContext = ResolveAllyRewardContext; 
StarRealmsParser.ResolveRuleRewardContext = ResolveRuleRewardContext; 
StarRealmsParser.ResolveDefendRewardContext = ResolveDefendRewardContext; 
StarRealmsParser.ResolveConvertRewardContext = ResolveConvertRewardContext; 
StarRealmsParser.ResolveEventContext = ResolveEventContext; 
StarRealmsParser.ResolveEventSummaryContext = ResolveEventSummaryContext; 
StarRealmsParser.ResolveSimpleContext = ResolveSimpleContext; 
StarRealmsParser.ResolveBombardmentContext = ResolveBombardmentContext; 
StarRealmsParser.ResolveCometContext = ResolveCometContext; 
StarRealmsParser.ResolveSupplyRunContext = ResolveSupplyRunContext; 
StarRealmsParser.ResolvingTacticalMan1Context = ResolvingTacticalMan1Context; 
StarRealmsParser.ResolvingTacticalMan2Context = ResolvingTacticalMan2Context; 
StarRealmsParser.ResolveWormholeContext = ResolveWormholeContext; 
StarRealmsParser.ResolveSplinterGambitContext = ResolveSplinterGambitContext; 
StarRealmsParser.ResolveEventDetailContext = ResolveEventDetailContext; 
StarRealmsParser.DiscardFromEventContext = DiscardFromEventContext; 
StarRealmsParser.ResolveMobilizationContext = ResolveMobilizationContext; 
StarRealmsParser.MoveCardToHandContext = MoveCardToHandContext; 
StarRealmsParser.ResolveCardContext = ResolveCardContext; 
StarRealmsParser.AttackPlayerContext = AttackPlayerContext; 
StarRealmsParser.AttackPlayerSummaryContext = AttackPlayerSummaryContext; 
StarRealmsParser.NewAuthorityContext = NewAuthorityContext; 
StarRealmsParser.AttackBaseContext = AttackBaseContext; 
StarRealmsParser.AttackBaseSummaryContext = AttackBaseSummaryContext; 
StarRealmsParser.AttackBaseDetailContext = AttackBaseDetailContext; 
StarRealmsParser.ScrapCardContext = ScrapCardContext; 
StarRealmsParser.ScrappingSummaryContext = ScrappingSummaryContext; 
StarRealmsParser.ScrappingDetailContext = ScrappingDetailContext; 
StarRealmsParser.ScrapEffectContext = ScrapEffectContext; 
StarRealmsParser.ScrapActionContext = ScrapActionContext; 
StarRealmsParser.FreePurchaseContext = FreePurchaseContext; 
StarRealmsParser.MoveDiscardToDeckContext = MoveDiscardToDeckContext; 
StarRealmsParser.DiscardContext = DiscardContext; 
StarRealmsParser.DiscardSummaryContext = DiscardSummaryContext; 
StarRealmsParser.DiscardDetailContext = DiscardDetailContext; 
StarRealmsParser.DiscardActionContext = DiscardActionContext; 
StarRealmsParser.DiscardEndContext = DiscardEndContext; 
StarRealmsParser.EventRefuseDiscardContext = EventRefuseDiscardContext; 
StarRealmsParser.ChoseEffectContext = ChoseEffectContext; 
StarRealmsParser.ChoseEffectSummaryContext = ChoseEffectSummaryContext; 
StarRealmsParser.DiscountFactionGambitContext = DiscountFactionGambitContext; 
StarRealmsParser.DiscardAndDrawSummaryContext = DiscardAndDrawSummaryContext; 
StarRealmsParser.ChoseIncreasePoolContext = ChoseIncreasePoolContext; 
StarRealmsParser.ChoseAddToDeckContext = ChoseAddToDeckContext; 
StarRealmsParser.ChoseScrapFromDiscardContext = ChoseScrapFromDiscardContext; 
StarRealmsParser.ChoseDiscardAndIncreasePoolContext = ChoseDiscardAndIncreasePoolContext; 
StarRealmsParser.ChoseBlobDrawContext = ChoseBlobDrawContext; 
StarRealmsParser.ChoseIngenuityGambitContext = ChoseIngenuityGambitContext; 
StarRealmsParser.HiddenBaseGambitContext = HiddenBaseGambitContext; 
StarRealmsParser.MidGateEffectContext = MidGateEffectContext; 
StarRealmsParser.AlignBotEffectContext = AlignBotEffectContext; 
StarRealmsParser.ChoseEffectDetailContext = ChoseEffectDetailContext; 
StarRealmsParser.RefreshTradeRowContext = RefreshTradeRowContext; 
StarRealmsParser.ChangeHiddenBaseToFactionContext = ChangeHiddenBaseToFactionContext; 
StarRealmsParser.ActivatingEffectContext = ActivatingEffectContext; 
StarRealmsParser.ActivatingSummaryContext = ActivatingSummaryContext; 
StarRealmsParser.ActivatingDetailContext = ActivatingDetailContext; 
StarRealmsParser.ScrapContext = ScrapContext; 
StarRealmsParser.ResolveHandScrapContext = ResolveHandScrapContext; 
StarRealmsParser.FreeAcquireToTopContext = FreeAcquireToTopContext; 
StarRealmsParser.CopyBaseContext = CopyBaseContext; 
StarRealmsParser.CopyBaseSummaryContext = CopyBaseSummaryContext; 
StarRealmsParser.CopyBaseDetailContext = CopyBaseDetailContext; 
StarRealmsParser.NoCopyContext = NoCopyContext; 
StarRealmsParser.NoCopyBasesContext = NoCopyBasesContext; 
StarRealmsParser.CopyCardContext = CopyCardContext; 
StarRealmsParser.CopyCardSummaryContext = CopyCardSummaryContext; 
StarRealmsParser.CopyCardEffectContext = CopyCardEffectContext; 
StarRealmsParser.PurchaseToTopContext = PurchaseToTopContext; 
StarRealmsParser.ScrapSummaryContext = ScrapSummaryContext; 
StarRealmsParser.ScrapDetailContext = ScrapDetailContext; 
StarRealmsParser.ResolveHandScrapSummaryContext = ResolveHandScrapSummaryContext; 
StarRealmsParser.ResolveStealthContext = ResolveStealthContext; 
StarRealmsParser.CopyStealthContext = CopyStealthContext; 
StarRealmsParser.DiscardAndDrawContext = DiscardAndDrawContext; 
StarRealmsParser.EndPhaseContext = EndPhaseContext; 
StarRealmsParser.EndTurnContext = EndTurnContext; 
StarRealmsParser.DrawPhaseDetailContext = DrawPhaseDetailContext; 
StarRealmsParser.ResetCopiedCardsContext = ResetCopiedCardsContext; 
StarRealmsParser.RefreshIndicatorsContext = RefreshIndicatorsContext; 
StarRealmsParser.NewTurnContext = NewTurnContext; 
StarRealmsParser.SelectCardContext = SelectCardContext; 
StarRealmsParser.ReplaceGambitContext = ReplaceGambitContext; 
StarRealmsParser.NoScrapContext = NoScrapContext; 
StarRealmsParser.SelectDiscardContext = SelectDiscardContext; 
StarRealmsParser.DiscardForPoolContext = DiscardForPoolContext; 
StarRealmsParser.DiscardingContext = DiscardingContext; 
StarRealmsParser.DrawCardsWithShuffleContext = DrawCardsWithShuffleContext; 
StarRealmsParser.DrawCardsContext = DrawCardsContext; 
StarRealmsParser.NewBalanceDetailContext = NewBalanceDetailContext; 
StarRealmsParser.EffectContext = EffectContext; 
StarRealmsParser.PositiveBalanceContext = PositiveBalanceContext; 
StarRealmsParser.NegativeBalanceContext = NegativeBalanceContext; 
StarRealmsParser.BalanceContext = BalanceContext; 
StarRealmsParser.DestroyBaseContext = DestroyBaseContext; 
StarRealmsParser.ShuffleCardsContext = ShuffleCardsContext; 
StarRealmsParser.NameContext = NameContext; 
StarRealmsParser.CardContext = CardContext; 
StarRealmsParser.WordPlusContext = WordPlusContext; 
